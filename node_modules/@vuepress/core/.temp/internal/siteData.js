/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "一个vue写的文档记录系统",
  "description": "王安会",
  "base": "/",
  "headTags": [
    [
      "link",
      {
        "rel": "icon",
        "href": "/logo.jpg"
      }
    ]
  ],
  "pages": [
    {
      "title": "常用Git命令清单",
      "frontmatter": {
        "title": "常用Git命令清单",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/8292d8/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/10.%E6%89%8B%E5%86%8C/00.%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.html",
      "relativePath": "Git/10.手册/00.常用Git命令清单.md",
      "key": "v-45e0f94b",
      "path": "/pages/8292d8/",
      "headers": [
        {
          "level": 2,
          "title": "一、新建代码库",
          "slug": "一、新建代码库"
        },
        {
          "level": 2,
          "title": "二、配置",
          "slug": "二、配置"
        },
        {
          "level": 2,
          "title": "三、增加/删除文件",
          "slug": "三、增加-删除文件"
        },
        {
          "level": 2,
          "title": "四、代码提交",
          "slug": "四、代码提交"
        },
        {
          "level": 2,
          "title": "五、分支",
          "slug": "五、分支"
        },
        {
          "level": 2,
          "title": "六、标签",
          "slug": "六、标签"
        },
        {
          "level": 2,
          "title": "七、查看信息",
          "slug": "七、查看信息"
        },
        {
          "level": 2,
          "title": "八、远程同步",
          "slug": "八、远程同步"
        },
        {
          "level": 2,
          "title": "九、撤销",
          "slug": "九、撤销"
        },
        {
          "level": 2,
          "title": "十、常用操作组合",
          "slug": "十、常用操作组合"
        },
        {
          "level": 3,
          "title": "1. 修改本地分支名和远程分支名",
          "slug": "_1-修改本地分支名和远程分支名"
        }
      ]
    },
    {
      "title": "Git变基合并",
      "frontmatter": {
        "title": "Git变基合并",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/c10281/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/10.%E6%89%8B%E5%86%8C/03.Git%E5%8F%98%E5%9F%BA%E5%90%88%E5%B9%B6.html",
      "relativePath": "Git/10.手册/03.Git变基合并.md",
      "key": "v-64c6640e",
      "path": "/pages/c10281/",
      "headers": [
        {
          "level": 2,
          "title": "说明",
          "slug": "说明"
        },
        {
          "level": 3,
          "title": "变基要遵守的准则",
          "slug": "变基要遵守的准则"
        },
        {
          "level": 3,
          "title": "变基的实质",
          "slug": "变基的实质"
        },
        {
          "level": 2,
          "title": "后悔药",
          "slug": "后悔药"
        },
        {
          "level": 2,
          "title": "开发期间的rebase操作",
          "slug": "开发期间的rebase操作"
        },
        {
          "level": 3,
          "title": "背景",
          "slug": "背景"
        },
        {
          "level": 3,
          "title": "操作步骤",
          "slug": "操作步骤"
        },
        {
          "level": 3,
          "title": "git cherry-pick",
          "slug": "git-cherry-pick"
        }
      ]
    },
    {
      "title": "技术文档整理 -----",
      "frontmatter": {},
      "regularPath": "/1.%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97.html",
      "relativePath": "1.指南/指南.md",
      "key": "v-608ac9bd",
      "path": "/1.%E6%8C%87%E5%8D%97/%E6%8C%87%E5%8D%97.html"
    },
    {
      "title": "Git命令思维导图",
      "frontmatter": {
        "title": "Git命令思维导图",
        "date": "2020-11-18T17:46:22.000Z",
        "permalink": "/pages/4cbc21/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/10.%E6%89%8B%E5%86%8C/06.Git%E5%91%BD%E4%BB%A4%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.html",
      "relativePath": "Git/10.手册/06.Git命令思维导图.md",
      "key": "v-42860e92",
      "path": "/pages/4cbc21/"
    },
    {
      "title": "Git工具-重写历史",
      "frontmatter": {
        "title": "Git工具-重写历史",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/1832fe/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/100.Git%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2.html",
      "relativePath": "Git/20.文档笔记/100.Git工具-重写历史.md",
      "key": "v-3b3bdc35",
      "path": "/pages/1832fe/",
      "headers": [
        {
          "level": 2,
          "title": "修改最后一次提交",
          "slug": "修改最后一次提交"
        },
        {
          "level": 3,
          "title": "修改提交信息",
          "slug": "修改提交信息"
        },
        {
          "level": 3,
          "title": "修改实际内容",
          "slug": "修改实际内容"
        },
        {
          "level": 2,
          "title": "修改多个提交信息",
          "slug": "修改多个提交信息"
        },
        {
          "level": 2,
          "title": "重新排序提交",
          "slug": "重新排序提交"
        },
        {
          "level": 2,
          "title": "压缩提交",
          "slug": "压缩提交"
        },
        {
          "level": 2,
          "title": "拆分提交",
          "slug": "拆分提交"
        },
        {
          "level": 2,
          "title": "核武器级选项：filter-branch",
          "slug": "核武器级选项-filter-branch"
        },
        {
          "level": 3,
          "title": "从每一个提交中移除一个文件",
          "slug": "从每一个提交中移除一个文件"
        },
        {
          "level": 3,
          "title": "使一个子目录做为新的根目录",
          "slug": "使一个子目录做为新的根目录"
        },
        {
          "level": 3,
          "title": "全局修改邮箱地址",
          "slug": "全局修改邮箱地址"
        }
      ]
    },
    {
      "title": "Git工具-重置揭密",
      "frontmatter": {
        "title": "Git工具-重置揭密",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/d9e9c6/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/110.Git%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86.html",
      "relativePath": "Git/20.文档笔记/110.Git工具-重置揭密.md",
      "key": "v-457d5e1d",
      "path": "/pages/d9e9c6/",
      "headers": [
        {
          "level": 2,
          "title": "三棵树",
          "slug": "三棵树"
        },
        {
          "level": 3,
          "title": "HEAD",
          "slug": "head"
        },
        {
          "level": 3,
          "title": "索引",
          "slug": "索引"
        },
        {
          "level": 3,
          "title": "工作目录",
          "slug": "工作目录"
        },
        {
          "level": 2,
          "title": "工作流程",
          "slug": "工作流程"
        },
        {
          "level": 2,
          "title": "重置的作用",
          "slug": "重置的作用"
        },
        {
          "level": 3,
          "title": "第 1 步：移动 HEAD",
          "slug": "第-1-步-移动-head"
        },
        {
          "level": 3,
          "title": "第 2 步：更新索引（--mixed）",
          "slug": "第-2-步-更新索引-mixed"
        },
        {
          "level": 3,
          "title": "第 3 步：更新工作目录（--hard）",
          "slug": "第-3-步-更新工作目录-hard"
        },
        {
          "level": 3,
          "title": "回顾",
          "slug": "回顾"
        },
        {
          "level": 2,
          "title": "通过路径来重置",
          "slug": "通过路径来重置"
        },
        {
          "level": 2,
          "title": "压缩",
          "slug": "压缩"
        },
        {
          "level": 2,
          "title": "检出",
          "slug": "检出"
        },
        {
          "level": 3,
          "title": "不带路径",
          "slug": "不带路径"
        },
        {
          "level": 3,
          "title": "带路径",
          "slug": "带路径"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ]
    },
    {
      "title": "Git分支-分支原理",
      "frontmatter": {
        "title": "Git分支-分支原理",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/4bef1a/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/20.Git%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E5%8E%9F%E7%90%86.html",
      "relativePath": "Git/20.文档笔记/20.Git分支-分支原理.md",
      "key": "v-fd2ca68c",
      "path": "/pages/4bef1a/",
      "headers": [
        {
          "level": 3,
          "title": "首次提交",
          "slug": "首次提交"
        },
        {
          "level": 3,
          "title": "再次提交",
          "slug": "再次提交"
        },
        {
          "level": 3,
          "title": "Git 的分支",
          "slug": "git-的分支"
        },
        {
          "level": 3,
          "title": "创建分支",
          "slug": "创建分支"
        },
        {
          "level": 3,
          "title": "当前分支的指针",
          "slug": "当前分支的指针"
        },
        {
          "level": 3,
          "title": "查看当前所在分支",
          "slug": "查看当前所在分支"
        },
        {
          "level": 3,
          "title": "分支切换",
          "slug": "分支切换"
        },
        {
          "level": 3,
          "title": "创建分支同时切换",
          "slug": "创建分支同时切换"
        }
      ]
    },
    {
      "title": "Git基础与命令",
      "frontmatter": {
        "title": "Git基础与命令",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/635088/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/10.Git%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%91%BD%E4%BB%A4.html",
      "relativePath": "Git/20.文档笔记/10.Git基础与命令.md",
      "key": "v-b4157a60",
      "path": "/pages/635088/",
      "headers": [
        {
          "level": 2,
          "title": "Git基础",
          "slug": "git基础"
        },
        {
          "level": 3,
          "title": "全局配置",
          "slug": "全局配置"
        },
        {
          "level": 3,
          "title": "检查配置信息",
          "slug": "检查配置信息"
        },
        {
          "level": 3,
          "title": "获取帮助",
          "slug": "获取帮助"
        },
        {
          "level": 3,
          "title": "初始化仓库",
          "slug": "初始化仓库"
        },
        {
          "level": 3,
          "title": "克隆远程仓库",
          "slug": "克隆远程仓库"
        },
        {
          "level": 3,
          "title": "检查文件状态",
          "slug": "检查文件状态"
        },
        {
          "level": 3,
          "title": "加入暂存区 (跟踪文件)",
          "slug": "加入暂存区-跟踪文件"
        },
        {
          "level": 3,
          "title": "忽略文件",
          "slug": "忽略文件"
        },
        {
          "level": 3,
          "title": "查看修改的具体内容",
          "slug": "查看修改的具体内容"
        },
        {
          "level": 3,
          "title": "提交更新",
          "slug": "提交更新"
        },
        {
          "level": 3,
          "title": "跳过使用暂存区域",
          "slug": "跳过使用暂存区域"
        },
        {
          "level": 2,
          "title": "Git 基础 - 查看提交历史",
          "slug": "git-基础-查看提交历史"
        },
        {
          "level": 2,
          "title": "Git 基础 - 撤消操作",
          "slug": "git-基础-撤消操作"
        },
        {
          "level": 2,
          "title": "Git 基础 - 远程仓库的使用",
          "slug": "git-基础-远程仓库的使用"
        },
        {
          "level": 3,
          "title": "查看远程仓库",
          "slug": "查看远程仓库"
        },
        {
          "level": 3,
          "title": "添加远程仓库",
          "slug": "添加远程仓库"
        },
        {
          "level": 3,
          "title": "从远程仓库中抓取与拉取",
          "slug": "从远程仓库中抓取与拉取"
        },
        {
          "level": 3,
          "title": "推送到远程仓库",
          "slug": "推送到远程仓库"
        },
        {
          "level": 3,
          "title": "查看某个远程仓库",
          "slug": "查看某个远程仓库"
        },
        {
          "level": 3,
          "title": "远程仓库的重命名与移除",
          "slug": "远程仓库的重命名与移除"
        },
        {
          "level": 2,
          "title": "Git 基础 - 打标签",
          "slug": "git-基础-打标签"
        },
        {
          "level": 3,
          "title": "列出标签",
          "slug": "列出标签"
        },
        {
          "level": 3,
          "title": "创建标签",
          "slug": "创建标签"
        },
        {
          "level": 3,
          "title": "附注标签",
          "slug": "附注标签"
        },
        {
          "level": 3,
          "title": "轻量标签",
          "slug": "轻量标签"
        },
        {
          "level": 3,
          "title": "后期打标签",
          "slug": "后期打标签"
        },
        {
          "level": 3,
          "title": "共享标签",
          "slug": "共享标签"
        },
        {
          "level": 3,
          "title": "删除标签",
          "slug": "删除标签"
        },
        {
          "level": 3,
          "title": "检出标签",
          "slug": "检出标签"
        },
        {
          "level": 2,
          "title": "Git 命令别名",
          "slug": "git-命令别名"
        }
      ]
    },
    {
      "title": "Git分支的新建与合并-分支操作",
      "frontmatter": {
        "title": "Git分支的新建与合并-分支操作",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/ea5a8c/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/30.Git%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C.html",
      "relativePath": "Git/20.文档笔记/30.Git分支的新建与合并-分支操作.md",
      "key": "v-1d91b690",
      "path": "/pages/ea5a8c/",
      "headers": [
        {
          "level": 3,
          "title": "创建分支并切换",
          "slug": "创建分支并切换"
        },
        {
          "level": 3,
          "title": "切换分支",
          "slug": "切换分支"
        },
        {
          "level": 3,
          "title": "合并分支",
          "slug": "合并分支"
        },
        {
          "level": 3,
          "title": "删除分支",
          "slug": "删除分支"
        },
        {
          "level": 3,
          "title": "多次提交之后合并分支",
          "slug": "多次提交之后合并分支"
        },
        {
          "level": 3,
          "title": "遇到冲突时的分支合并",
          "slug": "遇到冲突时的分支合并"
        }
      ]
    },
    {
      "title": "Git分支开发工作流",
      "frontmatter": {
        "title": "Git分支开发工作流",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/49ee30/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/50.Git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81.html",
      "relativePath": "Git/20.文档笔记/50.Git分支开发工作流.md",
      "key": "v-3ffc3310",
      "path": "/pages/49ee30/",
      "headers": [
        {
          "level": 3,
          "title": "长期分支",
          "slug": "长期分支"
        },
        {
          "level": 3,
          "title": "主题分支 (短期分支)",
          "slug": "主题分支-短期分支"
        }
      ]
    },
    {
      "title": "Git分支管理-查看分支",
      "frontmatter": {
        "title": "Git分支管理-查看分支",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/a399b3/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/40.Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86-%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF.html",
      "relativePath": "Git/20.文档笔记/40.Git分支管理-查看分支.md",
      "key": "v-5bb2395e",
      "path": "/pages/a399b3/",
      "headers": [
        {
          "level": 3,
          "title": "查看分支",
          "slug": "查看分支"
        },
        {
          "level": 3,
          "title": "查看每个分支的最后提交",
          "slug": "查看每个分支的最后提交"
        },
        {
          "level": 3,
          "title": "查看已(未)合并的分支",
          "slug": "查看已-未-合并的分支"
        }
      ]
    },
    {
      "title": "Git分支-远程分支",
      "frontmatter": {
        "title": "Git分支-远程分支",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/574d62/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/60.Git%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF.html",
      "relativePath": "Git/20.文档笔记/60.Git分支-远程分支.md",
      "key": "v-f64da882",
      "path": "/pages/574d62/",
      "headers": [
        {
          "level": 3,
          "title": "查看远程引用列表与信息",
          "slug": "查看远程引用列表与信息"
        },
        {
          "level": 3,
          "title": "远程跟踪分支",
          "slug": "远程跟踪分支"
        },
        {
          "level": 3,
          "title": "推送",
          "slug": "推送"
        },
        {
          "level": 3,
          "title": "跟踪分支",
          "slug": "跟踪分支"
        },
        {
          "level": 3,
          "title": "查看跟踪分支",
          "slug": "查看跟踪分支"
        },
        {
          "level": 3,
          "title": "拉取",
          "slug": "拉取"
        },
        {
          "level": 3,
          "title": "删除远程分支",
          "slug": "删除远程分支"
        }
      ]
    },
    {
      "title": "Git分支-变基",
      "frontmatter": {
        "title": "Git分支-变基",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/3a3247/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/70.Git%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA.html",
      "relativePath": "Git/20.文档笔记/70.Git分支-变基.md",
      "key": "v-1ab7ecc1",
      "path": "/pages/3a3247/",
      "headers": [
        {
          "level": 2,
          "title": "变基的基本操作",
          "slug": "变基的基本操作"
        },
        {
          "level": 3,
          "title": "概念",
          "slug": "概念"
        },
        {
          "level": 3,
          "title": "原理",
          "slug": "原理"
        },
        {
          "level": 3,
          "title": "步骤",
          "slug": "步骤"
        },
        {
          "level": 3,
          "title": "优点",
          "slug": "优点"
        },
        {
          "level": 2,
          "title": "更有趣的变基例子",
          "slug": "更有趣的变基例子"
        },
        {
          "level": 3,
          "title": "更有趣的变基例子",
          "slug": "更有趣的变基例子-2"
        },
        {
          "level": 3,
          "title": "--onto选项",
          "slug": "onto选项"
        },
        {
          "level": 3,
          "title": "省去先切换到源分支的步骤",
          "slug": "省去先切换到源分支的步骤"
        },
        {
          "level": 2,
          "title": "变基的风险",
          "slug": "变基的风险"
        },
        {
          "level": 3,
          "title": "金科玉律",
          "slug": "金科玉律"
        },
        {
          "level": 3,
          "title": "变基的实质",
          "slug": "变基的实质"
        },
        {
          "level": 2,
          "title": "用变基解决变基",
          "slug": "用变基解决变基"
        },
        {
          "level": 2,
          "title": "变基 vs. 合并",
          "slug": "变基-vs-合并"
        }
      ]
    },
    {
      "title": "Git工具-交互式暂存",
      "frontmatter": {
        "title": "Git工具-交互式暂存",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/76d859/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/90.Git%E5%B7%A5%E5%85%B7-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98.html",
      "relativePath": "Git/20.文档笔记/90.Git工具-交互式暂存.md",
      "key": "v-a034741e",
      "path": "/pages/76d859/",
      "headers": [
        {
          "level": 2,
          "title": "暂存与取消暂存文件",
          "slug": "暂存与取消暂存文件"
        },
        {
          "level": 2,
          "title": "暂存补丁",
          "slug": "暂存补丁"
        }
      ]
    },
    {
      "title": "Home",
      "frontmatter": {
        "home": true,
        "heroImage": "/hero.png",
        "heroText": "同多优",
        "tagline": "文档整理",
        "actionText": "快速上手 →",
        "actionLink": "/1.指南/指南/",
        "features": [
          {
            "title": "简洁至上",
            "details": "以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。"
          },
          {
            "title": "Vue驱动",
            "details": "享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。"
          },
          {
            "title": "高性能",
            "details": "VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。",
            "footer": "MIT Licensed | Copyright © 2018-present Evan You"
          }
        ]
      },
      "regularPath": "/",
      "relativePath": "README.md",
      "key": "v-579fd00b",
      "path": "/"
    },
    {
      "title": "MVVM模式",
      "frontmatter": {
        "title": "MVVM模式",
        "date": "2020-02-04T12:19:00.000Z",
        "permalink": "/pages/114158caa9e96df0",
        "categories": [
          "《Vue》笔记",
          "基础"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/01.%E5%9F%BA%E7%A1%80/00.MVVM%E6%A8%A1%E5%BC%8F.html",
      "relativePath": "Vue/01.基础/00.MVVM模式.md",
      "key": "v-6548e042",
      "path": "/pages/114158caa9e96df0/",
      "excerpt": "<div class=\"custom-block tip\"><p class=\"custom-block-title\">TIP</p>\n<p>说明：本章内容是博主的Vue学习笔记，以<a href=\"https://cn.vuejs.org/v2/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档<OutboundLink/></a>为准。</p>\n</div>\n<h1 id=\"mvvm模式\"><a class=\"header-anchor\" href=\"#mvvm模式\">#</a> MVVM模式</h1>\n<p>MVVM模式，<code>M</code>即 model，数据模型；<code>V</code>即 view，视图；<code>VM</code>即 view-model，视图模型。</p>\n"
    },
    {
      "title": "Git工具-查看修订版本",
      "frontmatter": {
        "title": "Git工具-查看修订版本",
        "date": "2020-11-18T17:43:57.000Z",
        "permalink": "/pages/c984d1/",
        "categories": [
          "《Git》学习笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Git/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/80.Git%E5%B7%A5%E5%85%B7-%E6%9F%A5%E7%9C%8B%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC.html",
      "relativePath": "Git/20.文档笔记/80.Git工具-查看修订版本.md",
      "key": "v-3a5f693e",
      "path": "/pages/c984d1/",
      "headers": [
        {
          "level": 2,
          "title": "单个修订版本",
          "slug": "单个修订版本"
        },
        {
          "level": 2,
          "title": "简短的 SHA-1",
          "slug": "简短的-sha-1"
        },
        {
          "level": 3,
          "title": "查看给定SHA-1值的提交",
          "slug": "查看给定sha-1值的提交"
        },
        {
          "level": 2,
          "title": "分支引用",
          "slug": "分支引用"
        },
        {
          "level": 3,
          "title": "查看最后一次提交",
          "slug": "查看最后一次提交"
        },
        {
          "level": 2,
          "title": "引用日志",
          "slug": "引用日志"
        },
        {
          "level": 3,
          "title": "HEAD的指向历史",
          "slug": "head的指向历史"
        },
        {
          "level": 2,
          "title": "祖先引用",
          "slug": "祖先引用"
        },
        {
          "level": 2,
          "title": "提交区间",
          "slug": "提交区间"
        },
        {
          "level": 3,
          "title": "双点",
          "slug": "双点"
        },
        {
          "level": 3,
          "title": "多点",
          "slug": "多点"
        },
        {
          "level": 3,
          "title": "三点",
          "slug": "三点"
        }
      ]
    },
    {
      "title": "v-if vs v-show",
      "frontmatter": {
        "title": "v-if vs v-show",
        "date": "2020-02-04T17:32:23.000Z",
        "permalink": "/pages/73e4064340277b05",
        "categories": [
          "《Vue》笔记",
          "基础"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/01.%E5%9F%BA%E7%A1%80/30.v-if%20vs%20v-show.html",
      "relativePath": "Vue/01.基础/30.v-if vs v-show.md",
      "key": "v-5f979ac4",
      "path": "/pages/73e4064340277b05/",
      "excerpt": "<h1 id=\"v-if-vs-v-show\"><a class=\"header-anchor\" href=\"#v-if-vs-v-show\">#</a> v-if vs v-show</h1>\n<p><a href=\"https://cn.vuejs.org/v2/guide/conditional.html#v-if-vs-v-show\" target=\"_blank\" rel=\"noopener noreferrer\">API<OutboundLink/></a></p>\n<p><code>v-if</code> 根据渲染条件决定是否把元素渲染到DOM页面，而<code>v-show</code>不管渲染条件是什么，都会把元素渲染到DOM页面，只是简单的切换CSS的显示隐藏。</p>\n"
    },
    {
      "title": "计算属性 vs 方法 vs 侦听属性",
      "frontmatter": {
        "title": "计算属性 vs 方法 vs 侦听属性",
        "date": "2020-02-04T16:37:51.000Z",
        "permalink": "/pages/351f72ecd9c41129",
        "categories": [
          "《Vue》笔记",
          "基础"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/01.%E5%9F%BA%E7%A1%80/20.%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%20vs%20%E6%96%B9%E6%B3%95%20vs%20%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7.html",
      "relativePath": "Vue/01.基础/20.计算属性 vs 方法 vs 侦听属性.md",
      "key": "v-43f4fdf2",
      "path": "/pages/351f72ecd9c41129/",
      "excerpt": "<h1 id=\"计算属性-vs-方法-vs-侦听属性\"><a class=\"header-anchor\" href=\"#计算属性-vs-方法-vs-侦听属性\">#</a> 计算属性 vs 方法 vs 侦听属性</h1>\n<p><a href=\"https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95\" target=\"_blank\" rel=\"noopener noreferrer\">API<OutboundLink/></a></p>\n<p>如果一个功能同时可以使用计算属性(computed)、方法(methods)、侦听属性(watch)来实现的时候推荐使用计算属性。</p>\n"
    },
    {
      "title": "生命周期",
      "frontmatter": {
        "title": "生命周期",
        "date": "2020-02-04T15:06:59.000Z",
        "permalink": "/pages/176808a1b5f843b8",
        "categories": [
          "《Vue》笔记",
          "基础"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/01.%E5%9F%BA%E7%A1%80/10.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html",
      "relativePath": "Vue/01.基础/10.生命周期.md",
      "key": "v-663663be",
      "path": "/pages/176808a1b5f843b8/",
      "headers": [
        {
          "level": 2,
          "title": "Demo",
          "slug": "demo"
        },
        {
          "level": 2,
          "title": "生命周期图示",
          "slug": "生命周期图示"
        }
      ],
      "excerpt": "<h1 id=\"实例生命周期钩子\"><a class=\"header-anchor\" href=\"#实例生命周期钩子\">#</a> 实例生命周期钩子</h1>\n<p><a href=\"https://cn.vuejs.org/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90\" target=\"_blank\" rel=\"noopener noreferrer\">实例生命周期钩子API<OutboundLink/></a></p>\n<p>简单理解，生命周期钩子函数就是vue实例在某一个时间点会自动执行的函数。</p>\n"
    },
    {
      "title": "列表渲染之数组、对象更新检测",
      "frontmatter": {
        "title": "列表渲染之数组、对象更新检测",
        "date": "2020-02-05T13:09:06.000Z",
        "permalink": "/pages/04783a6691cc9d06",
        "categories": [
          "《Vue》笔记",
          "基础"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/01.%E5%9F%BA%E7%A1%80/35.%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93%E4%B9%8B%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B.html",
      "relativePath": "Vue/01.基础/35.列表渲染之数组、对象更新检测.md",
      "key": "v-34b8f55b",
      "path": "/pages/04783a6691cc9d06/",
      "headers": [
        {
          "level": 2,
          "title": "数组更新检测",
          "slug": "数组更新检测"
        },
        {
          "level": 2,
          "title": "对象变更检测注意事项",
          "slug": "对象变更检测注意事项"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ],
      "excerpt": "<h1 id=\"列表渲染之数组、对象更新检测\"><a class=\"header-anchor\" href=\"#列表渲染之数组、对象更新检测\">#</a> 列表渲染之数组、对象更新检测</h1>\n<p><a href=\"https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B\" target=\"_blank\" rel=\"noopener noreferrer\">数组更新检测API<OutboundLink/></a> <a href=\"https://cn.vuejs.org/v2/guide/list.html#%E5%AF%B9%E8%B1%A1%E5%8F%98%E6%9B%B4%E6%A3%80%E6%B5%8B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\" target=\"_blank\" rel=\"noopener noreferrer\">对象更新检测API<OutboundLink/></a></p>\n<h2 id=\"数组更新检测\"><a class=\"header-anchor\" href=\"#数组更新检测\">#</a> 数组更新检测</h2>\n<h4 id=\"变异方法-mutation-method\"><a class=\"header-anchor\" href=\"#变异方法-mutation-method\">#</a> 变异方法 (mutation method)</h4>\n<p>Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p>\n"
    },
    {
      "title": "使用组件的细节点",
      "frontmatter": {
        "title": "使用组件的细节点",
        "date": "2020-02-13T13:26:20.000Z",
        "permalink": "/pages/83a1ab785e7fd70c",
        "categories": [
          "《Vue》笔记",
          "组件"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/02.%E7%BB%84%E4%BB%B6/36.%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E7%9A%84%E7%BB%86%E8%8A%82%E7%82%B9.html",
      "relativePath": "Vue/02.组件/36.使用组件的细节点.md",
      "key": "v-77d52600",
      "path": "/pages/83a1ab785e7fd70c/",
      "headers": [
        {
          "level": 2,
          "title": "解析 DOM 模板时的注意事项",
          "slug": "解析-dom-模板时的注意事项"
        },
        {
          "level": 2,
          "title": "子组件内的data要使用函数返回",
          "slug": "子组件内的data要使用函数返回"
        },
        {
          "level": 2,
          "title": "通过 ref 引用操作DOM",
          "slug": "通过-ref-引用操作dom"
        }
      ]
    },
    {
      "title": "父组件给子组件传值",
      "frontmatter": {
        "title": "父组件给子组件传值",
        "date": "2020-02-04T12:45:30.000Z",
        "permalink": "/pages/07b384c2e6232e07",
        "categories": [
          "《Vue》笔记",
          "组件"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/02.%E7%BB%84%E4%BB%B6/40.%E7%88%B6%E7%BB%84%E4%BB%B6%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC.html",
      "relativePath": "Vue/02.组件/40.父组件给子组件传值.md",
      "key": "v-717398e5",
      "path": "/pages/07b384c2e6232e07/",
      "headers": [
        {
          "level": 2,
          "title": "单向数据流",
          "slug": "单向数据流"
        },
        {
          "level": 2,
          "title": "父子组件间传递数据 demo",
          "slug": "父子组件间传递数据-demo"
        }
      ],
      "excerpt": "<h1 id=\"父组件给子组件传值\"><a class=\"header-anchor\" href=\"#父组件给子组件传值\">#</a> 父组件给子组件传值</h1>\n<p>父组件中，通过给子组件标签v-bind绑定属性的方式传入值</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ComponentName</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-bind:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ComponentName</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><blockquote>\n<p>如果不使用v-bind传入的值为字符串，使用v-bind绑定传入的值为表达式。</p>\n</blockquote>\n"
    },
    {
      "title": "子组件派发事件和值给父组件",
      "frontmatter": {
        "title": "子组件派发事件和值给父组件",
        "date": "2020-02-04T12:56:51.000Z",
        "permalink": "/pages/0f19a1bcac14fd41",
        "categories": [
          "《Vue》笔记",
          "组件"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/02.%E7%BB%84%E4%BB%B6/50.%E5%AD%90%E7%BB%84%E4%BB%B6%E6%B4%BE%E5%8F%91%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%80%BC%E7%BB%99%E7%88%B6%E7%BB%84%E4%BB%B6.html",
      "relativePath": "Vue/02.组件/50.子组件派发事件和值给父组件.md",
      "key": "v-7095dbf9",
      "path": "/pages/0f19a1bcac14fd41/",
      "headers": [
        {
          "level": 2,
          "title": "父子组件间传递数据 demo",
          "slug": "父子组件间传递数据-demo"
        }
      ],
      "excerpt": "<h1 id=\"子组件派发事件和值给父组件\"><a class=\"header-anchor\" href=\"#子组件派发事件和值给父组件\">#</a> 子组件派发事件和值给父组件</h1>\n<p><a href=\"https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6\" target=\"_blank\" rel=\"noopener noreferrer\">API<OutboundLink/></a></p>\n<p>子组件通过<code>$emit</code>派发事件和值给父组件（值可以有多个）</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fnX'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "Prop 验证 与 非 Prop 的 Attribute",
      "frontmatter": {
        "title": "Prop 验证 与 非 Prop 的 Attribute",
        "date": "2020-02-15T10:49:04.000Z",
        "permalink": "/pages/a3080f60f6596eb4",
        "categories": [
          "《Vue》笔记",
          "组件"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/02.%E7%BB%84%E4%BB%B6/52.Prop%20%E9%AA%8C%E8%AF%81%20%E4%B8%8E%20%E9%9D%9E%20Prop%20%E7%9A%84%20Attribute.html",
      "relativePath": "Vue/02.组件/52.Prop 验证 与 非 Prop 的 Attribute.md",
      "key": "v-5c843578",
      "path": "/pages/a3080f60f6596eb4/",
      "headers": [
        {
          "level": 2,
          "title": "Prop 验证",
          "slug": "prop-验证"
        },
        {
          "level": 2,
          "title": "非 Prop 的 Attribute",
          "slug": "非-prop-的-attribute"
        },
        {
          "level": 3,
          "title": "用处",
          "slug": "用处"
        }
      ]
    },
    {
      "title": "兄弟组件传值",
      "frontmatter": {
        "title": "兄弟组件传值",
        "date": "2020-02-04T13:04:32.000Z",
        "permalink": "/pages/809f4582d9ca9552",
        "categories": [
          "《Vue》笔记",
          "组件"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/02.%E7%BB%84%E4%BB%B6/60.%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC.html",
      "relativePath": "Vue/02.组件/60.兄弟组件传值.md",
      "key": "v-bf18aac4",
      "path": "/pages/809f4582d9ca9552/"
    },
    {
      "title": "自定义事件",
      "frontmatter": {
        "title": "自定义事件",
        "date": "2020-02-15T11:27:45.000Z",
        "permalink": "/pages/9651417d08d1779d",
        "categories": [
          "《Vue》笔记",
          "组件"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/02.%E7%BB%84%E4%BB%B6/55.%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6.html",
      "relativePath": "Vue/02.组件/55.自定义事件.md",
      "key": "v-4126a242",
      "path": "/pages/9651417d08d1779d/",
      "headers": [
        {
          "level": 3,
          "title": "在组件标签v-on绑定的事件是自定义事件",
          "slug": "在组件标签v-on绑定的事件是自定义事件"
        },
        {
          "level": 3,
          "title": "使自定义事件变为原生事件",
          "slug": "使自定义事件变为原生事件"
        },
        {
          "level": 3,
          "title": "自定义事件名会自动变小写",
          "slug": "自定义事件名会自动变小写"
        }
      ]
    },
    {
      "title": "非父子组件传值",
      "frontmatter": {
        "title": "非父子组件传值",
        "date": "2020-02-15T14:55:03.000Z",
        "permalink": "/pages/d408e64f666f146d",
        "categories": [
          "《Vue》笔记",
          "组件"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/02.%E7%BB%84%E4%BB%B6/65.%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC.html",
      "relativePath": "Vue/02.组件/65.非父子组件传值.md",
      "key": "v-1168fac0",
      "path": "/pages/d408e64f666f146d/",
      "excerpt": "<h1 id=\"非父子组件间传值\"><a class=\"header-anchor\" href=\"#非父子组件间传值\">#</a> 非父子组件间传值</h1>\n<p>当组件的嵌套多时，非父子组件间传值就显得复杂，除了使用<a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">vuex<OutboundLink/></a>实现之外，还可以通过Bus（或者叫 总线/发布订阅模式/观察者模式）的方式实现非父子组件间传值。</p>\n"
    },
    {
      "title": "父组件调用子组件方法并传入值",
      "frontmatter": {
        "title": "父组件调用子组件方法并传入值",
        "date": "2020-02-04T13:06:37.000Z",
        "permalink": "/pages/2e24dab728769e0c",
        "categories": [
          "《Vue》笔记",
          "组件"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/02.%E7%BB%84%E4%BB%B6/70.%E7%88%B6%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E6%96%B9%E6%B3%95%E5%B9%B6%E4%BC%A0%E5%85%A5%E5%80%BC.html",
      "relativePath": "Vue/02.组件/70.父组件调用子组件方法并传入值.md",
      "key": "v-6ff2ec7c",
      "path": "/pages/2e24dab728769e0c/"
    },
    {
      "title": "插槽slot",
      "frontmatter": {
        "title": "插槽slot",
        "date": "2020-02-16T11:46:27.000Z",
        "permalink": "/pages/055ecee9a4325386",
        "categories": [
          "《Vue》笔记",
          "组件"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/02.%E7%BB%84%E4%BB%B6/75.%E6%8F%92%E6%A7%BDslot.html",
      "relativePath": "Vue/02.组件/75.插槽slot.md",
      "key": "v-203af546",
      "path": "/pages/055ecee9a4325386/",
      "headers": [
        {
          "level": 2,
          "title": "插槽",
          "slug": "插槽"
        },
        {
          "level": 2,
          "title": "具名插槽",
          "slug": "具名插槽"
        },
        {
          "level": 2,
          "title": "作用域插槽",
          "slug": "作用域插槽"
        },
        {
          "level": 2,
          "title": "具名插槽的缩写",
          "slug": "具名插槽的缩写"
        },
        {
          "level": 2,
          "title": "Demo",
          "slug": "demo"
        }
      ]
    },
    {
      "title": "动态组件与 v-once 指令",
      "frontmatter": {
        "title": "动态组件与 v-once 指令",
        "date": "2020-02-16T15:52:19.000Z",
        "permalink": "/pages/636ca33122e9a64b",
        "categories": [
          "《Vue》笔记",
          "组件"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/02.%E7%BB%84%E4%BB%B6/80.%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E4%B8%8E%20v-once%20%E6%8C%87%E4%BB%A4.html",
      "relativePath": "Vue/02.组件/80.动态组件与 v-once 指令.md",
      "key": "v-54b5a32e",
      "path": "/pages/636ca33122e9a64b/",
      "headers": [
        {
          "level": 2,
          "title": "动态组件",
          "slug": "动态组件"
        },
        {
          "level": 3,
          "title": "动态组件 demo",
          "slug": "动态组件-demo"
        },
        {
          "level": 2,
          "title": "v-once 指令",
          "slug": "v-once-指令"
        },
        {
          "level": 3,
          "title": "通过 v-once 创建低开销的静态组件",
          "slug": "通过-v-once-创建低开销的静态组件"
        }
      ]
    },
    {
      "title": "vue父子组件的生命周期顺序",
      "frontmatter": {
        "title": "vue父子组件的生命周期顺序",
        "date": "2020-02-18T16:39:33.000Z",
        "permalink": "/pages/e6cec47efa42d7f1",
        "categories": [
          "《Vue》笔记",
          "组件"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/02.%E7%BB%84%E4%BB%B6/90.vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%A1%BA%E5%BA%8F.html",
      "relativePath": "Vue/02.组件/90.vue父子组件的生命周期顺序.md",
      "key": "v-3a851006",
      "path": "/pages/e6cec47efa42d7f1/",
      "headers": [
        {
          "level": 3,
          "title": "加载渲染过程",
          "slug": "加载渲染过程"
        },
        {
          "level": 3,
          "title": "子组件更新过程",
          "slug": "子组件更新过程"
        },
        {
          "level": 3,
          "title": "父组件更新过程",
          "slug": "父组件更新过程"
        },
        {
          "level": 3,
          "title": "销毁过程",
          "slug": "销毁过程"
        }
      ]
    },
    {
      "title": "transition过渡&动画",
      "frontmatter": {
        "title": "transition过渡&动画",
        "date": "2020-02-04T13:16:19.000Z",
        "permalink": "/pages/184a96b493a97078",
        "categories": [
          "《Vue》笔记",
          "过渡&动画"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/03.%E8%BF%87%E6%B8%A1&%E5%8A%A8%E7%94%BB/110.transition%E8%BF%87%E6%B8%A1&%E5%8A%A8%E7%94%BB.html",
      "relativePath": "Vue/03.过渡&动画/110.transition过渡&动画.md",
      "key": "v-aecd9a7c",
      "path": "/pages/184a96b493a97078/",
      "headers": [
        {
          "level": 2,
          "title": "使用",
          "slug": "使用"
        },
        {
          "level": 2,
          "title": "过渡的类名",
          "slug": "过渡的类名"
        },
        {
          "level": 2,
          "title": "css过渡 demo",
          "slug": "css过渡-demo"
        },
        {
          "level": 2,
          "title": "css动画 demo",
          "slug": "css动画-demo"
        },
        {
          "level": 3,
          "title": "组件中使用的示例",
          "slug": "组件中使用的示例"
        }
      ],
      "excerpt": "<h1 id=\"transition过渡-动画\"><a class=\"header-anchor\" href=\"#transition过渡-动画\">#</a> transition过渡&amp;动画</h1>\n<p><a href=\"https://cn.vuejs.org/v2/guide/transitions.html\" target=\"_blank\" rel=\"noopener noreferrer\">API<OutboundLink/></a></p>\n<h2 id=\"使用\"><a class=\"header-anchor\" href=\"#使用\">#</a> 使用</h2>\n<p>需要设置动画的元素或组件要在外边包裹一个<code>&lt;transition&gt;</code>标签，设置自定义的<code>name</code>，vue会根据元素的切换（进入/离开）过程添加相应的css类名，你可以<strong>自由地使用css类名来设置css过渡&amp;动画</strong>。</p>\n"
    },
    {
      "title": "使用animate库",
      "frontmatter": {
        "title": "使用animate库",
        "date": "2020-02-17T16:05:52.000Z",
        "permalink": "/pages/3b0a20e70805fcea",
        "categories": [
          "《Vue》笔记",
          "过渡&动画"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/03.%E8%BF%87%E6%B8%A1&%E5%8A%A8%E7%94%BB/112.%E4%BD%BF%E7%94%A8animate%E5%BA%93.html",
      "relativePath": "Vue/03.过渡&动画/112.使用animate库.md",
      "key": "v-01063242",
      "path": "/pages/3b0a20e70805fcea/",
      "headers": [
        {
          "level": 2,
          "title": "自定义过渡类名",
          "slug": "自定义过渡类名"
        },
        {
          "level": 2,
          "title": "使用Animate.css库",
          "slug": "使用animate-css库"
        },
        {
          "level": 2,
          "title": "Demo",
          "slug": "demo"
        }
      ],
      "excerpt": "<h1 id=\"vue中使用animate-css库\"><a class=\"header-anchor\" href=\"#vue中使用animate-css库\">#</a> vue中使用Animate.css库</h1>\n<h2 id=\"自定义过渡类名\"><a class=\"header-anchor\" href=\"#自定义过渡类名\">#</a> 自定义过渡类名</h2>\n<p>我们可以通过以下 attribute 来自定义过渡类名：</p>\n<ul>\n<li><code>enter-class</code></li>\n<li><code>enter-active-class</code></li>\n<li><code>enter-to-class</code> (2.1.8+)</li>\n<li><code>leave-class</code></li>\n<li><code>leave-active-class</code></li>\n<li><code>leave-to-class</code> (2.1.8+)</li>\n</ul>\n"
    },
    {
      "title": "transition-group列表过渡",
      "frontmatter": {
        "title": "transition-group列表过渡",
        "date": "2020-02-04T13:17:42.000Z",
        "permalink": "/pages/0aa92922ace6bb5e",
        "categories": [
          "《Vue》笔记",
          "过渡&动画"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/03.%E8%BF%87%E6%B8%A1&%E5%8A%A8%E7%94%BB/120.transition-group%E5%88%97%E8%A1%A8%E8%BF%87%E6%B8%A1.html",
      "relativePath": "Vue/03.过渡&动画/120.transition-group列表过渡.md",
      "key": "v-e1bdd756",
      "path": "/pages/0aa92922ace6bb5e/",
      "headers": [
        {
          "level": 2,
          "title": "列表的进入/离开过渡",
          "slug": "列表的进入-离开过渡"
        },
        {
          "level": 2,
          "title": "列表的排序过渡",
          "slug": "列表的排序过渡"
        }
      ],
      "excerpt": "<h1 id=\"transition-group列表过渡\"><a class=\"header-anchor\" href=\"#transition-group列表过渡\">#</a> transition-group列表过渡</h1>\n<h2 id=\"列表的进入-离开过渡\"><a class=\"header-anchor\" href=\"#列表的进入-离开过渡\">#</a> 列表的进入/离开过渡</h2>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transition-group</span> <span class=\"token attr-name\">tag</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ul<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!--tag转为ul--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in list<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{item}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!--子元素要有key--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transition-group</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>注意</strong>：列表元素一定要有<code>key</code></p>\n"
    },
    {
      "title": "Mixin混入",
      "frontmatter": {
        "title": "Mixin混入",
        "date": "2020-02-19T15:22:41.000Z",
        "permalink": "/pages/bd36a3c1bc3e0821",
        "categories": [
          "《Vue》笔记",
          "可复用性&组合"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/04.%E5%8F%AF%E5%A4%8D%E7%94%A8%E6%80%A7&%E7%BB%84%E5%90%88/01.Mixin%E6%B7%B7%E5%85%A5.html",
      "relativePath": "Vue/04.可复用性&组合/01.Mixin混入.md",
      "key": "v-d844c4ae",
      "path": "/pages/bd36a3c1bc3e0821/",
      "headers": [
        {
          "level": 2,
          "title": "基础",
          "slug": "基础"
        },
        {
          "level": 2,
          "title": "选项合并",
          "slug": "选项合并"
        },
        {
          "level": 2,
          "title": "某项目中使用的Mixin示例",
          "slug": "某项目中使用的mixin示例"
        }
      ],
      "excerpt": "<h1 id=\"mixin混入\"><a class=\"header-anchor\" href=\"#mixin混入\">#</a> Mixin混入</h1>\n<h2 id=\"基础\"><a class=\"header-anchor\" href=\"#基础\">#</a> 基础</h2>\n<p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>\n"
    },
    {
      "title": "Vue CLi v3 创建项目使用记录",
      "frontmatter": {
        "title": "Vue CLi v3 创建项目使用记录",
        "date": "2020-02-20T17:24:29.000Z",
        "permalink": "/pages/d00311f8174119b2",
        "categories": [
          "《Vue》笔记",
          "工具"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/05.%E5%B7%A5%E5%85%B7/10.Vue%20CLi%20v3%20%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html",
      "relativePath": "Vue/05.工具/10.Vue CLi v3 创建项目使用记录.md",
      "key": "v-f68f5a2c",
      "path": "/pages/d00311f8174119b2/",
      "headers": [
        {
          "level": 2,
          "title": "vue create",
          "slug": "vue-create"
        },
        {
          "level": 2,
          "title": "图形化界面",
          "slug": "图形化界面"
        }
      ]
    },
    {
      "title": "vuex操作相关",
      "frontmatter": {
        "title": "vuex操作相关",
        "date": "2020-02-04T13:15:19.000Z",
        "permalink": "/pages/d9d62d6ab8ff99a6",
        "categories": [
          "《Vue》笔记",
          "规模化"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/06.%E8%A7%84%E6%A8%A1%E5%8C%96/100.vuex%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3.html",
      "relativePath": "Vue/06.规模化/100.vuex操作相关.md",
      "key": "v-83ebe444",
      "path": "/pages/d9d62d6ab8ff99a6/"
    },
    {
      "title": "路由懒加载",
      "frontmatter": {
        "title": "路由懒加载",
        "date": "2020-02-04T13:20:20.000Z",
        "permalink": "/pages/38ecac9a9b92f037",
        "categories": [
          "《Vue》笔记",
          "规模化"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/06.%E8%A7%84%E6%A8%A1%E5%8C%96/140.%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD.html",
      "relativePath": "Vue/06.规模化/140.路由懒加载.md",
      "key": "v-16453474",
      "path": "/pages/38ecac9a9b92f037/"
    },
    {
      "title": "Vuex",
      "frontmatter": {
        "title": "Vuex",
        "date": "2020-08-08T10:38:33.000Z",
        "permalink": "/pages/b30620/",
        "categories": [
          "《Vue》笔记",
          "Vuex"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/Vue/10.Vuex/01.Vuex.html",
      "relativePath": "Vue/10.Vuex/01.Vuex.md",
      "key": "v-15df09d6",
      "path": "/pages/b30620/",
      "headers": [
        {
          "level": 2,
          "title": "Vuex使用过程演示",
          "slug": "vuex使用过程演示"
        },
        {
          "level": 2,
          "title": "核心概念",
          "slug": "核心概念"
        },
        {
          "level": 3,
          "title": "State",
          "slug": "state"
        },
        {
          "level": 3,
          "title": "Getter",
          "slug": "getter"
        },
        {
          "level": 3,
          "title": "Mutation",
          "slug": "mutation"
        },
        {
          "level": 3,
          "title": "Action",
          "slug": "action"
        },
        {
          "level": 2,
          "title": "更多",
          "slug": "更多"
        }
      ]
    },
    {
      "title": "Vue中的防抖函数封装和使用",
      "frontmatter": {
        "title": "Vue中的防抖函数封装和使用",
        "date": "2020-02-04T13:10:19.000Z",
        "permalink": "/pages/fb08e252dfd8fdfd",
        "categories": [
          "《Vue》笔记",
          "其他"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/99.%E5%85%B6%E4%BB%96/80.Vue%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E5%B0%81%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8.html",
      "relativePath": "Vue/99.其他/80.Vue中的防抖函数封装和使用.md",
      "key": "v-3d280fa6",
      "path": "/pages/fb08e252dfd8fdfd/",
      "headers": [
        {
          "level": 3,
          "title": "相关文章",
          "slug": "相关文章"
        }
      ]
    },
    {
      "title": "操作本地缓存",
      "frontmatter": {
        "title": "操作本地缓存",
        "date": "2020-02-04T13:14:19.000Z",
        "permalink": "/pages/30a94dbe96873b33",
        "categories": [
          "《Vue》笔记",
          "其他"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/Vue/99.%E5%85%B6%E4%BB%96/90.%E6%93%8D%E4%BD%9C%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98.html",
      "relativePath": "Vue/99.其他/90.操作本地缓存.md",
      "key": "v-ab5c232e",
      "path": "/pages/30a94dbe96873b33/"
    },
    {
      "title": "ECMAScript 6 简介",
      "frontmatter": {
        "title": "ECMAScript 6 简介",
        "date": "2020-01-12T15:45:35.000Z",
        "permalink": "/pages/f344d070a1031ef7",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/01.ECMAScript%206%20%E7%AE%80%E4%BB%8B.html",
      "relativePath": "前端资料/ES6 教程/01.ECMAScript 6 简介.md",
      "key": "v-5f889cfa",
      "path": "/pages/f344d070a1031ef7/",
      "headers": [
        {
          "level": 2,
          "title": "ECMAScript 和 JavaScript 的关系",
          "slug": "ecmascript-和-javascript-的关系"
        },
        {
          "level": 2,
          "title": "ES6 与 ECMAScript 2015 的关系",
          "slug": "es6-与-ecmascript-2015-的关系"
        },
        {
          "level": 2,
          "title": "语法提案的批准流程",
          "slug": "语法提案的批准流程"
        },
        {
          "level": 2,
          "title": "ECMAScript 的历史",
          "slug": "ecmascript-的历史"
        },
        {
          "level": 2,
          "title": "部署进度",
          "slug": "部署进度"
        },
        {
          "level": 2,
          "title": "Babel 转码器",
          "slug": "babel-转码器"
        },
        {
          "level": 3,
          "title": "配置文件.babelrc",
          "slug": "配置文件-babelrc"
        },
        {
          "level": 3,
          "title": "命令行转码",
          "slug": "命令行转码"
        },
        {
          "level": 3,
          "title": "babel-node",
          "slug": "babel-node"
        },
        {
          "level": 3,
          "title": "@babel/register 模块",
          "slug": "babel-register-模块"
        },
        {
          "level": 3,
          "title": "babel API",
          "slug": "babel-api"
        },
        {
          "level": 3,
          "title": "@babel/polyfill",
          "slug": "babel-polyfill"
        },
        {
          "level": 3,
          "title": "浏览器环境",
          "slug": "浏览器环境"
        },
        {
          "level": 2,
          "title": "Traceur 转码器",
          "slug": "traceur-转码器"
        },
        {
          "level": 3,
          "title": "直接插入网页",
          "slug": "直接插入网页"
        },
        {
          "level": 3,
          "title": "在线转换",
          "slug": "在线转换"
        },
        {
          "level": 3,
          "title": "命令行转换",
          "slug": "命令行转换"
        },
        {
          "level": 3,
          "title": "Node 环境的用法",
          "slug": "node-环境的用法"
        }
      ],
      "excerpt": "<blockquote>\n<p>说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener noreferrer\">http://es6.ruanyifeng.com/<OutboundLink/></a>，教程版权归原作者所有。</p>\n</blockquote>\n<h1 id=\"ecmascript-6-简介\"><a class=\"header-anchor\" href=\"#ecmascript-6-简介\">#</a> ECMAScript 6 简介</h1>\n<p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>\n"
    },
    {
      "title": "let 和 const 命令",
      "frontmatter": {
        "title": "let 和 const 命令",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/c1edd70a6b7c7872",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/02.let%20%E5%92%8C%20const%20%E5%91%BD%E4%BB%A4.html",
      "relativePath": "前端资料/ES6 教程/02.let 和 const 命令.md",
      "key": "v-ba080508",
      "path": "/pages/c1edd70a6b7c7872/",
      "headers": [
        {
          "level": 2,
          "title": "let 命令",
          "slug": "let-命令"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 3,
          "title": "不存在变量提升",
          "slug": "不存在变量提升"
        },
        {
          "level": 3,
          "title": "暂时性死区",
          "slug": "暂时性死区"
        },
        {
          "level": 3,
          "title": "不允许重复声明",
          "slug": "不允许重复声明"
        },
        {
          "level": 2,
          "title": "块级作用域",
          "slug": "块级作用域"
        },
        {
          "level": 3,
          "title": "为什么需要块级作用域？",
          "slug": "为什么需要块级作用域"
        },
        {
          "level": 3,
          "title": "ES6 的块级作用域",
          "slug": "es6-的块级作用域"
        },
        {
          "level": 3,
          "title": "块级作用域与函数声明",
          "slug": "块级作用域与函数声明"
        },
        {
          "level": 2,
          "title": "const 命令",
          "slug": "const-命令"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法-2"
        },
        {
          "level": 3,
          "title": "本质",
          "slug": "本质"
        },
        {
          "level": 3,
          "title": "ES6 声明变量的六种方法",
          "slug": "es6-声明变量的六种方法"
        },
        {
          "level": 2,
          "title": "顶层对象的属性",
          "slug": "顶层对象的属性"
        },
        {
          "level": 2,
          "title": "globalThis 对象",
          "slug": "globalthis-对象"
        }
      ],
      "excerpt": "<h1 id=\"let-和-const-命令\"><a class=\"header-anchor\" href=\"#let-和-const-命令\">#</a> let 和 const 命令</h1>\n<h2 id=\"let-命令\"><a class=\"header-anchor\" href=\"#let-命令\">#</a> let 命令</h2>\n<h3 id=\"基本用法\"><a class=\"header-anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n<p>ES6 新增了<code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，<strong>只在<code>let</code>命令所在的代码块内有效(块级作用域)</strong>。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\na <span class=\"token comment\">// ReferenceError: a is not defined.</span>\nb <span class=\"token comment\">// 1</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "变量的解构赋值",
      "frontmatter": {
        "title": "变量的解构赋值",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/b1ab10a62f7564da",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/03.%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html",
      "relativePath": "前端资料/ES6 教程/03.变量的解构赋值.md",
      "key": "v-248472d4",
      "path": "/pages/b1ab10a62f7564da/",
      "headers": [
        {
          "level": 2,
          "title": "数组的解构赋值",
          "slug": "数组的解构赋值"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 3,
          "title": "默认值",
          "slug": "默认值"
        },
        {
          "level": 2,
          "title": "对象的解构赋值",
          "slug": "对象的解构赋值"
        },
        {
          "level": 3,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "默认值",
          "slug": "默认值-2"
        },
        {
          "level": 3,
          "title": "注意点",
          "slug": "注意点"
        },
        {
          "level": 2,
          "title": "字符串的解构赋值",
          "slug": "字符串的解构赋值"
        },
        {
          "level": 2,
          "title": "数值和布尔值的解构赋值",
          "slug": "数值和布尔值的解构赋值"
        },
        {
          "level": 2,
          "title": "函数参数的解构赋值",
          "slug": "函数参数的解构赋值"
        },
        {
          "level": 2,
          "title": "圆括号问题",
          "slug": "圆括号问题"
        },
        {
          "level": 3,
          "title": "不能使用圆括号的情况",
          "slug": "不能使用圆括号的情况"
        },
        {
          "level": 3,
          "title": "可以使用圆括号的情况",
          "slug": "可以使用圆括号的情况"
        },
        {
          "level": 2,
          "title": "用途",
          "slug": "用途"
        }
      ],
      "excerpt": "<h1 id=\"变量的解构赋值\"><a class=\"header-anchor\" href=\"#变量的解构赋值\">#</a> 变量的解构赋值</h1>\n<h2 id=\"数组的解构赋值\"><a class=\"header-anchor\" href=\"#数组的解构赋值\">#</a> 数组的解构赋值</h2>\n<h3 id=\"基本用法\"><a class=\"header-anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n<p>ES6 允许按照一定模式，<strong>从数组和对象中提取值，对变量进行赋值，这被称为解构</strong>（Destructuring）。</p>\n<p>以前，为变量赋值，只能直接指定值。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "字符串的扩展",
      "frontmatter": {
        "title": "字符串的扩展",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/ca89eca8adeba5f4",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/04.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95.html",
      "relativePath": "前端资料/ES6 教程/04.字符串的扩展.md",
      "key": "v-2338dd6c",
      "path": "/pages/ca89eca8adeba5f4/",
      "headers": [
        {
          "level": 2,
          "title": "字符的 Unicode 表示法",
          "slug": "字符的-unicode-表示法"
        },
        {
          "level": 2,
          "title": "字符串的遍历器接口",
          "slug": "字符串的遍历器接口"
        },
        {
          "level": 2,
          "title": "直接输入 U+2028 和 U+2029",
          "slug": "直接输入-u-2028-和-u-2029"
        },
        {
          "level": 2,
          "title": "JSON.stringify() 的改造",
          "slug": "json-stringify-的改造"
        },
        {
          "level": 2,
          "title": "模板字符串",
          "slug": "模板字符串"
        },
        {
          "level": 2,
          "title": "实例：模板编译",
          "slug": "实例-模板编译"
        },
        {
          "level": 2,
          "title": "标签模板",
          "slug": "标签模板"
        },
        {
          "level": 2,
          "title": "模板字符串的限制",
          "slug": "模板字符串的限制"
        }
      ],
      "excerpt": "<h1 id=\"字符串的扩展\"><a class=\"header-anchor\" href=\"#字符串的扩展\">#</a> 字符串的扩展</h1>\n<p>本章介绍 ES6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。</p>\n<h2 id=\"字符的-unicode-表示法\"><a class=\"header-anchor\" href=\"#字符的-unicode-表示法\">#</a> 字符的 Unicode 表示法</h2>\n<p>ES6 加强了对 Unicode 的支持，允许采用<code>\\uxxxx</code>形式表示一个字符，其中<code>xxxx</code>表示字符的 Unicode 码点。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token string\">\"\\u0061\"</span>\n<span class=\"token comment\">// \"a\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "字符串的新增方法",
      "frontmatter": {
        "title": "字符串的新增方法",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/a650b4a0ebfc9350",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/05.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95.html",
      "relativePath": "前端资料/ES6 教程/05.字符串的新增方法.md",
      "key": "v-69538fc5",
      "path": "/pages/a650b4a0ebfc9350/",
      "headers": [
        {
          "level": 2,
          "title": "String.fromCodePoint()",
          "slug": "string-fromcodepoint"
        },
        {
          "level": 2,
          "title": "String.raw()",
          "slug": "string-raw"
        },
        {
          "level": 2,
          "title": "实例方法：codePointAt()",
          "slug": "实例方法-codepointat"
        },
        {
          "level": 2,
          "title": "实例方法：normalize()",
          "slug": "实例方法-normalize"
        },
        {
          "level": 2,
          "title": "实例方法：includes() 包含, startsWith() 头部包含, endsWith() 末尾包含",
          "slug": "实例方法-includes-包含-startswith-头部包含-endswith-末尾包含"
        },
        {
          "level": 2,
          "title": "实例方法：repeat() 重复",
          "slug": "实例方法-repeat-重复"
        },
        {
          "level": 2,
          "title": "实例方法：padStart() 补全头部，padEnd() 补全末尾",
          "slug": "实例方法-padstart-补全头部-padend-补全末尾"
        },
        {
          "level": 2,
          "title": "实例方法：trimStart() 修剪头部，trimEnd() 修剪末尾",
          "slug": "实例方法-trimstart-修剪头部-trimend-修剪末尾"
        },
        {
          "level": 2,
          "title": "实例方法：matchAll()",
          "slug": "实例方法-matchall"
        }
      ],
      "excerpt": "<h1 id=\"字符串的新增方法\"><a class=\"header-anchor\" href=\"#字符串的新增方法\">#</a> 字符串的新增方法</h1>\n<p>本章介绍字符串对象的新增方法。</p>\n<h2 id=\"string-fromcodepoint\"><a class=\"header-anchor\" href=\"#string-fromcodepoint\">#</a> String.fromCodePoint()</h2>\n<p>ES5 提供<code>String.fromCharCode()</code>方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于<code>0xFFFF</code>的字符。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20BB7</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"ஷ\"</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "正则的扩展",
      "frontmatter": {
        "title": "正则的扩展",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/0473261a6ab0ee8c",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/06.%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95.html",
      "relativePath": "前端资料/ES6 教程/06.正则的扩展.md",
      "key": "v-e884ba66",
      "path": "/pages/0473261a6ab0ee8c/",
      "headers": [
        {
          "level": 2,
          "title": "RegExp 构造函数",
          "slug": "regexp-构造函数"
        },
        {
          "level": 2,
          "title": "字符串的正则方法",
          "slug": "字符串的正则方法"
        },
        {
          "level": 2,
          "title": "u 修饰符",
          "slug": "u-修饰符"
        },
        {
          "level": 2,
          "title": "RegExp.prototype.unicode 属性",
          "slug": "regexp-prototype-unicode-属性"
        },
        {
          "level": 2,
          "title": "y 修饰符",
          "slug": "y-修饰符"
        },
        {
          "level": 2,
          "title": "RegExp.prototype.sticky 属性",
          "slug": "regexp-prototype-sticky-属性"
        },
        {
          "level": 2,
          "title": "RegExp.prototype.flags 属性",
          "slug": "regexp-prototype-flags-属性"
        },
        {
          "level": 2,
          "title": "s 修饰符：dotAll 模式",
          "slug": "s-修饰符-dotall-模式"
        },
        {
          "level": 2,
          "title": "后行断言",
          "slug": "后行断言"
        },
        {
          "level": 2,
          "title": "Unicode 属性类",
          "slug": "unicode-属性类"
        },
        {
          "level": 2,
          "title": "具名组匹配",
          "slug": "具名组匹配"
        },
        {
          "level": 3,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "解构赋值和替换",
          "slug": "解构赋值和替换"
        },
        {
          "level": 3,
          "title": "引用",
          "slug": "引用"
        },
        {
          "level": 2,
          "title": "String.prototype.matchAll()",
          "slug": "string-prototype-matchall"
        }
      ],
      "excerpt": "<h1 id=\"正则的扩展\"><a class=\"header-anchor\" href=\"#正则的扩展\">#</a> 正则的扩展</h1>\n<h2 id=\"regexp-构造函数\"><a class=\"header-anchor\" href=\"#regexp-构造函数\">#</a> RegExp 构造函数</h2>\n<p>在 ES5 中，<code>RegExp</code>构造函数的参数有两种情况。</p>\n<p>第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xyz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等价于</span>\n<span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">xyz</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "数值的扩展",
      "frontmatter": {
        "title": "数值的扩展",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/5dfea9a0f2d1a392",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/07.%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95.html",
      "relativePath": "前端资料/ES6 教程/07.数值的扩展.md",
      "key": "v-4aa59207",
      "path": "/pages/5dfea9a0f2d1a392/",
      "headers": [
        {
          "level": 2,
          "title": "二进制和八进制表示法",
          "slug": "二进制和八进制表示法"
        },
        {
          "level": 2,
          "title": "Number.isFinite() 是否为有限, Number.isNaN() 是否为NaN",
          "slug": "number-isfinite-是否为有限-number-isnan-是否为nan"
        },
        {
          "level": 2,
          "title": "Number.parseInt(), Number.parseFloat()",
          "slug": "number-parseint-number-parsefloat"
        },
        {
          "level": 2,
          "title": "Number.isInteger() 是否为整数",
          "slug": "number-isinteger-是否为整数"
        },
        {
          "level": 2,
          "title": "Number.EPSILON 用于浮点数误差检查",
          "slug": "number-epsilon-用于浮点数误差检查"
        },
        {
          "level": 2,
          "title": "安全整数和 Number.isSafeInteger()",
          "slug": "安全整数和-number-issafeinteger"
        },
        {
          "level": 2,
          "title": "Math 对象的扩展",
          "slug": "math-对象的扩展"
        },
        {
          "level": 3,
          "title": "Math.trunc() 去除一个数的小数部分，返回整数部分",
          "slug": "math-trunc-去除一个数的小数部分-返回整数部分"
        },
        {
          "level": 3,
          "title": "Math.sign() 判断一个数是正数、负数、还是零",
          "slug": "math-sign-判断一个数是正数、负数、还是零"
        },
        {
          "level": 3,
          "title": "Math.cbrt() 计算一个数的立方根",
          "slug": "math-cbrt-计算一个数的立方根"
        },
        {
          "level": 3,
          "title": "Math.clz32()",
          "slug": "math-clz32"
        },
        {
          "level": 3,
          "title": "Math.imul()",
          "slug": "math-imul"
        },
        {
          "level": 3,
          "title": "Math.fround()",
          "slug": "math-fround"
        },
        {
          "level": 3,
          "title": "Math.hypot()",
          "slug": "math-hypot"
        },
        {
          "level": 3,
          "title": "对数方法",
          "slug": "对数方法"
        },
        {
          "level": 3,
          "title": "双曲函数方法",
          "slug": "双曲函数方法"
        },
        {
          "level": 2,
          "title": "指数运算符",
          "slug": "指数运算符"
        },
        {
          "level": 2,
          "title": "BigInt 数据类型",
          "slug": "bigint-数据类型"
        },
        {
          "level": 3,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "BigInt 对象",
          "slug": "bigint-对象"
        },
        {
          "level": 3,
          "title": "转换规则",
          "slug": "转换规则"
        },
        {
          "level": 3,
          "title": "数学运算",
          "slug": "数学运算"
        },
        {
          "level": 3,
          "title": "其他运算",
          "slug": "其他运算"
        }
      ],
      "excerpt": "<h1 id=\"数值的扩展\"><a class=\"header-anchor\" href=\"#数值的扩展\">#</a> 数值的扩展</h1>\n<h2 id=\"二进制和八进制表示法\"><a class=\"header-anchor\" href=\"#二进制和八进制表示法\">#</a> 二进制和八进制表示法</h2>\n<p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀<code>0b</code>（或<code>0B</code>）和<code>0o</code>（或<code>0O</code>）表示。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token number\">0b111110111</span> <span class=\"token operator\">===</span> <span class=\"token number\">503</span> <span class=\"token comment\">// true</span>\n<span class=\"token number\">0o767</span> <span class=\"token operator\">===</span> <span class=\"token number\">503</span> <span class=\"token comment\">// true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "函数的扩展",
      "frontmatter": {
        "title": "函数的扩展",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/8ed309d668b20264",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/08.%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95.html",
      "relativePath": "前端资料/ES6 教程/08.函数的扩展.md",
      "key": "v-947247f4",
      "path": "/pages/8ed309d668b20264/",
      "headers": [
        {
          "level": 2,
          "title": "函数参数的默认值",
          "slug": "函数参数的默认值"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 3,
          "title": "与解构赋值默认值结合使用",
          "slug": "与解构赋值默认值结合使用"
        },
        {
          "level": 3,
          "title": "参数默认值的位置",
          "slug": "参数默认值的位置"
        },
        {
          "level": 3,
          "title": "函数的 length 属性",
          "slug": "函数的-length-属性"
        },
        {
          "level": 3,
          "title": "作用域",
          "slug": "作用域"
        },
        {
          "level": 3,
          "title": "应用",
          "slug": "应用"
        },
        {
          "level": 2,
          "title": "rest 参数",
          "slug": "rest-参数"
        },
        {
          "level": 2,
          "title": "严格模式",
          "slug": "严格模式"
        },
        {
          "level": 2,
          "title": "name 属性",
          "slug": "name-属性"
        },
        {
          "level": 2,
          "title": "箭头函数",
          "slug": "箭头函数"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法-2"
        },
        {
          "level": 3,
          "title": "使用注意点",
          "slug": "使用注意点"
        },
        {
          "level": 3,
          "title": "不适用场合",
          "slug": "不适用场合"
        },
        {
          "level": 3,
          "title": "嵌套的箭头函数",
          "slug": "嵌套的箭头函数"
        },
        {
          "level": 2,
          "title": "尾调用优化",
          "slug": "尾调用优化"
        },
        {
          "level": 3,
          "title": "什么是尾调用？",
          "slug": "什么是尾调用"
        },
        {
          "level": 3,
          "title": "尾调用优化",
          "slug": "尾调用优化-2"
        },
        {
          "level": 3,
          "title": "尾递归",
          "slug": "尾递归"
        },
        {
          "level": 3,
          "title": "递归函数的改写",
          "slug": "递归函数的改写"
        },
        {
          "level": 3,
          "title": "严格模式",
          "slug": "严格模式-2"
        },
        {
          "level": 3,
          "title": "尾递归优化的实现",
          "slug": "尾递归优化的实现"
        },
        {
          "level": 2,
          "title": "函数参数的尾逗号",
          "slug": "函数参数的尾逗号"
        },
        {
          "level": 2,
          "title": "Function.prototype.toString()",
          "slug": "function-prototype-tostring"
        },
        {
          "level": 2,
          "title": "catch 命令的参数省略",
          "slug": "catch-命令的参数省略"
        }
      ],
      "excerpt": "<h1 id=\"函数的扩展\"><a class=\"header-anchor\" href=\"#函数的扩展\">#</a> 函数的扩展</h1>\n<h2 id=\"函数参数的默认值\"><a class=\"header-anchor\" href=\"#函数参数的默认值\">#</a> 函数参数的默认值</h2>\n<h3 id=\"基本用法\"><a class=\"header-anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n<p>ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  y <span class=\"token operator\">=</span> y <span class=\"token operator\">||</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello World</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'China'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello China</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello World</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "数组的扩展",
      "frontmatter": {
        "title": "数组的扩展",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/e34009d60d8bc4b2",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/09.%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95.html",
      "relativePath": "前端资料/ES6 教程/09.数组的扩展.md",
      "key": "v-70526580",
      "path": "/pages/e34009d60d8bc4b2/",
      "headers": [
        {
          "level": 2,
          "title": "扩展运算符",
          "slug": "扩展运算符"
        },
        {
          "level": 3,
          "title": "含义",
          "slug": "含义"
        },
        {
          "level": 3,
          "title": "替代函数的 apply 方法",
          "slug": "替代函数的-apply-方法"
        },
        {
          "level": 3,
          "title": "扩展运算符的应用",
          "slug": "扩展运算符的应用"
        },
        {
          "level": 2,
          "title": "Array.from()",
          "slug": "array-from"
        },
        {
          "level": 2,
          "title": "Array.of() 总是返回参数值组成的数组",
          "slug": "array-of-总是返回参数值组成的数组"
        },
        {
          "level": 2,
          "title": "数组实例的 copyWithin()",
          "slug": "数组实例的-copywithin"
        },
        {
          "level": 2,
          "title": "数组实例的 find() 和 findIndex()",
          "slug": "数组实例的-find-和-findindex"
        },
        {
          "level": 2,
          "title": "数组实例的 fill()",
          "slug": "数组实例的-fill"
        },
        {
          "level": 2,
          "title": "数组实例的 entries()，keys() 和 values()",
          "slug": "数组实例的-entries-keys-和-values"
        },
        {
          "level": 2,
          "title": "数组实例的 includes()",
          "slug": "数组实例的-includes"
        },
        {
          "level": 2,
          "title": "数组实例的 flat()，flatMap()",
          "slug": "数组实例的-flat-flatmap"
        },
        {
          "level": 2,
          "title": "数组的空位",
          "slug": "数组的空位"
        },
        {
          "level": 2,
          "title": "Array.prototype.sort() 的排序稳定性",
          "slug": "array-prototype-sort-的排序稳定性"
        }
      ],
      "excerpt": "<h1 id=\"数组的扩展\"><a class=\"header-anchor\" href=\"#数组的扩展\">#</a> 数组的扩展</h1>\n<h2 id=\"扩展运算符\"><a class=\"header-anchor\" href=\"#扩展运算符\">#</a> 扩展运算符</h2>\n<h3 id=\"含义\"><a class=\"header-anchor\" href=\"#含义\">#</a> 含义</h3>\n<p>扩展运算符（spread）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，<strong>将一个数组转为用逗号分隔的参数序列</strong>。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1 2 3</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1 2 3 4 5</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// [&lt;div>, &lt;div>, &lt;div>]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "对象的扩展",
      "frontmatter": {
        "title": "对象的扩展",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/b5e3e0a0ff6e9c25",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/10.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html",
      "relativePath": "前端资料/ES6 教程/10.对象的扩展.md",
      "key": "v-bb976362",
      "path": "/pages/b5e3e0a0ff6e9c25/",
      "headers": [
        {
          "level": 2,
          "title": "属性的简洁表示法",
          "slug": "属性的简洁表示法"
        },
        {
          "level": 2,
          "title": "属性名表达式",
          "slug": "属性名表达式"
        },
        {
          "level": 2,
          "title": "方法的 name 属性",
          "slug": "方法的-name-属性"
        },
        {
          "level": 2,
          "title": "属性的可枚举性和遍历",
          "slug": "属性的可枚举性和遍历"
        },
        {
          "level": 3,
          "title": "可枚举性",
          "slug": "可枚举性"
        },
        {
          "level": 3,
          "title": "属性的遍历",
          "slug": "属性的遍历"
        },
        {
          "level": 2,
          "title": "super 关键字",
          "slug": "super-关键字"
        },
        {
          "level": 2,
          "title": "对象的扩展运算符",
          "slug": "对象的扩展运算符"
        },
        {
          "level": 3,
          "title": "解构赋值",
          "slug": "解构赋值"
        },
        {
          "level": 3,
          "title": "扩展运算符",
          "slug": "扩展运算符"
        },
        {
          "level": 2,
          "title": "链判断运算符",
          "slug": "链判断运算符"
        },
        {
          "level": 2,
          "title": "Null 判断运算符",
          "slug": "null-判断运算符"
        }
      ],
      "excerpt": "<h1 id=\"对象的扩展\"><a class=\"header-anchor\" href=\"#对象的扩展\">#</a> 对象的扩展</h1>\n<p>对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍<code>Object</code>对象的新增方法。</p>\n"
    },
    {
      "title": "对象的新增方法",
      "frontmatter": {
        "title": "对象的新增方法",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/e85e68947502cf90",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/11.%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95.html",
      "relativePath": "前端资料/ES6 教程/11.对象的新增方法.md",
      "key": "v-ccbdedec",
      "path": "/pages/e85e68947502cf90/",
      "headers": [
        {
          "level": 2,
          "title": "Object.is()",
          "slug": "object-is"
        },
        {
          "level": 2,
          "title": "Object.assign()",
          "slug": "object-assign"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 3,
          "title": "注意点",
          "slug": "注意点"
        },
        {
          "level": 3,
          "title": "常见用途",
          "slug": "常见用途"
        },
        {
          "level": 2,
          "title": "Object.getOwnPropertyDescriptors()",
          "slug": "object-getownpropertydescriptors"
        },
        {
          "level": 2,
          "title": "__proto__属性，Object.setPrototypeOf()，Object.getPrototypeOf()",
          "slug": "proto-属性-object-setprototypeof-object-getprototypeof"
        },
        {
          "level": 3,
          "title": "__proto__属性",
          "slug": "proto-属性"
        },
        {
          "level": 3,
          "title": "Object.setPrototypeOf()",
          "slug": "object-setprototypeof"
        },
        {
          "level": 3,
          "title": "Object.getPrototypeOf()",
          "slug": "object-getprototypeof"
        },
        {
          "level": 2,
          "title": "Object.keys()，Object.values()，Object.entries()",
          "slug": "object-keys-object-values-object-entries"
        },
        {
          "level": 3,
          "title": "Object.keys()",
          "slug": "object-keys"
        },
        {
          "level": 3,
          "title": "Object.values()",
          "slug": "object-values"
        },
        {
          "level": 3,
          "title": "Object.entries()",
          "slug": "object-entries"
        },
        {
          "level": 2,
          "title": "Object.fromEntries()",
          "slug": "object-fromentries"
        }
      ],
      "excerpt": "<h1 id=\"对象的新增方法\"><a class=\"header-anchor\" href=\"#对象的新增方法\">#</a> 对象的新增方法</h1>\n<p>本章介绍 Object 对象的新增方法。</p>\n<h2 id=\"object-is\"><a class=\"header-anchor\" href=\"#object-is\">#</a> Object.is()</h2>\n<p>ES5 比较两个值是否相等，只有两个运算符：相等运算符（<code>==</code>）和严格相等运算符（<code>===</code>）。它们都有缺点，前者会自动转换数据类型，后者的<code>NaN</code>不等于自身，以及<code>+0</code>等于<code>-0</code>。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。</p>\n<p>ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。<code>Object.is</code>就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p>\n"
    },
    {
      "title": "Symbol",
      "frontmatter": {
        "title": "Symbol",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/02c86eb2792f3262",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/12.Symbol.html",
      "relativePath": "前端资料/ES6 教程/12.Symbol.md",
      "key": "v-3fef55eb",
      "path": "/pages/02c86eb2792f3262/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "Symbol.prototype.description",
          "slug": "symbol-prototype-description"
        },
        {
          "level": 2,
          "title": "作为属性名的 Symbol",
          "slug": "作为属性名的-symbol"
        },
        {
          "level": 2,
          "title": "实例：消除魔术字符串",
          "slug": "实例-消除魔术字符串"
        },
        {
          "level": 2,
          "title": "属性名的遍历",
          "slug": "属性名的遍历"
        },
        {
          "level": 2,
          "title": "Symbol.for()，Symbol.keyFor()",
          "slug": "symbol-for-symbol-keyfor"
        },
        {
          "level": 2,
          "title": "实例：模块的 Singleton 模式",
          "slug": "实例-模块的-singleton-模式"
        },
        {
          "level": 2,
          "title": "内置的 Symbol 值",
          "slug": "内置的-symbol-值"
        },
        {
          "level": 3,
          "title": "Symbol.hasInstance",
          "slug": "symbol-hasinstance"
        },
        {
          "level": 3,
          "title": "Symbol.isConcatSpreadable",
          "slug": "symbol-isconcatspreadable"
        },
        {
          "level": 3,
          "title": "Symbol.species",
          "slug": "symbol-species"
        },
        {
          "level": 3,
          "title": "Symbol.match",
          "slug": "symbol-match"
        },
        {
          "level": 3,
          "title": "Symbol.replace",
          "slug": "symbol-replace"
        },
        {
          "level": 3,
          "title": "Symbol.search",
          "slug": "symbol-search"
        },
        {
          "level": 3,
          "title": "Symbol.split",
          "slug": "symbol-split"
        },
        {
          "level": 3,
          "title": "Symbol.iterator",
          "slug": "symbol-iterator"
        },
        {
          "level": 3,
          "title": "Symbol.toPrimitive",
          "slug": "symbol-toprimitive"
        },
        {
          "level": 3,
          "title": "Symbol.toStringTag",
          "slug": "symbol-tostringtag"
        },
        {
          "level": 3,
          "title": "Symbol.unscopables",
          "slug": "symbol-unscopables"
        }
      ],
      "excerpt": "<h1 id=\"symbol\"><a class=\"header-anchor\" href=\"#symbol\">#</a> Symbol</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，<strong>保证每个属性的名字都是独一无二</strong>的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入<code>Symbol</code>的原因。</p>\n"
    },
    {
      "title": "Set 和 Map 数据结构",
      "frontmatter": {
        "title": "Set 和 Map 数据结构",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/0c21dae358fca16b",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/13.Set%20%E5%92%8C%20Map%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",
      "relativePath": "前端资料/ES6 教程/13.Set 和 Map 数据结构.md",
      "key": "v-017428de",
      "path": "/pages/0c21dae358fca16b/",
      "headers": [
        {
          "level": 2,
          "title": "Set",
          "slug": "set"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 3,
          "title": "Set 实例的属性和方法",
          "slug": "set-实例的属性和方法"
        },
        {
          "level": 3,
          "title": "遍历操作",
          "slug": "遍历操作"
        },
        {
          "level": 2,
          "title": "WeakSet",
          "slug": "weakset"
        },
        {
          "level": 3,
          "title": "含义",
          "slug": "含义"
        },
        {
          "level": 3,
          "title": "语法",
          "slug": "语法"
        },
        {
          "level": 2,
          "title": "Map",
          "slug": "map"
        },
        {
          "level": 3,
          "title": "含义和基本用法",
          "slug": "含义和基本用法"
        },
        {
          "level": 3,
          "title": "实例的属性和操作方法",
          "slug": "实例的属性和操作方法"
        },
        {
          "level": 3,
          "title": "遍历方法",
          "slug": "遍历方法"
        },
        {
          "level": 3,
          "title": "与其他数据结构的互相转换",
          "slug": "与其他数据结构的互相转换"
        },
        {
          "level": 2,
          "title": "WeakMap",
          "slug": "weakmap"
        },
        {
          "level": 3,
          "title": "含义",
          "slug": "含义-2"
        },
        {
          "level": 3,
          "title": "WeakMap 的语法",
          "slug": "weakmap-的语法"
        },
        {
          "level": 3,
          "title": "WeakMap 的示例",
          "slug": "weakmap-的示例"
        },
        {
          "level": 3,
          "title": "WeakMap 的用途",
          "slug": "weakmap-的用途"
        }
      ],
      "excerpt": "<h1 id=\"set-和-map-数据结构\"><a class=\"header-anchor\" href=\"#set-和-map-数据结构\">#</a> Set 和 Map 数据结构</h1>\n<h2 id=\"set\"><a class=\"header-anchor\" href=\"#set\">#</a> Set</h2>\n<h3 id=\"基本用法\"><a class=\"header-anchor\" href=\"#基本用法\">#</a> 基本用法</h3>\n<p>ES6 提供了新的数据结构 Set。它<strong>类似于数组，但是成员的值都是唯一的，没有重复的值</strong>。</p>\n<p><strong><code>Set</code>本身是一个构造函数，用来生成 Set 数据结构</strong>。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 2 3 5 4</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "Proxy",
      "frontmatter": {
        "title": "Proxy",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/f56ec2ab97d60483",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/14.Proxy.html",
      "relativePath": "前端资料/ES6 教程/14.Proxy.md",
      "key": "v-05d2ed21",
      "path": "/pages/f56ec2ab97d60483/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "Proxy 实例的方法",
          "slug": "proxy-实例的方法"
        },
        {
          "level": 3,
          "title": "get()",
          "slug": "get"
        },
        {
          "level": 3,
          "title": "set()",
          "slug": "set"
        },
        {
          "level": 3,
          "title": "apply()",
          "slug": "apply"
        },
        {
          "level": 3,
          "title": "has()",
          "slug": "has"
        },
        {
          "level": 3,
          "title": "construct()",
          "slug": "construct"
        },
        {
          "level": 3,
          "title": "deleteProperty()",
          "slug": "deleteproperty"
        },
        {
          "level": 3,
          "title": "defineProperty()",
          "slug": "defineproperty"
        },
        {
          "level": 3,
          "title": "getOwnPropertyDescriptor()",
          "slug": "getownpropertydescriptor"
        },
        {
          "level": 3,
          "title": "getPrototypeOf()",
          "slug": "getprototypeof"
        },
        {
          "level": 3,
          "title": "isExtensible()",
          "slug": "isextensible"
        },
        {
          "level": 3,
          "title": "ownKeys()",
          "slug": "ownkeys"
        },
        {
          "level": 3,
          "title": "preventExtensions()",
          "slug": "preventextensions"
        },
        {
          "level": 3,
          "title": "setPrototypeOf()",
          "slug": "setprototypeof"
        },
        {
          "level": 2,
          "title": "Proxy.revocable()",
          "slug": "proxy-revocable"
        },
        {
          "level": 2,
          "title": "this 问题",
          "slug": "this-问题"
        },
        {
          "level": 2,
          "title": "实例：Web 服务的客户端",
          "slug": "实例-web-服务的客户端"
        }
      ],
      "excerpt": "<h1 id=\"proxy\"><a class=\"header-anchor\" href=\"#proxy\">#</a> Proxy</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“<strong>元编程</strong>”（meta programming），即<strong>对编程语言进行编程</strong>。</p>\n<p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，<strong>外界对该对象的访问，都必须先通过这层拦截</strong>，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p>\n"
    },
    {
      "title": "Reflect",
      "frontmatter": {
        "title": "Reflect",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/74de3e45e4491e95",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/15.Reflect.html",
      "relativePath": "前端资料/ES6 教程/15.Reflect.md",
      "key": "v-af94137e",
      "path": "/pages/74de3e45e4491e95/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "静态方法",
          "slug": "静态方法"
        },
        {
          "level": 3,
          "title": "Reflect.get(target, name, receiver)",
          "slug": "reflect-get-target-name-receiver"
        },
        {
          "level": 3,
          "title": "Reflect.set(target, name, value, receiver)",
          "slug": "reflect-set-target-name-value-receiver"
        },
        {
          "level": 3,
          "title": "Reflect.has(obj, name)",
          "slug": "reflect-has-obj-name"
        },
        {
          "level": 3,
          "title": "Reflect.deleteProperty(obj, name)",
          "slug": "reflect-deleteproperty-obj-name"
        },
        {
          "level": 3,
          "title": "Reflect.construct(target, args)",
          "slug": "reflect-construct-target-args"
        },
        {
          "level": 3,
          "title": "Reflect.getPrototypeOf(obj)",
          "slug": "reflect-getprototypeof-obj"
        },
        {
          "level": 3,
          "title": "Reflect.setPrototypeOf(obj, newProto)",
          "slug": "reflect-setprototypeof-obj-newproto"
        },
        {
          "level": 3,
          "title": "Reflect.apply(func, thisArg, args)",
          "slug": "reflect-apply-func-thisarg-args"
        },
        {
          "level": 3,
          "title": "Reflect.defineProperty(target, propertyKey, attributes)",
          "slug": "reflect-defineproperty-target-propertykey-attributes"
        },
        {
          "level": 3,
          "title": "Reflect.getOwnPropertyDescriptor(target, propertyKey)",
          "slug": "reflect-getownpropertydescriptor-target-propertykey"
        },
        {
          "level": 3,
          "title": "Reflect.isExtensible (target)",
          "slug": "reflect-isextensible-target"
        },
        {
          "level": 3,
          "title": "Reflect.preventExtensions(target)",
          "slug": "reflect-preventextensions-target"
        },
        {
          "level": 3,
          "title": "Reflect.ownKeys (target)",
          "slug": "reflect-ownkeys-target"
        },
        {
          "level": 2,
          "title": "实例：使用 Proxy 实现观察者模式",
          "slug": "实例-使用-proxy-实现观察者模式"
        }
      ],
      "excerpt": "<h1 id=\"reflect\"><a class=\"header-anchor\" href=\"#reflect\">#</a> Reflect</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p><code>Reflect</code>对象与<code>Proxy</code>对象一样，也是 ES6 为了操作对象而提供的新 API。<code>Reflect</code>对象的设计目的有这样几个。</p>\n<p>（1） **将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到<code>Reflect</code>对象上。**现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在<code>Reflect</code>对象上。也就是说，从<code>Reflect</code>对象上可以拿到语言内部的方法。</p>\n"
    },
    {
      "title": "Promise 对象",
      "frontmatter": {
        "title": "Promise 对象",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/2810ae8985e9bd52",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/16.Promise%20%E5%AF%B9%E8%B1%A1.html",
      "relativePath": "前端资料/ES6 教程/16.Promise 对象.md",
      "key": "v-51c5b83e",
      "path": "/pages/2810ae8985e9bd52/",
      "headers": [
        {
          "level": 2,
          "title": "Promise 的含义",
          "slug": "promise-的含义"
        },
        {
          "level": 2,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 2,
          "title": "Promise.prototype.then()",
          "slug": "promise-prototype-then"
        },
        {
          "level": 2,
          "title": "Promise.prototype.catch()",
          "slug": "promise-prototype-catch"
        },
        {
          "level": 2,
          "title": "Promise.prototype.finally()",
          "slug": "promise-prototype-finally"
        },
        {
          "level": 2,
          "title": "Promise.all()",
          "slug": "promise-all"
        },
        {
          "level": 2,
          "title": "Promise.race()",
          "slug": "promise-race"
        },
        {
          "level": 2,
          "title": "Promise.allSettled()",
          "slug": "promise-allsettled"
        },
        {
          "level": 2,
          "title": "Promise.any()",
          "slug": "promise-any"
        },
        {
          "level": 2,
          "title": "Promise.resolve()",
          "slug": "promise-resolve"
        },
        {
          "level": 2,
          "title": "Promise.reject()",
          "slug": "promise-reject"
        },
        {
          "level": 2,
          "title": "应用",
          "slug": "应用"
        },
        {
          "level": 3,
          "title": "加载图片",
          "slug": "加载图片"
        },
        {
          "level": 3,
          "title": "Generator 函数与 Promise 的结合",
          "slug": "generator-函数与-promise-的结合"
        },
        {
          "level": 2,
          "title": "Promise.try()",
          "slug": "promise-try"
        }
      ],
      "excerpt": "<h1 id=\"promise-对象\"><a class=\"header-anchor\" href=\"#promise-对象\">#</a> Promise 对象</h1>\n<h2 id=\"promise-的含义\"><a class=\"header-anchor\" href=\"#promise-的含义\">#</a> Promise 的含义</h2>\n<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象。</p>\n"
    },
    {
      "title": "Iterator 和 for-of 循环",
      "frontmatter": {
        "title": "Iterator 和 for-of 循环",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/48df907ad3570f3d",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/17.Iterator%20%E5%92%8C%20for-of%20%E5%BE%AA%E7%8E%AF.html",
      "relativePath": "前端资料/ES6 教程/17.Iterator 和 for-of 循环.md",
      "key": "v-a1a10f0a",
      "path": "/pages/48df907ad3570f3d/",
      "headers": [
        {
          "level": 2,
          "title": "Iterator（遍历器）的概念",
          "slug": "iterator-遍历器-的概念"
        },
        {
          "level": 2,
          "title": "默认 Iterator 接口",
          "slug": "默认-iterator-接口"
        },
        {
          "level": 2,
          "title": "调用 Iterator 接口的场合",
          "slug": "调用-iterator-接口的场合"
        },
        {
          "level": 2,
          "title": "字符串的 Iterator 接口",
          "slug": "字符串的-iterator-接口"
        },
        {
          "level": 2,
          "title": "Iterator 接口与 Generator 函数",
          "slug": "iterator-接口与-generator-函数"
        },
        {
          "level": 2,
          "title": "遍历器对象的 return()，throw()",
          "slug": "遍历器对象的-return-throw"
        },
        {
          "level": 2,
          "title": "for...of 循环",
          "slug": "for-of-循环"
        },
        {
          "level": 3,
          "title": "数组",
          "slug": "数组"
        },
        {
          "level": 3,
          "title": "Set 和 Map 结构",
          "slug": "set-和-map-结构"
        },
        {
          "level": 3,
          "title": "计算生成的数据结构",
          "slug": "计算生成的数据结构"
        },
        {
          "level": 3,
          "title": "类似数组的对象",
          "slug": "类似数组的对象"
        },
        {
          "level": 3,
          "title": "对象",
          "slug": "对象"
        },
        {
          "level": 3,
          "title": "与其他遍历语法的比较",
          "slug": "与其他遍历语法的比较"
        }
      ],
      "excerpt": "<h1 id=\"iterator-和-for-of-循环\"><a class=\"header-anchor\" href=\"#iterator-和-for-of-循环\">#</a> Iterator 和 for...of 循环</h1>\n<h2 id=\"iterator-遍历器-的概念\"><a class=\"header-anchor\" href=\"#iterator-遍历器-的概念\">#</a> Iterator（遍历器）的概念</h2>\n<p>JavaScript 原有的表示“集合”的数据结构，主要是数组（<code>Array</code>）和对象（<code>Object</code>），ES6 又添加了<code>Map</code>和<code>Set</code>。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是<code>Map</code>，<code>Map</code>的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。</p>\n"
    },
    {
      "title": "Generator 函数的语法",
      "frontmatter": {
        "title": "Generator 函数的语法",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/718b48ed9ce0adce",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/18.Generator%20%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95.html",
      "relativePath": "前端资料/ES6 教程/18.Generator 函数的语法.md",
      "key": "v-15850073",
      "path": "/pages/718b48ed9ce0adce/",
      "headers": [
        {
          "level": 2,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "基本概念",
          "slug": "基本概念"
        },
        {
          "level": 3,
          "title": "yield 表达式",
          "slug": "yield-表达式"
        },
        {
          "level": 3,
          "title": "与 Iterator 接口的关系",
          "slug": "与-iterator-接口的关系"
        },
        {
          "level": 2,
          "title": "next 方法的参数",
          "slug": "next-方法的参数"
        },
        {
          "level": 2,
          "title": "for...of 循环",
          "slug": "for-of-循环"
        },
        {
          "level": 2,
          "title": "Generator.prototype.throw()",
          "slug": "generator-prototype-throw"
        },
        {
          "level": 2,
          "title": "Generator.prototype.return()",
          "slug": "generator-prototype-return"
        },
        {
          "level": 2,
          "title": "next()、throw()、return() 的共同点",
          "slug": "next-、throw-、return-的共同点"
        },
        {
          "level": 2,
          "title": "yield* 表达式",
          "slug": "yield-表达式-2"
        },
        {
          "level": 2,
          "title": "作为对象属性的 Generator 函数",
          "slug": "作为对象属性的-generator-函数"
        },
        {
          "level": 2,
          "title": "Generator 函数的this",
          "slug": "generator-函数的this"
        },
        {
          "level": 2,
          "title": "含义",
          "slug": "含义"
        },
        {
          "level": 3,
          "title": "Generator 与状态机",
          "slug": "generator-与状态机"
        },
        {
          "level": 3,
          "title": "Generator 与协程",
          "slug": "generator-与协程"
        },
        {
          "level": 3,
          "title": "Generator 与上下文",
          "slug": "generator-与上下文"
        },
        {
          "level": 2,
          "title": "应用",
          "slug": "应用"
        },
        {
          "level": 3,
          "title": "（1）异步操作的同步化表达",
          "slug": "_1-异步操作的同步化表达"
        },
        {
          "level": 3,
          "title": "（2）控制流管理",
          "slug": "_2-控制流管理"
        },
        {
          "level": 3,
          "title": "（3）部署 Iterator 接口",
          "slug": "_3-部署-iterator-接口"
        },
        {
          "level": 3,
          "title": "（4）作为数据结构",
          "slug": "_4-作为数据结构"
        }
      ],
      "excerpt": "<h1 id=\"generator-函数的语法\"><a class=\"header-anchor\" href=\"#generator-函数的语法\">#</a> Generator 函数的语法</h1>\n<h2 id=\"简介\"><a class=\"header-anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"基本概念\"><a class=\"header-anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<p>Generator 函数是 ES6 提供的一种<strong>异步编程解决方案</strong>，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。</p>\n"
    },
    {
      "title": "Generator 函数的异步应用",
      "frontmatter": {
        "title": "Generator 函数的异步应用",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/75af7031eb66847b",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/19.Generator%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8.html",
      "relativePath": "前端资料/ES6 教程/19.Generator 函数的异步应用.md",
      "key": "v-6dbbb512",
      "path": "/pages/75af7031eb66847b/",
      "headers": [
        {
          "level": 2,
          "title": "传统方法",
          "slug": "传统方法"
        },
        {
          "level": 2,
          "title": "基本概念",
          "slug": "基本概念"
        },
        {
          "level": 3,
          "title": "异步",
          "slug": "异步"
        },
        {
          "level": 3,
          "title": "回调函数",
          "slug": "回调函数"
        },
        {
          "level": 3,
          "title": "Promise",
          "slug": "promise"
        },
        {
          "level": 2,
          "title": "Generator 函数",
          "slug": "generator-函数"
        },
        {
          "level": 3,
          "title": "协程",
          "slug": "协程"
        },
        {
          "level": 3,
          "title": "协程的 Generator 函数实现",
          "slug": "协程的-generator-函数实现"
        },
        {
          "level": 3,
          "title": "Generator 函数的数据交换和错误处理",
          "slug": "generator-函数的数据交换和错误处理"
        },
        {
          "level": 3,
          "title": "异步任务的封装",
          "slug": "异步任务的封装"
        },
        {
          "level": 2,
          "title": "Thunk 函数",
          "slug": "thunk-函数"
        },
        {
          "level": 3,
          "title": "参数的求值策略",
          "slug": "参数的求值策略"
        },
        {
          "level": 3,
          "title": "Thunk 函数的含义",
          "slug": "thunk-函数的含义"
        },
        {
          "level": 3,
          "title": "JavaScript 语言的 Thunk 函数",
          "slug": "javascript-语言的-thunk-函数"
        },
        {
          "level": 3,
          "title": "Thunkify 模块",
          "slug": "thunkify-模块"
        },
        {
          "level": 3,
          "title": "Generator 函数的流程管理",
          "slug": "generator-函数的流程管理"
        },
        {
          "level": 3,
          "title": "Thunk 函数的自动流程管理",
          "slug": "thunk-函数的自动流程管理"
        },
        {
          "level": 2,
          "title": "co 模块",
          "slug": "co-模块"
        },
        {
          "level": 3,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 3,
          "title": "co 模块的原理",
          "slug": "co-模块的原理"
        },
        {
          "level": 3,
          "title": "基于 Promise 对象的自动执行",
          "slug": "基于-promise-对象的自动执行"
        },
        {
          "level": 3,
          "title": "co 模块的源码",
          "slug": "co-模块的源码"
        },
        {
          "level": 3,
          "title": "处理并发的异步操作",
          "slug": "处理并发的异步操作"
        },
        {
          "level": 3,
          "title": "实例：处理 Stream",
          "slug": "实例-处理-stream"
        }
      ],
      "excerpt": "<h1 id=\"generator-函数的异步应用\"><a class=\"header-anchor\" href=\"#generator-函数的异步应用\">#</a> Generator 函数的异步应用</h1>\n<p>异步编程对 JavaScript 语言太重要。JavaScript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要介绍 Generator 函数如何完成异步操作。</p>\n"
    },
    {
      "title": "async 函数",
      "frontmatter": {
        "title": "async 函数",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/3777253e65bac487",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/20.async%20%E5%87%BD%E6%95%B0.html",
      "relativePath": "前端资料/ES6 教程/20.async 函数.md",
      "key": "v-4030d98b",
      "path": "/pages/3777253e65bac487/",
      "headers": [
        {
          "level": 2,
          "title": "含义",
          "slug": "含义"
        },
        {
          "level": 2,
          "title": "基本用法",
          "slug": "基本用法"
        },
        {
          "level": 2,
          "title": "语法",
          "slug": "语法"
        },
        {
          "level": 3,
          "title": "返回 Promise 对象",
          "slug": "返回-promise-对象"
        },
        {
          "level": 3,
          "title": "Promise 对象的状态变化",
          "slug": "promise-对象的状态变化"
        },
        {
          "level": 3,
          "title": "await 命令",
          "slug": "await-命令"
        },
        {
          "level": 3,
          "title": "错误处理",
          "slug": "错误处理"
        },
        {
          "level": 3,
          "title": "使用注意点",
          "slug": "使用注意点"
        },
        {
          "level": 2,
          "title": "async 函数的实现原理",
          "slug": "async-函数的实现原理"
        },
        {
          "level": 2,
          "title": "与其他异步处理方法的比较",
          "slug": "与其他异步处理方法的比较"
        },
        {
          "level": 2,
          "title": "实例：按顺序完成异步操作",
          "slug": "实例-按顺序完成异步操作"
        },
        {
          "level": 2,
          "title": "顶层 await",
          "slug": "顶层-await"
        }
      ],
      "excerpt": "<h1 id=\"async-函数\"><a class=\"header-anchor\" href=\"#async-函数\">#</a> async 函数</h1>\n<h2 id=\"含义\"><a class=\"header-anchor\" href=\"#含义\">#</a> 含义</h2>\n<p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。</p>\n<p>async 函数是什么？一句话，它就<strong>是 Generator 函数的语法糖</strong>。</p>\n<p>前文有一个 Generator 函数，依次读取两个文件。</p>\n"
    },
    {
      "title": "Class 的基本语法",
      "frontmatter": {
        "title": "Class 的基本语法",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/e831e1593c82bbe0",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/21.Class%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html",
      "relativePath": "前端资料/ES6 教程/21.Class 的基本语法.md",
      "key": "v-6292fd3d",
      "path": "/pages/e831e1593c82bbe0/",
      "headers": [
        {
          "level": 2,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "类的由来",
          "slug": "类的由来"
        },
        {
          "level": 3,
          "title": "constructor 方法",
          "slug": "constructor-方法"
        },
        {
          "level": 3,
          "title": "类的实例",
          "slug": "类的实例"
        },
        {
          "level": 3,
          "title": "取值函数（getter）和存值函数（setter）",
          "slug": "取值函数-getter-和存值函数-setter"
        },
        {
          "level": 3,
          "title": "属性表达式",
          "slug": "属性表达式"
        },
        {
          "level": 3,
          "title": "Class 表达式",
          "slug": "class-表达式"
        },
        {
          "level": 3,
          "title": "注意点",
          "slug": "注意点"
        },
        {
          "level": 2,
          "title": "静态方法",
          "slug": "静态方法"
        },
        {
          "level": 2,
          "title": "实例属性的新写法",
          "slug": "实例属性的新写法"
        },
        {
          "level": 2,
          "title": "静态属性",
          "slug": "静态属性"
        },
        {
          "level": 2,
          "title": "私有方法和私有属性",
          "slug": "私有方法和私有属性"
        },
        {
          "level": 3,
          "title": "现有的解决方案",
          "slug": "现有的解决方案"
        },
        {
          "level": 3,
          "title": "私有属性的提案",
          "slug": "私有属性的提案"
        },
        {
          "level": 2,
          "title": "new.target 属性",
          "slug": "new-target-属性"
        }
      ],
      "excerpt": "<h1 id=\"class-的基本语法\"><a class=\"header-anchor\" href=\"#class-的基本语法\">#</a> Class 的基本语法</h1>\n<h2 id=\"简介\"><a class=\"header-anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"类的由来\"><a class=\"header-anchor\" href=\"#类的由来\">#</a> 类的由来</h3>\n<p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Point</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'('</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "Class 的继承",
      "frontmatter": {
        "title": "Class 的继承",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/83f8c3a0cd87dd83",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/22.Class%20%E7%9A%84%E7%BB%A7%E6%89%BF.html",
      "relativePath": "前端资料/ES6 教程/22.Class 的继承.md",
      "key": "v-09908323",
      "path": "/pages/83f8c3a0cd87dd83/",
      "headers": [
        {
          "level": 2,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 2,
          "title": "Object.getPrototypeOf()",
          "slug": "object-getprototypeof"
        },
        {
          "level": 2,
          "title": "super 关键字",
          "slug": "super-关键字"
        },
        {
          "level": 2,
          "title": "类的 prototype 属性和__proto__属性",
          "slug": "类的-prototype-属性和-proto-属性"
        },
        {
          "level": 3,
          "title": "实例的 __proto__ 属性",
          "slug": "实例的-proto-属性"
        },
        {
          "level": 2,
          "title": "原生构造函数的继承",
          "slug": "原生构造函数的继承"
        },
        {
          "level": 2,
          "title": "Mixin 模式的实现",
          "slug": "mixin-模式的实现"
        }
      ],
      "excerpt": "<h1 id=\"class-的继承\"><a class=\"header-anchor\" href=\"#class-的继承\">#</a> Class 的继承</h1>\n<h2 id=\"简介\"><a class=\"header-anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>Class 可以通过<code>extends</code>关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ColorPoint</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "Module 的语法",
      "frontmatter": {
        "title": "Module 的语法",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/efe2fb04eb8ac5fb",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/23.Module%20%E7%9A%84%E8%AF%AD%E6%B3%95.html",
      "relativePath": "前端资料/ES6 教程/23.Module 的语法.md",
      "key": "v-76119f38",
      "path": "/pages/efe2fb04eb8ac5fb/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "严格模式",
          "slug": "严格模式"
        },
        {
          "level": 2,
          "title": "export 命令",
          "slug": "export-命令"
        },
        {
          "level": 2,
          "title": "import 命令",
          "slug": "import-命令"
        },
        {
          "level": 2,
          "title": "模块的整体加载-(星号*)",
          "slug": "模块的整体加载-星号"
        },
        {
          "level": 2,
          "title": "export default 命令",
          "slug": "export-default-命令"
        },
        {
          "level": 2,
          "title": "export 与 import 的复合写法",
          "slug": "export-与-import-的复合写法"
        },
        {
          "level": 2,
          "title": "模块的继承",
          "slug": "模块的继承"
        },
        {
          "level": 2,
          "title": "跨模块常量",
          "slug": "跨模块常量"
        },
        {
          "level": 2,
          "title": "import()",
          "slug": "import"
        },
        {
          "level": 3,
          "title": "简介",
          "slug": "简介"
        },
        {
          "level": 3,
          "title": "适用场合",
          "slug": "适用场合"
        },
        {
          "level": 3,
          "title": "注意点",
          "slug": "注意点"
        }
      ],
      "excerpt": "<h1 id=\"module-的语法\"><a class=\"header-anchor\" href=\"#module-的语法\">#</a> Module 的语法</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的<code>require</code>、Python 的<code>import</code>，甚至就连 CSS 都有<code>@import</code>，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p>\n"
    },
    {
      "title": "Module 的加载实现",
      "frontmatter": {
        "title": "Module 的加载实现",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/a79ca2e64ceae213",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/24.Module%20%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0.html",
      "relativePath": "前端资料/ES6 教程/24.Module 的加载实现.md",
      "key": "v-6e784ac4",
      "path": "/pages/a79ca2e64ceae213/",
      "headers": [
        {
          "level": 2,
          "title": "浏览器加载",
          "slug": "浏览器加载"
        },
        {
          "level": 3,
          "title": "传统方法",
          "slug": "传统方法"
        },
        {
          "level": 3,
          "title": "加载规则",
          "slug": "加载规则"
        },
        {
          "level": 2,
          "title": "ES6 模块与 CommonJS 模块的差异",
          "slug": "es6-模块与-commonjs-模块的差异"
        },
        {
          "level": 2,
          "title": "Node.js 加载",
          "slug": "node-js-加载"
        },
        {
          "level": 3,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 3,
          "title": "main 字段",
          "slug": "main-字段"
        },
        {
          "level": 3,
          "title": "exports 字段",
          "slug": "exports-字段"
        },
        {
          "level": 3,
          "title": "ES6 模块加载 CommonJS 模块",
          "slug": "es6-模块加载-commonjs-模块"
        },
        {
          "level": 3,
          "title": "CommonJS 模块加载 ES6 模块",
          "slug": "commonjs-模块加载-es6-模块"
        },
        {
          "level": 3,
          "title": "Node.js 的内置模块",
          "slug": "node-js-的内置模块"
        },
        {
          "level": 3,
          "title": "加载路径",
          "slug": "加载路径"
        },
        {
          "level": 3,
          "title": "内部变量",
          "slug": "内部变量"
        },
        {
          "level": 2,
          "title": "循环加载",
          "slug": "循环加载"
        },
        {
          "level": 3,
          "title": "CommonJS 模块的加载原理",
          "slug": "commonjs-模块的加载原理"
        },
        {
          "level": 3,
          "title": "CommonJS 模块的循环加载",
          "slug": "commonjs-模块的循环加载"
        },
        {
          "level": 3,
          "title": "ES6 模块的循环加载",
          "slug": "es6-模块的循环加载"
        }
      ],
      "excerpt": "<h1 id=\"module-的加载实现\"><a class=\"header-anchor\" href=\"#module-的加载实现\">#</a> Module 的加载实现</h1>\n<p>上一章介绍了模块的语法，本章介绍如何在浏览器和 Node.js 之中加载 ES6 模块，以及实际开发中经常遇到的一些问题（比如循环加载）。</p>\n"
    },
    {
      "title": "编程风格",
      "frontmatter": {
        "title": "编程风格",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/984bf549204bb266",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/25.%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC.html",
      "relativePath": "前端资料/ES6 教程/25.编程风格.md",
      "key": "v-898a953a",
      "path": "/pages/984bf549204bb266/",
      "headers": [
        {
          "level": 2,
          "title": "块级作用域",
          "slug": "块级作用域"
        },
        {
          "level": 2,
          "title": "字符串",
          "slug": "字符串"
        },
        {
          "level": 2,
          "title": "解构赋值",
          "slug": "解构赋值"
        },
        {
          "level": 2,
          "title": "对象",
          "slug": "对象"
        },
        {
          "level": 2,
          "title": "数组",
          "slug": "数组"
        },
        {
          "level": 2,
          "title": "函数",
          "slug": "函数"
        },
        {
          "level": 2,
          "title": "Map 结构",
          "slug": "map-结构"
        },
        {
          "level": 2,
          "title": "Class",
          "slug": "class"
        },
        {
          "level": 2,
          "title": "模块",
          "slug": "模块"
        },
        {
          "level": 2,
          "title": "ESLint 的使用",
          "slug": "eslint-的使用"
        }
      ],
      "excerpt": "<h1 id=\"编程风格\"><a class=\"header-anchor\" href=\"#编程风格\">#</a> 编程风格</h1>\n<p>本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。</p>\n<p>多家公司和组织已经公开了它们的风格规范，下面的内容主要参考了 <a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"noopener noreferrer\">Airbnb<OutboundLink/></a> 公司的 JavaScript 风格规范。</p>\n"
    },
    {
      "title": "读懂 ECMAScript 规格",
      "frontmatter": {
        "title": "读懂 ECMAScript 规格",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/32c35f7651d6e58e",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/26.%E8%AF%BB%E6%87%82%20ECMAScript%20%E8%A7%84%E6%A0%BC.html",
      "relativePath": "前端资料/ES6 教程/26.读懂 ECMAScript 规格.md",
      "key": "v-de05ad7c",
      "path": "/pages/32c35f7651d6e58e/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "术语",
          "slug": "术语"
        },
        {
          "level": 3,
          "title": "抽象操作",
          "slug": "抽象操作"
        },
        {
          "level": 3,
          "title": "Record 和 field",
          "slug": "record-和-field"
        },
        {
          "level": 3,
          "title": "[[Notation]]",
          "slug": "notation"
        },
        {
          "level": 3,
          "title": "Completion Record",
          "slug": "completion-record"
        },
        {
          "level": 2,
          "title": "抽象操作的标准流程",
          "slug": "抽象操作的标准流程"
        },
        {
          "level": 2,
          "title": "相等运算符",
          "slug": "相等运算符"
        },
        {
          "level": 2,
          "title": "数组的空位",
          "slug": "数组的空位"
        },
        {
          "level": 2,
          "title": "数组的 map 方法",
          "slug": "数组的-map-方法"
        }
      ],
      "excerpt": "<h1 id=\"读懂-ecmascript-规格\"><a class=\"header-anchor\" href=\"#读懂-ecmascript-规格\">#</a> 读懂 ECMAScript 规格</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。</p>\n<p>一般来说，没有必要阅读规格，除非你要写编译器。因为规格写得非常抽象和精炼，又缺乏实例，不容易理解，而且对于解决实际的应用问题，帮助不大。但是，如果你遇到疑难的语法问题，实在找不到答案，这时可以去查看规格文件，了解语言标准是怎么说的。规格是解决问题的“最后一招”。</p>\n"
    },
    {
      "title": "异步遍历器",
      "frontmatter": {
        "title": "异步遍历器",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/16121351be68691b",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/27.%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86%E5%99%A8.html",
      "relativePath": "前端资料/ES6 教程/27.异步遍历器.md",
      "key": "v-20bc4814",
      "path": "/pages/16121351be68691b/",
      "headers": [
        {
          "level": 2,
          "title": "同步遍历器的问题",
          "slug": "同步遍历器的问题"
        },
        {
          "level": 2,
          "title": "异步遍历的接口",
          "slug": "异步遍历的接口"
        },
        {
          "level": 2,
          "title": "for await...of",
          "slug": "for-await-of"
        },
        {
          "level": 2,
          "title": "异步 Generator 函数",
          "slug": "异步-generator-函数"
        },
        {
          "level": 2,
          "title": "yield* 语句",
          "slug": "yield-语句"
        }
      ],
      "excerpt": "<h1 id=\"异步遍历器\"><a class=\"header-anchor\" href=\"#异步遍历器\">#</a> 异步遍历器</h1>\n<h2 id=\"同步遍历器的问题\"><a class=\"header-anchor\" href=\"#同步遍历器的问题\">#</a> 同步遍历器的问题</h2>\n<p>《遍历器》一章说过，Iterator 接口是一种数据遍历的协议，只要调用遍历器对象的<code>next</code>方法，就会得到一个对象，表示当前遍历指针所在的那个位置的信息。<code>next</code>方法返回的对象的结构是<code>{value, done}</code>，其中<code>value</code>表示当前的数据的值，<code>done</code>是一个布尔值，表示遍历是否结束。</p>\n"
    },
    {
      "title": "ArrayBuffer",
      "frontmatter": {
        "title": "ArrayBuffer",
        "date": "2020-02-09T16:00:29.000Z",
        "permalink": "/pages/a2ba314746bfdbdd",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/28.ArrayBuffer.html",
      "relativePath": "前端资料/ES6 教程/28.ArrayBuffer.md",
      "key": "v-eb7678f6",
      "path": "/pages/a2ba314746bfdbdd/",
      "headers": [
        {
          "level": 2,
          "title": "ArrayBuffer 对象",
          "slug": "arraybuffer-对象"
        },
        {
          "level": 3,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 3,
          "title": "ArrayBuffer.prototype.byteLength",
          "slug": "arraybuffer-prototype-bytelength"
        },
        {
          "level": 3,
          "title": "ArrayBuffer.prototype.slice()",
          "slug": "arraybuffer-prototype-slice"
        },
        {
          "level": 3,
          "title": "ArrayBuffer.isView()",
          "slug": "arraybuffer-isview"
        },
        {
          "level": 2,
          "title": "TypedArray 视图",
          "slug": "typedarray-视图"
        },
        {
          "level": 3,
          "title": "概述",
          "slug": "概述-2"
        },
        {
          "level": 3,
          "title": "构造函数",
          "slug": "构造函数"
        },
        {
          "level": 3,
          "title": "数组方法",
          "slug": "数组方法"
        },
        {
          "level": 3,
          "title": "字节序",
          "slug": "字节序"
        },
        {
          "level": 3,
          "title": "BYTESPERELEMENT 属性",
          "slug": "bytes-per-element-属性"
        },
        {
          "level": 3,
          "title": "ArrayBuffer 与字符串的互相转换",
          "slug": "arraybuffer-与字符串的互相转换"
        },
        {
          "level": 3,
          "title": "溢出",
          "slug": "溢出"
        },
        {
          "level": 3,
          "title": "TypedArray.prototype.buffer",
          "slug": "typedarray-prototype-buffer"
        },
        {
          "level": 3,
          "title": "TypedArray.prototype.byteLength，TypedArray.prototype.byteOffset",
          "slug": "typedarray-prototype-bytelength-typedarray-prototype-byteoffset"
        },
        {
          "level": 3,
          "title": "TypedArray.prototype.length",
          "slug": "typedarray-prototype-length"
        },
        {
          "level": 3,
          "title": "TypedArray.prototype.set()",
          "slug": "typedarray-prototype-set"
        },
        {
          "level": 3,
          "title": "TypedArray.prototype.subarray()",
          "slug": "typedarray-prototype-subarray"
        },
        {
          "level": 3,
          "title": "TypedArray.prototype.slice()",
          "slug": "typedarray-prototype-slice"
        },
        {
          "level": 3,
          "title": "TypedArray.of()",
          "slug": "typedarray-of"
        },
        {
          "level": 3,
          "title": "TypedArray.from()",
          "slug": "typedarray-from"
        },
        {
          "level": 2,
          "title": "复合视图",
          "slug": "复合视图"
        },
        {
          "level": 2,
          "title": "DataView 视图",
          "slug": "dataview-视图"
        },
        {
          "level": 2,
          "title": "二进制数组的应用",
          "slug": "二进制数组的应用"
        },
        {
          "level": 3,
          "title": "AJAX",
          "slug": "ajax"
        },
        {
          "level": 3,
          "title": "Canvas",
          "slug": "canvas"
        },
        {
          "level": 3,
          "title": "WebSocket",
          "slug": "websocket"
        },
        {
          "level": 3,
          "title": "Fetch API",
          "slug": "fetch-api"
        },
        {
          "level": 3,
          "title": "File API",
          "slug": "file-api"
        },
        {
          "level": 2,
          "title": "SharedArrayBuffer",
          "slug": "sharedarraybuffer"
        },
        {
          "level": 2,
          "title": "Atomics 对象",
          "slug": "atomics-对象"
        }
      ],
      "excerpt": "<h1 id=\"arraybuffer\"><a class=\"header-anchor\" href=\"#arraybuffer\">#</a> ArrayBuffer</h1>\n<p><code>ArrayBuffer</code>对象、<code>TypedArray</code>视图和<code>DataView</code>视图是 JavaScript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（2011 年 2 月发布），ES6 将它们纳入了 ECMAScript 规格，并且增加了新的方法。它们都是以数组的语法处理二进制数据，所以统称为二进制数组。</p>\n"
    },
    {
      "title": "最新提案",
      "frontmatter": {
        "title": "最新提案",
        "date": "2020-02-09T16:00:30.000Z",
        "permalink": "/pages/7188882b8d65af1b",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/29.%E6%9C%80%E6%96%B0%E6%8F%90%E6%A1%88.html",
      "relativePath": "前端资料/ES6 教程/29.最新提案.md",
      "key": "v-2b8bfe29",
      "path": "/pages/7188882b8d65af1b/",
      "headers": [
        {
          "level": 2,
          "title": "do 表达式",
          "slug": "do-表达式"
        },
        {
          "level": 2,
          "title": "throw 表达式",
          "slug": "throw-表达式"
        },
        {
          "level": 2,
          "title": "函数的部分执行",
          "slug": "函数的部分执行"
        },
        {
          "level": 3,
          "title": "语法",
          "slug": "语法"
        },
        {
          "level": 3,
          "title": "注意点",
          "slug": "注意点"
        },
        {
          "level": 2,
          "title": "管道运算符",
          "slug": "管道运算符"
        },
        {
          "level": 2,
          "title": "数值分隔符",
          "slug": "数值分隔符"
        },
        {
          "level": 2,
          "title": "Math.signbit()",
          "slug": "math-signbit"
        },
        {
          "level": 2,
          "title": "双冒号运算符",
          "slug": "双冒号运算符"
        },
        {
          "level": 2,
          "title": "Realm API",
          "slug": "realm-api"
        },
        {
          "level": 2,
          "title": "#!命令",
          "slug": "命令"
        },
        {
          "level": 2,
          "title": "import.meta",
          "slug": "import-meta"
        }
      ],
      "excerpt": "<h1 id=\"最新提案\"><a class=\"header-anchor\" href=\"#最新提案\">#</a> 最新提案</h1>\n<p>本章介绍一些尚未进入标准、但很有希望的最新提案。</p>\n<h2 id=\"do-表达式\"><a class=\"header-anchor\" href=\"#do-表达式\">#</a> do 表达式</h2>\n<p>本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t <span class=\"token operator\">=</span> t <span class=\"token operator\">*</span> t <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"
    },
    {
      "title": "装饰器",
      "frontmatter": {
        "title": "装饰器",
        "date": "2020-02-09T16:00:30.000Z",
        "permalink": "/pages/e97bc1e5626b082c",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/30.%E8%A3%85%E9%A5%B0%E5%99%A8.html",
      "relativePath": "前端资料/ES6 教程/30.装饰器.md",
      "key": "v-2d64cbb0",
      "path": "/pages/e97bc1e5626b082c/",
      "headers": [
        {
          "level": 2,
          "title": "类的装饰",
          "slug": "类的装饰"
        },
        {
          "level": 2,
          "title": "方法的装饰",
          "slug": "方法的装饰"
        },
        {
          "level": 2,
          "title": "为什么装饰器不能用于函数？",
          "slug": "为什么装饰器不能用于函数"
        },
        {
          "level": 2,
          "title": "core-decorators.js",
          "slug": "core-decorators-js"
        },
        {
          "level": 2,
          "title": "使用装饰器实现自动发布事件",
          "slug": "使用装饰器实现自动发布事件"
        },
        {
          "level": 2,
          "title": "Mixin",
          "slug": "mixin"
        },
        {
          "level": 2,
          "title": "Trait",
          "slug": "trait"
        }
      ],
      "excerpt": "<h1 id=\"装饰器\"><a class=\"header-anchor\" href=\"#装饰器\">#</a> 装饰器</h1>\n<p>[说明] Decorator 提案经过了大幅修改，目前还没有定案，不知道语法会不会再变。下面的内容完全依据以前的提案，已经有点过时了。等待定案以后，需要完全重写。</p>\n<p>装饰器（Decorator）是一种与类（class）相关的语法，用来注释或修改类和类方法。许多面向对象的语言都有这项功能，目前有一个<a href=\"https://github.com/tc39/proposal-decorators\" target=\"_blank\" rel=\"noopener noreferrer\">提案<OutboundLink/></a>将其引入了 ECMAScript。</p>\n"
    },
    {
      "title": "函数式编程",
      "frontmatter": {
        "title": "函数式编程",
        "date": "2020-02-09T16:00:30.000Z",
        "permalink": "/pages/1cf50330655efc69",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/31.%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html",
      "relativePath": "前端资料/ES6 教程/31.函数式编程.md",
      "key": "v-2210baad",
      "path": "/pages/1cf50330655efc69/",
      "headers": [
        {
          "level": 2,
          "title": "柯里化",
          "slug": "柯里化"
        },
        {
          "level": 2,
          "title": "函数合成",
          "slug": "函数合成"
        },
        {
          "level": 2,
          "title": "参数倒置",
          "slug": "参数倒置"
        },
        {
          "level": 2,
          "title": "执行边界",
          "slug": "执行边界"
        },
        {
          "level": 2,
          "title": "队列操作",
          "slug": "队列操作"
        },
        {
          "level": 2,
          "title": "合并操作",
          "slug": "合并操作"
        },
        {
          "level": 2,
          "title": "配对操作",
          "slug": "配对操作"
        },
        {
          "level": 2,
          "title": "参考链接",
          "slug": "参考链接"
        }
      ],
      "excerpt": "<h1 id=\"函数式编程\"><a class=\"header-anchor\" href=\"#函数式编程\">#</a> 函数式编程</h1>\n<p>JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至说，JavaScript 是有史以来第一种被大规模采用的函数式编程语言。</p>\n"
    },
    {
      "title": "SIMD",
      "frontmatter": {
        "title": "SIMD",
        "date": "2020-02-09T16:00:30.000Z",
        "permalink": "/pages/8e8f80f69b775a56",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/33.SIMD.html",
      "relativePath": "前端资料/ES6 教程/33.SIMD.md",
      "key": "v-2335aeeb",
      "path": "/pages/8e8f80f69b775a56/",
      "headers": [
        {
          "level": 2,
          "title": "概述",
          "slug": "概述"
        },
        {
          "level": 2,
          "title": "数据类型",
          "slug": "数据类型"
        },
        {
          "level": 2,
          "title": "静态方法：数学运算",
          "slug": "静态方法-数学运算"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.abs()，SIMD.%type%.neg()",
          "slug": "simd-type-abs-simd-type-neg"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.add()，SIMD.%type%.addSaturate()",
          "slug": "simd-type-add-simd-type-addsaturate"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.sub()，SIMD.%type%.subSaturate()",
          "slug": "simd-type-sub-simd-type-subsaturate"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.mul()，SIMD.%type%.div()，SIMD.%type%.sqrt()",
          "slug": "simd-type-mul-simd-type-div-simd-type-sqrt"
        },
        {
          "level": 3,
          "title": "SIMD.%FloatType%.reciprocalApproximation()，SIMD.%type%.reciprocalSqrtApproximation()",
          "slug": "simd-floattype-reciprocalapproximation-simd-type-reciprocalsqrtapproximation"
        },
        {
          "level": 3,
          "title": "SIMD.%IntegerType%.shiftLeftByScalar()",
          "slug": "simd-integertype-shiftleftbyscalar"
        },
        {
          "level": 3,
          "title": "SIMD.%IntegerType%.shiftRightByScalar()",
          "slug": "simd-integertype-shiftrightbyscalar"
        },
        {
          "level": 2,
          "title": "静态方法：通道处理",
          "slug": "静态方法-通道处理"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.check()",
          "slug": "simd-type-check"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.extractLane()，SIMD.%type%.replaceLane()",
          "slug": "simd-type-extractlane-simd-type-replacelane"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.load()",
          "slug": "simd-type-load"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.store()",
          "slug": "simd-type-store"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.splat()",
          "slug": "simd-type-splat"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.swizzle()",
          "slug": "simd-type-swizzle"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.shuffle()",
          "slug": "simd-type-shuffle"
        },
        {
          "level": 2,
          "title": "静态方法：比较运算",
          "slug": "静态方法-比较运算"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.equal()，SIMD.%type%.notEqual()",
          "slug": "simd-type-equal-simd-type-notequal"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.greaterThan()，SIMD.%type%.greaterThanOrEqual()",
          "slug": "simd-type-greaterthan-simd-type-greaterthanorequal"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.lessThan()，SIMD.%type%.lessThanOrEqual()",
          "slug": "simd-type-lessthan-simd-type-lessthanorequal"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.select()",
          "slug": "simd-type-select"
        },
        {
          "level": 3,
          "title": "SIMD.%BooleanType%.allTrue()，SIMD.%BooleanType%.anyTrue()",
          "slug": "simd-booleantype-alltrue-simd-booleantype-anytrue"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.min()，SIMD.%type%.minNum()",
          "slug": "simd-type-min-simd-type-minnum"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.max()，SIMD.%type%.maxNum()",
          "slug": "simd-type-max-simd-type-maxnum"
        },
        {
          "level": 2,
          "title": "静态方法：位运算",
          "slug": "静态方法-位运算"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.and()，SIMD.%type%.or()，SIMD.%type%.xor()，SIMD.%type%.not()",
          "slug": "simd-type-and-simd-type-or-simd-type-xor-simd-type-not"
        },
        {
          "level": 2,
          "title": "静态方法：数据类型转换",
          "slug": "静态方法-数据类型转换"
        },
        {
          "level": 2,
          "title": "实例方法",
          "slug": "实例方法"
        },
        {
          "level": 3,
          "title": "SIMD.%type%.prototype.toString()",
          "slug": "simd-type-prototype-tostring"
        },
        {
          "level": 2,
          "title": "实例：求平均值",
          "slug": "实例-求平均值"
        }
      ],
      "excerpt": "<h1 id=\"simd\"><a class=\"header-anchor\" href=\"#simd\">#</a> SIMD</h1>\n<h2 id=\"概述\"><a class=\"header-anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>SIMD（发音<code>/sim-dee/</code>）是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。它是 JavaScript 操作 CPU 对应指令的接口，你可以看做这是一种不同的运算执行模式。与它相对的是 SISD（“Single Instruction/Single Data”），即“单指令，单数据”。</p>\n"
    },
    {
      "title": "参考链接",
      "frontmatter": {
        "title": "参考链接",
        "date": "2020-02-09T16:00:30.000Z",
        "permalink": "/pages/ea6f3b870f6dab69",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/34.%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5.html",
      "relativePath": "前端资料/ES6 教程/34.参考链接.md",
      "key": "v-2d306e84",
      "path": "/pages/ea6f3b870f6dab69/",
      "headers": [
        {
          "level": 2,
          "title": "官方文件",
          "slug": "官方文件"
        },
        {
          "level": 2,
          "title": "综合介绍",
          "slug": "综合介绍"
        },
        {
          "level": 2,
          "title": "let 和 const",
          "slug": "let-和-const"
        },
        {
          "level": 2,
          "title": "解构赋值",
          "slug": "解构赋值"
        },
        {
          "level": 2,
          "title": "字符串",
          "slug": "字符串"
        },
        {
          "level": 2,
          "title": "正则",
          "slug": "正则"
        },
        {
          "level": 2,
          "title": "数值",
          "slug": "数值"
        },
        {
          "level": 2,
          "title": "数组",
          "slug": "数组"
        },
        {
          "level": 2,
          "title": "函数",
          "slug": "函数"
        },
        {
          "level": 2,
          "title": "对象",
          "slug": "对象"
        },
        {
          "level": 2,
          "title": "Symbol",
          "slug": "symbol"
        },
        {
          "level": 2,
          "title": "Set 和 Map",
          "slug": "set-和-map"
        },
        {
          "level": 2,
          "title": "Proxy 和 Reflect",
          "slug": "proxy-和-reflect"
        },
        {
          "level": 2,
          "title": "Promise 对象",
          "slug": "promise-对象"
        },
        {
          "level": 2,
          "title": "Iterator",
          "slug": "iterator"
        },
        {
          "level": 2,
          "title": "Generator",
          "slug": "generator"
        },
        {
          "level": 2,
          "title": "异步操作和 Async 函数",
          "slug": "异步操作和-async-函数"
        },
        {
          "level": 2,
          "title": "Class",
          "slug": "class"
        },
        {
          "level": 2,
          "title": "Decorator",
          "slug": "decorator"
        },
        {
          "level": 2,
          "title": "Module",
          "slug": "module"
        },
        {
          "level": 2,
          "title": "二进制数组",
          "slug": "二进制数组"
        },
        {
          "level": 2,
          "title": "SIMD",
          "slug": "simd"
        },
        {
          "level": 2,
          "title": "工具",
          "slug": "工具"
        }
      ]
    },
    {
      "title": "Mixin",
      "frontmatter": {
        "title": "Mixin",
        "date": "2020-02-09T16:00:30.000Z",
        "permalink": "/pages/6a8e2dc558da1b39",
        "author": "阮一峰",
        "categories": [
          "《ES6 教程》笔记"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/ES6%20%E6%95%99%E7%A8%8B/32.Mixin.html",
      "relativePath": "前端资料/ES6 教程/32.Mixin.md",
      "key": "v-761127fa",
      "path": "/pages/6a8e2dc558da1b39/",
      "headers": [
        {
          "level": 2,
          "title": "含义",
          "slug": "含义"
        },
        {
          "level": 2,
          "title": "Trait",
          "slug": "trait"
        }
      ],
      "excerpt": "<h1 id=\"mixin\"><a class=\"header-anchor\" href=\"#mixin\">#</a> Mixin</h1>\n<p>JavaScript 语言的设计是单一继承，即子类只能继承一个父类，不允许继承多个父类。这种设计保证了对象继承的层次结构是树状的，而不是复杂的<a href=\"https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem\" target=\"_blank\" rel=\"noopener noreferrer\">网状结构<OutboundLink/></a>。</p>\n"
    },
    {
      "title": "面向对象",
      "frontmatter": {
        "title": "面向对象",
        "date": "2020-01-12T11:49:16.000Z",
        "permalink": "/pages/659b5af5e2e704e0",
        "categories": [
          "《JavaScript教程》笔记"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/JavaScript%E6%95%99%E7%A8%8B/03.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html",
      "relativePath": "前端资料/JavaScript教程/03.面向对象.md",
      "key": "v-918c4c48",
      "path": "/pages/659b5af5e2e704e0/",
      "headers": [
        {
          "level": 2,
          "title": "一、实例对象与new命令",
          "slug": "一、实例对象与new命令"
        },
        {
          "level": 3,
          "title": "1、对象是什么",
          "slug": "_1、对象是什么"
        },
        {
          "level": 3,
          "title": "2、构造函数",
          "slug": "_2、构造函数"
        },
        {
          "level": 3,
          "title": "3、new命令",
          "slug": "_3、new命令"
        },
        {
          "level": 3,
          "title": "4、Object.create()创建实例对象",
          "slug": "_4、object-create-创建实例对象"
        },
        {
          "level": 2,
          "title": "二、this关键字",
          "slug": "二、this关键字"
        },
        {
          "level": 3,
          "title": "1、涵义",
          "slug": "_1、涵义"
        },
        {
          "level": 3,
          "title": "2、实质",
          "slug": "_2、实质"
        },
        {
          "level": 3,
          "title": "3、使用场合",
          "slug": "_3、使用场合"
        },
        {
          "level": 3,
          "title": "4、使用注意点",
          "slug": "_4、使用注意点"
        },
        {
          "level": 3,
          "title": "5、绑定 this 的方法",
          "slug": "_5、绑定-this-的方法"
        },
        {
          "level": 2,
          "title": "三、对象的继承",
          "slug": "三、对象的继承"
        },
        {
          "level": 3,
          "title": "1、原型对象概述",
          "slug": "_1、原型对象概述"
        },
        {
          "level": 3,
          "title": "2、instanceof 运算符",
          "slug": "_2、instanceof-运算符"
        },
        {
          "level": 3,
          "title": "3、构造函数的继承",
          "slug": "_3、构造函数的继承"
        },
        {
          "level": 3,
          "title": "4、多重继承",
          "slug": "_4、多重继承"
        },
        {
          "level": 3,
          "title": "5、模块",
          "slug": "_5、模块"
        },
        {
          "level": 2,
          "title": "四、Object 对象的相关方法",
          "slug": "四、object-对象的相关方法"
        },
        {
          "level": 3,
          "title": "1、Object.getPrototypeOf() 获取原型对象",
          "slug": "_1、object-getprototypeof-获取原型对象"
        },
        {
          "level": 3,
          "title": "2、Object.setPrototypeOf() 设置原型对象",
          "slug": "_2、object-setprototypeof-设置原型对象"
        },
        {
          "level": 3,
          "title": "3、 Object.create() 创建实例对象，指向目标对象的原型",
          "slug": "_3、-object-create-创建实例对象-指向目标对象的原型"
        },
        {
          "level": 3,
          "title": "4、Object.prototype.isPrototypeOf()判断某个对象是否为参数对象的原型",
          "slug": "_4、object-prototype-isprototypeof-判断某个对象是否为参数对象的原型"
        },
        {
          "level": 3,
          "title": "5、Object.prototype.__proto__ 返回该对象的原型，可读写",
          "slug": "_5、object-prototype-proto-返回该对象的原型-可读写"
        },
        {
          "level": 3,
          "title": "6、获取原型对象方法的比较",
          "slug": "_6、获取原型对象方法的比较"
        },
        {
          "level": 3,
          "title": "7、Object.getOwnPropertyNames()",
          "slug": "_7、object-getownpropertynames"
        },
        {
          "level": 3,
          "title": "8、Object.prototype.hasOwnProperty()",
          "slug": "_8、object-prototype-hasownproperty"
        },
        {
          "level": 3,
          "title": "9、in 运算符和 for...in 循环",
          "slug": "_9、in-运算符和-for-in-循环"
        },
        {
          "level": 3,
          "title": "10、对象的拷贝",
          "slug": "_10、对象的拷贝"
        },
        {
          "level": 2,
          "title": "五、严格模式",
          "slug": "五、严格模式"
        },
        {
          "level": 3,
          "title": "1、设计目的",
          "slug": "_1、设计目的"
        },
        {
          "level": 3,
          "title": "2、启用方法",
          "slug": "_2、启用方法"
        },
        {
          "level": 2,
          "title": "文档",
          "slug": "文档"
        }
      ]
    },
    {
      "title": "内置对象",
      "frontmatter": {
        "title": "内置对象",
        "date": "2020-01-12T11:49:16.000Z",
        "permalink": "/pages/74d2ab3fbfeaaa68",
        "categories": [
          "《JavaScript教程》笔记"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/JavaScript%E6%95%99%E7%A8%8B/02.%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1.html",
      "relativePath": "前端资料/JavaScript教程/02.内置对象.md",
      "key": "v-73e27fb0",
      "path": "/pages/74d2ab3fbfeaaa68/",
      "headers": [
        {
          "level": 2,
          "title": "一、Object对象",
          "slug": "一、object对象"
        },
        {
          "level": 2,
          "title": "1、概述",
          "slug": "_1、概述"
        },
        {
          "level": 2,
          "title": "2、Object() 当作工具方法（不通过new创建）",
          "slug": "_2、object-当作工具方法-不通过new创建"
        },
        {
          "level": 2,
          "title": "3、Object构造函数（通过new创建）",
          "slug": "_3、object构造函数-通过new创建"
        },
        {
          "level": 2,
          "title": "4、Object 的静态方法",
          "slug": "_4、object-的静态方法"
        },
        {
          "level": 3,
          "title": "Object.keys()",
          "slug": "object-keys"
        },
        {
          "level": 3,
          "title": "Object.getOwnPropertyNames()",
          "slug": "object-getownpropertynames"
        },
        {
          "level": 3,
          "title": "Object的其他静态方法",
          "slug": "object的其他静态方法"
        },
        {
          "level": 2,
          "title": "5、Object 的实例方法",
          "slug": "_5、object-的实例方法"
        },
        {
          "level": 3,
          "title": "Object.prototype.valueOf()",
          "slug": "object-prototype-valueof"
        },
        {
          "level": 3,
          "title": "Object.prototype.toString()",
          "slug": "object-prototype-tostring"
        },
        {
          "level": 3,
          "title": "Object.prototype.toLocaleString()",
          "slug": "object-prototype-tolocalestring"
        },
        {
          "level": 3,
          "title": "Object.prototype.hasOwnProperty()",
          "slug": "object-prototype-hasownproperty"
        },
        {
          "level": 2,
          "title": "二、属性描述对象",
          "slug": "二、属性描述对象"
        },
        {
          "level": 2,
          "title": "1、概述",
          "slug": "_1、概述-2"
        },
        {
          "level": 2,
          "title": "2、Object.getOwnPropertyDescriptor()",
          "slug": "_2、object-getownpropertydescriptor"
        },
        {
          "level": 2,
          "title": "3、Object.getOwnPropertyNames()",
          "slug": "_3、object-getownpropertynames"
        },
        {
          "level": 2,
          "title": "4、Object.defineProperty()，Object.defineProperties()",
          "slug": "_4、object-defineproperty-object-defineproperties"
        },
        {
          "level": 2,
          "title": "5、Object.prototype.propertyIsEnumerable()",
          "slug": "_5、object-prototype-propertyisenumerable"
        },
        {
          "level": 2,
          "title": "6、元属性",
          "slug": "_6、元属性"
        },
        {
          "level": 3,
          "title": "value目标属性的值",
          "slug": "value目标属性的值"
        },
        {
          "level": 3,
          "title": "writable可写性",
          "slug": "writable可写性"
        },
        {
          "level": 3,
          "title": "enumerable可遍历性",
          "slug": "enumerable可遍历性"
        },
        {
          "level": 3,
          "title": "configurable可配置性",
          "slug": "configurable可配置性"
        },
        {
          "level": 2,
          "title": "7、存取器（get和set）",
          "slug": "_7、存取器-get和set"
        },
        {
          "level": 2,
          "title": "8、对象的拷贝",
          "slug": "_8、对象的拷贝"
        },
        {
          "level": 2,
          "title": "9、控制对象读写状态",
          "slug": "_9、控制对象读写状态"
        },
        {
          "level": 3,
          "title": "Object.preventExtensions() 防止新增",
          "slug": "object-preventextensions-防止新增"
        },
        {
          "level": 3,
          "title": "Object.isExtensible() 是可新增的？",
          "slug": "object-isextensible-是可新增的"
        },
        {
          "level": 3,
          "title": "Object.seal() 密封",
          "slug": "object-seal-密封"
        },
        {
          "level": 3,
          "title": "Object.isSealed() 是密封的？",
          "slug": "object-issealed-是密封的"
        },
        {
          "level": 3,
          "title": "Object.freeze() 冻结",
          "slug": "object-freeze-冻结"
        },
        {
          "level": 3,
          "title": "Object.isFrozen() 是冻结的？",
          "slug": "object-isfrozen-是冻结的"
        },
        {
          "level": 3,
          "title": "局限性",
          "slug": "局限性"
        },
        {
          "level": 2,
          "title": "三、Array对象",
          "slug": "三、array对象"
        },
        {
          "level": 2,
          "title": "1、Array构造函数",
          "slug": "_1、array构造函数"
        },
        {
          "level": 2,
          "title": "2、静态方法",
          "slug": "_2、静态方法"
        },
        {
          "level": 3,
          "title": "Array.isArray()",
          "slug": "array-isarray"
        },
        {
          "level": 2,
          "title": "3、实例方法",
          "slug": "_3、实例方法"
        },
        {
          "level": 3,
          "title": "valueOf() 原数组，toString() 转字符串",
          "slug": "valueof-原数组-tostring-转字符串"
        },
        {
          "level": 3,
          "title": "push() 末尾添加，pop() 删除末尾",
          "slug": "push-末尾添加-pop-删除末尾"
        },
        {
          "level": 3,
          "title": "unshift() 首位添加, shift() 删除首位",
          "slug": "unshift-首位添加-shift-删除首位"
        },
        {
          "level": 3,
          "title": "join() 连接每个成员-转字符串",
          "slug": "join-连接每个成员-转字符串"
        },
        {
          "level": 3,
          "title": "concat() 合并数组",
          "slug": "concat-合并数组"
        },
        {
          "level": 3,
          "title": "reverse() 反转",
          "slug": "reverse-反转"
        },
        {
          "level": 3,
          "title": "slice() 部分-提取部分成员",
          "slug": "slice-部分-提取部分成员"
        },
        {
          "level": 3,
          "title": "splice()  从第几个开始，删除几个，并添加成员，返回被删除成员。",
          "slug": "splice-从第几个开始-删除几个-并添加成员-返回被删除成员。"
        },
        {
          "level": 3,
          "title": "sort() 排序",
          "slug": "sort-排序"
        },
        {
          "level": 3,
          "title": "map() 映射 每个成员 并返回",
          "slug": "map-映射-每个成员-并返回"
        },
        {
          "level": 3,
          "title": "forEach() 循环每个成员",
          "slug": "foreach-循环每个成员"
        },
        {
          "level": 3,
          "title": "filter() 过滤",
          "slug": "filter-过滤"
        },
        {
          "level": 3,
          "title": "some()某个，every()每个",
          "slug": "some-某个-every-每个"
        },
        {
          "level": 3,
          "title": "reduce() 累计器，reduceRight() 反向累计器",
          "slug": "reduce-累计器-reduceright-反向累计器"
        },
        {
          "level": 3,
          "title": "indexOf() 搜索成员第一个出现的位置，lastIndexOf() 搜索成员最后出现的位置",
          "slug": "indexof-搜索成员第一个出现的位置-lastindexof-搜索成员最后出现的位置"
        },
        {
          "level": 3,
          "title": "链式使用",
          "slug": "链式使用"
        },
        {
          "level": 2,
          "title": "四、包装对象",
          "slug": "四、包装对象"
        },
        {
          "level": 2,
          "title": "1、定义",
          "slug": "_1、定义"
        },
        {
          "level": 2,
          "title": "2、实例方法",
          "slug": "_2、实例方法"
        },
        {
          "level": 3,
          "title": "2.1 valueOf()",
          "slug": "_2-1-valueof"
        },
        {
          "level": 3,
          "title": "2.2 toString()",
          "slug": "_2-2-tostring"
        },
        {
          "level": 2,
          "title": "3、原始类型与实例对象的自动转换",
          "slug": "_3、原始类型与实例对象的自动转换"
        },
        {
          "level": 2,
          "title": "4、自定义方法",
          "slug": "_4、自定义方法"
        },
        {
          "level": 2,
          "title": "五、Boolean对象",
          "slug": "五、boolean对象"
        },
        {
          "level": 2,
          "title": "1、概述",
          "slug": "_1、概述-3"
        },
        {
          "level": 2,
          "title": "2、Boolean 函数的类型转换作用",
          "slug": "_2、boolean-函数的类型转换作用"
        },
        {
          "level": 2,
          "title": "六、Number对象",
          "slug": "六、number对象"
        },
        {
          "level": 2,
          "title": "1、概述",
          "slug": "_1、概述-4"
        },
        {
          "level": 2,
          "title": "2、静态属性",
          "slug": "_2、静态属性"
        },
        {
          "level": 2,
          "title": "3、实例方法",
          "slug": "_3、实例方法-2"
        },
        {
          "level": 3,
          "title": "3.1 Number.prototype.toString() 可转成多种进制字符串",
          "slug": "_3-1-number-prototype-tostring-可转成多种进制字符串"
        },
        {
          "level": 3,
          "title": "3.2 Number.prototype.toFixed() 转成保留指定小数位数的字符串",
          "slug": "_3-2-number-prototype-tofixed-转成保留指定小数位数的字符串"
        },
        {
          "level": 3,
          "title": "3.3 Number.prototype.toExponential() 转成科学计数法形式字符串",
          "slug": "_3-3-number-prototype-toexponential-转成科学计数法形式字符串"
        },
        {
          "level": 3,
          "title": "3.4 Number.prototype.toPrecision()转为指定位数的有效数字",
          "slug": "_3-4-number-prototype-toprecision-转为指定位数的有效数字"
        },
        {
          "level": 3,
          "title": "4.5 Number.prototype.toLocaleString()",
          "slug": "_4-5-number-prototype-tolocalestring"
        },
        {
          "level": 2,
          "title": "4、自定义方法",
          "slug": "_4、自定义方法-2"
        },
        {
          "level": 2,
          "title": "七、String对象",
          "slug": "七、string对象"
        },
        {
          "level": 2,
          "title": "1、概述",
          "slug": "_1、概述-5"
        },
        {
          "level": 2,
          "title": "2、静态方法",
          "slug": "_2、静态方法-2"
        },
        {
          "level": 3,
          "title": "String.fromCharCode()",
          "slug": "string-fromcharcode"
        },
        {
          "level": 2,
          "title": "3、实例属性",
          "slug": "_3、实例属性"
        },
        {
          "level": 3,
          "title": "String.prototype.length",
          "slug": "string-prototype-length"
        },
        {
          "level": 2,
          "title": "4、实例方法",
          "slug": "_4、实例方法"
        },
        {
          "level": 3,
          "title": "4.1 String.prototype.charAt() 返回指定位置的字符",
          "slug": "_4-1-string-prototype-charat-返回指定位置的字符"
        },
        {
          "level": 3,
          "title": "4.2 String.prototype.charCodeAt()返回字符串指定位置的 Unicode 码点（十进制表示）",
          "slug": "_4-2-string-prototype-charcodeat-返回字符串指定位置的-unicode-码点-十进制表示"
        },
        {
          "level": 3,
          "title": "4.3 String.prototype.concat() 合并字符串，返回新字符串，不改变原字符串",
          "slug": "_4-3-string-prototype-concat-合并字符串-返回新字符串-不改变原字符串"
        },
        {
          "level": 3,
          "title": "4.4 String.prototype.slice() 取出部分子字符串，不改变原字符串",
          "slug": "_4-4-string-prototype-slice-取出部分子字符串-不改变原字符串"
        },
        {
          "level": 3,
          "title": "4.5 String.prototype.substring() 和slice类似",
          "slug": "_4-5-string-prototype-substring-和slice类似"
        },
        {
          "level": 3,
          "title": "4.6 String.prototype.substr() 和 slice、substring类似，区别是参数二表示长度",
          "slug": "_4-6-string-prototype-substr-和-slice、substring类似-区别是参数二表示长度"
        },
        {
          "level": 3,
          "title": "4.7 String.prototype.indexOf() 搜索子串第一个出现的位置，String.prototype.lastIndexOf() 搜索子串最后出现的位置",
          "slug": "_4-7-string-prototype-indexof-搜索子串第一个出现的位置-string-prototype-lastindexof-搜索子串最后出现的位置"
        },
        {
          "level": 3,
          "title": "4.8 String.prototype.trim()  ''修剪'‘两端空格，不改变原字符串",
          "slug": "_4-8-string-prototype-trim-修剪-两端空格-不改变原字符串"
        },
        {
          "level": 3,
          "title": "4.9 String.prototype.toLowerCase() 全转小写，String.prototype.toUpperCase() 全转大写，都不改变原字符串",
          "slug": "_4-9-string-prototype-tolowercase-全转小写-string-prototype-touppercase-全转大写-都不改变原字符串"
        },
        {
          "level": 3,
          "title": "4.10 String.prototype.match() 匹配子串，返回数组（数组带index、input属性）",
          "slug": "_4-10-string-prototype-match-匹配子串-返回数组-数组带index、input属性"
        },
        {
          "level": 3,
          "title": "4.11 String.prototype.search() 搜索子串第一次出现的位置，没有则返-1，String.prototype.replace() 替换子串，参数二替换参数一，不改变原字符串",
          "slug": "_4-11-string-prototype-search-搜索子串第一次出现的位置-没有则返-1-string-prototype-replace-替换子串-参数二替换参数一-不改变原字符串"
        },
        {
          "level": 3,
          "title": "4.12 String.prototype.split() 按给定规则分割字符串，返回数组",
          "slug": "_4-12-string-prototype-split-按给定规则分割字符串-返回数组"
        },
        {
          "level": 3,
          "title": "4.13 String.prototype.localeCompare() 比较两个字符串，返回整数。",
          "slug": "_4-13-string-prototype-localecompare-比较两个字符串-返回整数。"
        },
        {
          "level": 2,
          "title": "八、Math对象",
          "slug": "八、math对象"
        },
        {
          "level": 2,
          "title": "1、静态属性",
          "slug": "_1、静态属性"
        },
        {
          "level": 2,
          "title": "2、静态方法",
          "slug": "_2、静态方法-3"
        },
        {
          "level": 3,
          "title": "2.1 Math.abs() 绝对值",
          "slug": "_2-1-math-abs-绝对值"
        },
        {
          "level": 3,
          "title": "2.2 Math.max() 最大值，Math.min()最 小值",
          "slug": "_2-2-math-max-最大值-math-min-最-小值"
        },
        {
          "level": 3,
          "title": "2.3 Math.floor() 向下取整，Math.ceil() 向上取整",
          "slug": "_2-3-math-floor-向下取整-math-ceil-向上取整"
        },
        {
          "level": 3,
          "title": "2.4 Math.round() 四舍五入",
          "slug": "_2-4-math-round-四舍五入"
        },
        {
          "level": 3,
          "title": "2.5 Math.pow() 指数运算 （次方运算）",
          "slug": "_2-5-math-pow-指数运算-次方运算"
        },
        {
          "level": 3,
          "title": "2.6 Math.sqrt() 平方根",
          "slug": "_2-6-math-sqrt-平方根"
        },
        {
          "level": 3,
          "title": "2.7 Math.log() 自然对数",
          "slug": "_2-7-math-log-自然对数"
        },
        {
          "level": 3,
          "title": "2.8 Math.exp() e的指数",
          "slug": "_2-8-math-exp-e的指数"
        },
        {
          "level": 3,
          "title": "2.9 Math.random() 0到1的随机数（可能等于0，但一定小于1）",
          "slug": "_2-9-math-random-0到1的随机数-可能等于0-但一定小于1"
        },
        {
          "level": 3,
          "title": "2.10 三角函数方法",
          "slug": "_2-10-三角函数方法"
        },
        {
          "level": 2,
          "title": "九、Date对象",
          "slug": "九、date对象"
        },
        {
          "level": 2,
          "title": "1、普通函数的用法",
          "slug": "_1、普通函数的用法"
        },
        {
          "level": 2,
          "title": "2、构造函数的用法",
          "slug": "_2、构造函数的用法"
        },
        {
          "level": 2,
          "title": "3、日期的运算",
          "slug": "_3、日期的运算"
        },
        {
          "level": 2,
          "title": "4、静态方法",
          "slug": "_4、静态方法"
        },
        {
          "level": 3,
          "title": "4.1 Date.now() 当前时间戳",
          "slug": "_4-1-date-now-当前时间戳"
        },
        {
          "level": 3,
          "title": "4.2 Date.parse() 解析日期字符串，返回该时间点的时间戳",
          "slug": "_4-2-date-parse-解析日期字符串-返回该时间点的时间戳"
        },
        {
          "level": 3,
          "title": "4.3 Date.UTC() 以年、月、日等变量作为参数，返回该时间点的时间戳",
          "slug": "_4-3-date-utc-以年、月、日等变量作为参数-返回该时间点的时间戳"
        },
        {
          "level": 2,
          "title": "5、实例方法",
          "slug": "_5、实例方法"
        },
        {
          "level": 3,
          "title": "5.1 Date.prototype.valueOf() 返回时间戳，等同于getTime()。（减法运算默认调用）",
          "slug": "_5-1-date-prototype-valueof-返回时间戳-等同于gettime-。-减法运算默认调用"
        },
        {
          "level": 3,
          "title": "5.2 to 类方法（返回字符串相关）",
          "slug": "_5-2-to-类方法-返回字符串相关"
        },
        {
          "level": 3,
          "title": "5.3 get类 （获取年、月、日、时、分、秒等）",
          "slug": "_5-3-get类-获取年、月、日、时、分、秒等"
        },
        {
          "level": 3,
          "title": "5.4 set 类方法",
          "slug": "_5-4-set-类方法"
        },
        {
          "level": 2,
          "title": "十、RegExp 对象",
          "slug": "十、regexp-对象"
        },
        {
          "level": 2,
          "title": "1、概述",
          "slug": "_1、概述-6"
        },
        {
          "level": 2,
          "title": "2、实例属性",
          "slug": "_2、实例属性"
        },
        {
          "level": 2,
          "title": "3、实例方法",
          "slug": "_3、实例方法-3"
        },
        {
          "level": 3,
          "title": "3.1 RegExp.prototype.test() 当前模式是否匹配参数字符串，返回布尔值",
          "slug": "_3-1-regexp-prototype-test-当前模式是否匹配参数字符串-返回布尔值"
        },
        {
          "level": 3,
          "title": "3.2 RegExp.prototype.exec() 返回匹配结果，如匹配则返回一个数组，成员是匹配到的子字符串，否则返回null",
          "slug": "_3-2-regexp-prototype-exec-返回匹配结果-如匹配则返回一个数组-成员是匹配到的子字符串-否则返回null"
        },
        {
          "level": 2,
          "title": "4、字符串的实例方法",
          "slug": "_4、字符串的实例方法"
        },
        {
          "level": 3,
          "title": "4.1 String.prototype.match() 匹配，返回匹配结果数组或null",
          "slug": "_4-1-string-prototype-match-匹配-返回匹配结果数组或null"
        },
        {
          "level": 3,
          "title": "4.2 String.prototype.search() 返回第一个满足匹配条件的位置，不满足则返-1",
          "slug": "_4-2-string-prototype-search-返回第一个满足匹配条件的位置-不满足则返-1"
        },
        {
          "level": 3,
          "title": "4.3 String.prototype.replace() 替换匹配的值，参数一是子串或正则，参数二是替换内容",
          "slug": "_4-3-string-prototype-replace-替换匹配的值-参数一是子串或正则-参数二是替换内容"
        },
        {
          "level": 3,
          "title": "4.4 String.prototype.split() 按给定规则分割字符串，返回数组",
          "slug": "_4-4-string-prototype-split-按给定规则分割字符串-返回数组"
        },
        {
          "level": 2,
          "title": "5、匹配规则",
          "slug": "_5、匹配规则"
        },
        {
          "level": 3,
          "title": "5.1 字面量字符和元字符",
          "slug": "_5-1-字面量字符和元字符"
        },
        {
          "level": 3,
          "title": "5.2 转义符（\\ 反斜杠）",
          "slug": "_5-2-转义符-反斜杠"
        },
        {
          "level": 3,
          "title": "5.3 特殊字符",
          "slug": "_5-3-特殊字符"
        },
        {
          "level": 3,
          "title": "5.4 字符类",
          "slug": "_5-4-字符类"
        },
        {
          "level": 3,
          "title": "5.5 预定义模式 (常见模式简写\\d\\D\\w\\W\\s\\S\\b\\B)",
          "slug": "_5-5-预定义模式-常见模式简写-d-d-w-w-s-s-b-b"
        },
        {
          "level": 3,
          "title": "5.6 重复类 （ {n} {n,} {n,m} ）",
          "slug": "_5-6-重复类-n-n-n-m"
        },
        {
          "level": 3,
          "title": "5.7 量词符（?）（*）（+）",
          "slug": "_5-7-量词符"
        },
        {
          "level": 3,
          "title": "5.8 贪婪模式（对量词符可使用非贪婪模式）",
          "slug": "_5-8-贪婪模式-对量词符可使用非贪婪模式"
        },
        {
          "level": 3,
          "title": "5.9 修饰符",
          "slug": "_5-9-修饰符"
        },
        {
          "level": 3,
          "title": "5.10 组匹配",
          "slug": "_5-10-组匹配"
        },
        {
          "level": 2,
          "title": "十一、JSON对象",
          "slug": "十一、json对象"
        },
        {
          "level": 2,
          "title": "1、JSON 格式",
          "slug": "_1、json-格式"
        },
        {
          "level": 2,
          "title": "2、JSON 对象",
          "slug": "_2、json-对象"
        },
        {
          "level": 2,
          "title": "3、JSON.stringify() 转为JSON字符串",
          "slug": "_3、json-stringify-转为json字符串"
        },
        {
          "level": 3,
          "title": "3.1 基本用法",
          "slug": "_3-1-基本用法"
        },
        {
          "level": 3,
          "title": "3.2 第二个参数 （一个数组，对象属性白名单；或一个函数，改写返回值）",
          "slug": "_3-2-第二个参数-一个数组-对象属性白名单-或一个函数-改写返回值"
        },
        {
          "level": 3,
          "title": "3.3 第三个参数 （增加返回JSON字符串的可读性；json格式）",
          "slug": "_3-3-第三个参数-增加返回json字符串的可读性-json格式"
        },
        {
          "level": 3,
          "title": "3.4 参数对象的 toJSON 方法（对象自定义toJSON方法，转字符串只取该方法返回值）",
          "slug": "_3-4-参数对象的-tojson-方法-对象自定义tojson方法-转字符串只取该方法返回值"
        },
        {
          "level": 2,
          "title": "4、JSON.parse()",
          "slug": "_4、json-parse"
        },
        {
          "level": 2,
          "title": "文档",
          "slug": "文档"
        }
      ]
    },
    {
      "title": "基础",
      "frontmatter": {
        "title": "基础",
        "date": "2020-01-12T11:49:16.000Z",
        "permalink": "/pages/0796ba76b4b55368",
        "categories": [
          "《JavaScript教程》笔记"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/JavaScript%E6%95%99%E7%A8%8B/01.%E5%9F%BA%E7%A1%80.html",
      "relativePath": "前端资料/JavaScript教程/01.基础.md",
      "key": "v-77bf9048",
      "path": "/pages/0796ba76b4b55368/",
      "headers": [
        {
          "level": 2,
          "title": "一、JS的一些名词概念",
          "slug": "一、js的一些名词概念"
        },
        {
          "level": 2,
          "title": "二、数据类型的转换",
          "slug": "二、数据类型的转换"
        },
        {
          "level": 3,
          "title": "1、强制（手动）转换",
          "slug": "_1、强制-手动-转换"
        },
        {
          "level": 3,
          "title": "2、自动转换",
          "slug": "_2、自动转换"
        },
        {
          "level": 2,
          "title": "三、错误处理机制",
          "slug": "三、错误处理机制"
        },
        {
          "level": 3,
          "title": "1、Error实例对象",
          "slug": "_1、error实例对象"
        },
        {
          "level": 3,
          "title": "2、原生错误类型",
          "slug": "_2、原生错误类型"
        },
        {
          "level": 3,
          "title": "3、自定义错误",
          "slug": "_3、自定义错误"
        },
        {
          "level": 3,
          "title": "4、throw 语句 （中断程序并抛出错误）",
          "slug": "_4、throw-语句-中断程序并抛出错误"
        },
        {
          "level": 3,
          "title": "5、try...catch 结构（捕获错误，对错误进行处理，不中断）",
          "slug": "_5、try-catch-结构-捕获错误-对错误进行处理-不中断"
        },
        {
          "level": 3,
          "title": "6、finally 代码块（在try..catch最后，必执行的）",
          "slug": "_6、finally-代码块-在try-catch最后-必执行的"
        },
        {
          "level": 2,
          "title": "四、console对象",
          "slug": "四、console对象"
        },
        {
          "level": 3,
          "title": "console.time()，console.timeEnd() （用于计算程序的用时）",
          "slug": "console-time-console-timeend-用于计算程序的用时"
        },
        {
          "level": 2,
          "title": "文档",
          "slug": "文档"
        }
      ]
    },
    {
      "title": "DOM",
      "frontmatter": {
        "title": "DOM",
        "date": "2020-01-12T11:49:16.000Z",
        "permalink": "/pages/7d961b8030c6099e",
        "categories": [
          "《JavaScript教程》笔记"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/JavaScript%E6%95%99%E7%A8%8B/05.DOM.html",
      "relativePath": "前端资料/JavaScript教程/05.DOM.md",
      "key": "v-3d3f5a5c",
      "path": "/pages/7d961b8030c6099e/",
      "headers": [
        {
          "level": 2,
          "title": "一、概述",
          "slug": "一、概述"
        },
        {
          "level": 3,
          "title": "1、DOM",
          "slug": "_1、dom"
        },
        {
          "level": 3,
          "title": "2、节点",
          "slug": "_2、节点"
        },
        {
          "level": 3,
          "title": "3、节点树",
          "slug": "_3、节点树"
        },
        {
          "level": 2,
          "title": "二、Node接口",
          "slug": "二、node接口"
        },
        {
          "level": 3,
          "title": "1、属性",
          "slug": "_1、属性"
        },
        {
          "level": 3,
          "title": "2、方法",
          "slug": "_2、方法"
        },
        {
          "level": 2,
          "title": "三、NodeList 接口 与 HTMLCollection 接口 （节点的集合）",
          "slug": "三、nodelist-接口-与-htmlcollection-接口-节点的集合"
        },
        {
          "level": 3,
          "title": "1、NodeList 接口 （各类节点的集合）",
          "slug": "_1、nodelist-接口-各类节点的集合"
        },
        {
          "level": 3,
          "title": "2、HTMLCollection 接口 （HTML元素节点的集合）",
          "slug": "_2、htmlcollection-接口-html元素节点的集合"
        },
        {
          "level": 2,
          "title": "四、ParentNode 接口（父节点接口），ChildNode 接口（子节点接口）",
          "slug": "四、parentnode-接口-父节点接口-childnode-接口-子节点接口"
        },
        {
          "level": 3,
          "title": "1、ParentNode 接口",
          "slug": "_1、parentnode-接口"
        },
        {
          "level": 3,
          "title": "2、ChildNode 接口",
          "slug": "_2、childnode-接口"
        },
        {
          "level": 2,
          "title": "五、Document节点",
          "slug": "五、document节点"
        },
        {
          "level": 3,
          "title": "1、概述",
          "slug": "_1、概述"
        },
        {
          "level": 3,
          "title": "2、属性",
          "slug": "_2、属性"
        },
        {
          "level": 3,
          "title": "3、方法",
          "slug": "_3、方法"
        },
        {
          "level": 2,
          "title": "六、Element节点",
          "slug": "六、element节点"
        },
        {
          "level": 3,
          "title": "1、实例属性",
          "slug": "_1、实例属性"
        },
        {
          "level": 3,
          "title": "2、实例方法",
          "slug": "_2、实例方法"
        },
        {
          "level": 2,
          "title": "七、元素属性的操作",
          "slug": "七、元素属性的操作"
        },
        {
          "level": 3,
          "title": "1、Element.attributes 属性 （返回包含标签所有属性的类数组动态对象）",
          "slug": "_1、element-attributes-属性-返回包含标签所有属性的类数组动态对象"
        },
        {
          "level": 3,
          "title": "2、元素的标准属性",
          "slug": "_2、元素的标准属性"
        },
        {
          "level": 3,
          "title": "3、属性操作的标准方法",
          "slug": "_3、属性操作的标准方法"
        },
        {
          "level": 3,
          "title": "4、dataset 属性   获取data-*自定义属性",
          "slug": "_4、dataset-属性-获取data-自定义属性"
        },
        {
          "level": 2,
          "title": "八、Text 节点和 DocumentFragment 节点",
          "slug": "八、text-节点和-documentfragment-节点"
        },
        {
          "level": 3,
          "title": "1、Text 节点的概念",
          "slug": "_1、text-节点的概念"
        },
        {
          "level": 3,
          "title": "2、Text 节点的属性",
          "slug": "_2、text-节点的属性"
        },
        {
          "level": 3,
          "title": "3、Text 节点的方法",
          "slug": "_3、text-节点的方法"
        },
        {
          "level": 3,
          "title": "4、DocumentFragment 文档片段节点",
          "slug": "_4、documentfragment-文档片段节点"
        },
        {
          "level": 2,
          "title": "八、CSS 操作",
          "slug": "八、css-操作"
        },
        {
          "level": 3,
          "title": "1、HTML 元素的 style 属性",
          "slug": "_1、html-元素的-style-属性"
        },
        {
          "level": 3,
          "title": "2、CSSStyleDeclaration 接口",
          "slug": "_2、cssstyledeclaration-接口"
        },
        {
          "level": 3,
          "title": "3、CSS 模块的侦测（判断浏览器是否支持某个样式）",
          "slug": "_3、css-模块的侦测-判断浏览器是否支持某个样式"
        },
        {
          "level": 3,
          "title": "4、原生CSS 对象",
          "slug": "_4、原生css-对象"
        },
        {
          "level": 3,
          "title": "5、window.getComputedStyle() 返回元素最终样式",
          "slug": "_5、window-getcomputedstyle-返回元素最终样式"
        },
        {
          "level": 3,
          "title": "6、CSS 伪元素样式的获取",
          "slug": "_6、css-伪元素样式的获取"
        },
        {
          "level": 3,
          "title": "7、StyleSheet 接口",
          "slug": "_7、stylesheet-接口"
        },
        {
          "level": 3,
          "title": "8、实例：添加样式表",
          "slug": "_8、实例-添加样式表"
        },
        {
          "level": 3,
          "title": "9、CSSRuleList 接口",
          "slug": "_9、cssrulelist-接口"
        },
        {
          "level": 3,
          "title": "10、CSSRule 接口",
          "slug": "_10、cssrule-接口"
        },
        {
          "level": 3,
          "title": "11、window.matchMedia()",
          "slug": "_11、window-matchmedia"
        },
        {
          "level": 3,
          "title": "12、本章小结",
          "slug": "_12、本章小结"
        },
        {
          "level": 2,
          "title": "九、Mutation Observer API 监视DOM变动",
          "slug": "九、mutation-observer-api-监视dom变动"
        },
        {
          "level": 3,
          "title": "1、概述",
          "slug": "_1、概述-2"
        },
        {
          "level": 3,
          "title": "2、MutationObserver 构造函数 (使用方式)",
          "slug": "_2、mutationobserver-构造函数-使用方式"
        },
        {
          "level": 3,
          "title": "3、MutationObserver 的实例方法",
          "slug": "_3、mutationobserver-的实例方法"
        },
        {
          "level": 3,
          "title": "4、MutationRecord 对象 (变动记录)",
          "slug": "_4、mutationrecord-对象-变动记录"
        },
        {
          "level": 3,
          "title": "5、应用示例",
          "slug": "_5、应用示例"
        },
        {
          "level": 2,
          "title": "文档",
          "slug": "文档"
        }
      ]
    },
    {
      "title": "异步操作",
      "frontmatter": {
        "title": "异步操作",
        "date": "2020-01-12T11:49:16.000Z",
        "permalink": "/pages/d61b1cb4cdac1f63",
        "categories": [
          "《JavaScript教程》笔记"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/JavaScript%E6%95%99%E7%A8%8B/04.%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C.html",
      "relativePath": "前端资料/JavaScript教程/04.异步操作.md",
      "key": "v-0cd0135a",
      "path": "/pages/d61b1cb4cdac1f63/",
      "headers": [
        {
          "level": 2,
          "title": "一、异步操作概述",
          "slug": "一、异步操作概述"
        },
        {
          "level": 3,
          "title": "1、单线程模型",
          "slug": "_1、单线程模型"
        },
        {
          "level": 3,
          "title": "2、同步任务和异步任务",
          "slug": "_2、同步任务和异步任务"
        },
        {
          "level": 3,
          "title": "3、任务队列和事件循环",
          "slug": "_3、任务队列和事件循环"
        },
        {
          "level": 3,
          "title": "4、异步操作的模式",
          "slug": "_4、异步操作的模式"
        },
        {
          "level": 3,
          "title": "5、异步操作的流程控制",
          "slug": "_5、异步操作的流程控制"
        },
        {
          "level": 2,
          "title": "文档",
          "slug": "文档"
        }
      ]
    },
    {
      "title": "事件",
      "frontmatter": {
        "title": "事件",
        "date": "2020-01-12T11:49:16.000Z",
        "permalink": "/pages/10b2761db5a8e089",
        "categories": [
          "《JavaScript教程》笔记"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/JavaScript%E6%95%99%E7%A8%8B/06.%E4%BA%8B%E4%BB%B6.html",
      "relativePath": "前端资料/JavaScript教程/06.事件.md",
      "key": "v-7d084490",
      "path": "/pages/10b2761db5a8e089/",
      "headers": [
        {
          "level": 2,
          "title": "一、EventTarget 接口",
          "slug": "一、eventtarget-接口"
        },
        {
          "level": 3,
          "title": "1、概述",
          "slug": "_1、概述"
        },
        {
          "level": 3,
          "title": "2、EventTarget.addEventListener()",
          "slug": "_2、eventtarget-addeventlistener"
        },
        {
          "level": 3,
          "title": "3、EventTarget.removeEventListener()",
          "slug": "_3、eventtarget-removeeventlistener"
        },
        {
          "level": 3,
          "title": "4、EventTarget.dispatchEvent()",
          "slug": "_4、eventtarget-dispatchevent"
        },
        {
          "level": 2,
          "title": "二、事件模型",
          "slug": "二、事件模型"
        },
        {
          "level": 3,
          "title": "1、监听函数",
          "slug": "_1、监听函数"
        },
        {
          "level": 3,
          "title": "2、this 的指向 （指向元素节点）",
          "slug": "_2、this-的指向-指向元素节点"
        },
        {
          "level": 3,
          "title": "3、事件的传播（捕获、目标、冒泡）",
          "slug": "_3、事件的传播-捕获、目标、冒泡"
        },
        {
          "level": 3,
          "title": "4、事件的代理",
          "slug": "_4、事件的代理"
        },
        {
          "level": 2,
          "title": "三、Event 对象",
          "slug": "三、event-对象"
        },
        {
          "level": 3,
          "title": "1. 概述",
          "slug": "_1-概述"
        },
        {
          "level": 3,
          "title": "2. 实例属性",
          "slug": "_2-实例属性"
        },
        {
          "level": 3,
          "title": "3、实例方法",
          "slug": "_3、实例方法"
        },
        {
          "level": 2,
          "title": "四、鼠标事件",
          "slug": "四、鼠标事件"
        },
        {
          "level": 3,
          "title": "1、鼠标事件的种类",
          "slug": "_1、鼠标事件的种类"
        },
        {
          "level": 3,
          "title": "2、MouseEvent 接口概述",
          "slug": "_2、mouseevent-接口概述"
        },
        {
          "level": 3,
          "title": "3、MouseEvent 接口的实例属性",
          "slug": "_3、mouseevent-接口的实例属性"
        },
        {
          "level": 3,
          "title": "4、MouseEvent 接口的实例方法",
          "slug": "_4、mouseevent-接口的实例方法"
        },
        {
          "level": 3,
          "title": "5、WheelEvent 接口 （滚轮）",
          "slug": "_5、wheelevent-接口-滚轮"
        },
        {
          "level": 2,
          "title": "五、键盘事件",
          "slug": "五、键盘事件"
        },
        {
          "level": 3,
          "title": "1、键盘事件的种类",
          "slug": "_1、键盘事件的种类"
        },
        {
          "level": 3,
          "title": "2、KeyboardEvent 接口概述",
          "slug": "_2、keyboardevent-接口概述"
        },
        {
          "level": 3,
          "title": "3、KeyboardEvent 的实例属性",
          "slug": "_3、keyboardevent-的实例属性"
        },
        {
          "level": 3,
          "title": "4、KeyboardEvent 的实例方法",
          "slug": "_4、keyboardevent-的实例方法"
        },
        {
          "level": 2,
          "title": "六、进度事件",
          "slug": "六、进度事件"
        },
        {
          "level": 3,
          "title": "1、进度事件的种类",
          "slug": "_1、进度事件的种类"
        },
        {
          "level": 3,
          "title": "2、ProgressEvent 接口",
          "slug": "_2、progressevent-接口"
        },
        {
          "level": 2,
          "title": "七、表单事件",
          "slug": "七、表单事件"
        },
        {
          "level": 3,
          "title": "1、表单事件的种类",
          "slug": "_1、表单事件的种类"
        },
        {
          "level": 3,
          "title": "2、InputEvent 接口（input事件的实例）",
          "slug": "_2、inputevent-接口-input事件的实例"
        },
        {
          "level": 2,
          "title": "八、触摸事件",
          "slug": "八、触摸事件"
        },
        {
          "level": 3,
          "title": "1、触摸操作概述",
          "slug": "_1、触摸操作概述"
        },
        {
          "level": 3,
          "title": "2、Touch 接口",
          "slug": "_2、touch-接口"
        },
        {
          "level": 3,
          "title": "3、TouchList 接口",
          "slug": "_3、touchlist-接口"
        },
        {
          "level": 3,
          "title": "4、TouchEvent 接口",
          "slug": "_4、touchevent-接口"
        },
        {
          "level": 3,
          "title": "5、触摸事件的种类",
          "slug": "_5、触摸事件的种类"
        },
        {
          "level": 2,
          "title": "九、拖拉事件",
          "slug": "九、拖拉事件"
        },
        {
          "level": 3,
          "title": "1、拖拉事件的种类",
          "slug": "_1、拖拉事件的种类"
        },
        {
          "level": 3,
          "title": "2、DragEvent 接口",
          "slug": "_2、dragevent-接口"
        },
        {
          "level": 3,
          "title": "3、DataTransfer 接口概述",
          "slug": "_3、datatransfer-接口概述"
        },
        {
          "level": 3,
          "title": "4、DataTransfer 的实例属性",
          "slug": "_4、datatransfer-的实例属性"
        },
        {
          "level": 3,
          "title": "5、DataTransfer 的实例方法",
          "slug": "_5、datatransfer-的实例方法"
        },
        {
          "level": 2,
          "title": "十、其他常见事件",
          "slug": "十、其他常见事件"
        },
        {
          "level": 3,
          "title": "1、资源事件",
          "slug": "_1、资源事件"
        },
        {
          "level": 3,
          "title": "2、session 历史事件",
          "slug": "_2、session-历史事件"
        },
        {
          "level": 3,
          "title": "3、网页状态事件",
          "slug": "_3、网页状态事件"
        },
        {
          "level": 3,
          "title": "4、窗口事件",
          "slug": "_4、窗口事件"
        },
        {
          "level": 3,
          "title": "5、剪贴板事件",
          "slug": "_5、剪贴板事件"
        },
        {
          "level": 3,
          "title": "6、焦点事件",
          "slug": "_6、焦点事件"
        },
        {
          "level": 3,
          "title": "7、CustomEvent 接口（自定义事件）",
          "slug": "_7、customevent-接口-自定义事件"
        },
        {
          "level": 2,
          "title": "十一、GlobalEventHandlers 接口 （全局事件处理接口）",
          "slug": "十一、globaleventhandlers-接口-全局事件处理接口"
        },
        {
          "level": 3,
          "title": "1、GlobalEventHandlers.onabort （中断事件）",
          "slug": "_1、globaleventhandlers-onabort-中断事件"
        },
        {
          "level": 3,
          "title": "2、GlobalEventHandlers.onerror （错误事件）",
          "slug": "_2、globaleventhandlers-onerror-错误事件"
        },
        {
          "level": 3,
          "title": "3、GlobalEventHandlers.onload（加载完成事件）、GlobalEventHandlers.onloadstart（开始加载事件）",
          "slug": "_3、globaleventhandlers-onload-加载完成事件-、globaleventhandlers-onloadstart-开始加载事件"
        },
        {
          "level": 3,
          "title": "4、GlobalEventHandlers.onfocus（获取焦点事件），GlobalEventHandlers.onblur（失去焦点事件）",
          "slug": "_4、globaleventhandlers-onfocus-获取焦点事件-globaleventhandlers-onblur-失去焦点事件"
        },
        {
          "level": 3,
          "title": "5、GlobalEventHandlers.onscroll（滚动事件）",
          "slug": "_5、globaleventhandlers-onscroll-滚动事件"
        },
        {
          "level": 3,
          "title": "6、GlobalEventHandlers.oncontextmenu（右键菜单事件），GlobalEventHandlers.onshow（显示右键菜单时触发）",
          "slug": "_6、globaleventhandlers-oncontextmenu-右键菜单事件-globaleventhandlers-onshow-显示右键菜单时触发"
        },
        {
          "level": 3,
          "title": "7、其他的事件属性",
          "slug": "_7、其他的事件属性"
        },
        {
          "level": 2,
          "title": "文档",
          "slug": "文档"
        }
      ]
    },
    {
      "title": "安装 TypeScript",
      "frontmatter": {
        "title": "安装 TypeScript",
        "date": "2020-01-05T10:15:07.000Z",
        "permalink": "/pages/064e0f7b6b6142c8",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "初识 TypeScript"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/01.%E5%88%9D%E8%AF%86%20TypeScript/02.%E5%AE%89%E8%A3%85%20TypeScript.html",
      "relativePath": "前端资料/TypeScript 从零实现/01.初识 TypeScript/02.安装 TypeScript.md",
      "key": "v-4aa8301d",
      "path": "/pages/064e0f7b6b6142c8/"
    },
    {
      "title": "简介",
      "frontmatter": {
        "title": "简介",
        "date": "2020-01-05T10:15:07.000Z",
        "permalink": "/pages/e05dce83e5129785",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "初识 TypeScript"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/01.%E5%88%9D%E8%AF%86%20TypeScript/01.%E7%AE%80%E4%BB%8B.html",
      "relativePath": "前端资料/TypeScript 从零实现/01.初识 TypeScript/01.简介.md",
      "key": "v-0b2d7f7d",
      "path": "/pages/e05dce83e5129785/",
      "headers": [
        {
          "level": 2,
          "title": "TypeScript 的特点",
          "slug": "typescript-的特点"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ]
    },
    {
      "title": "浏览器模型",
      "frontmatter": {
        "title": "浏览器模型",
        "date": "2020-01-12T11:49:16.000Z",
        "permalink": "/pages/bab4930124ad2c10",
        "categories": [
          "《JavaScript教程》笔记"
        ],
        "tags": [
          null
        ],
        "author": {
          "name": "xugaoyi",
          "link": "https://github.com/xugaoyi"
        }
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/JavaScript%E6%95%99%E7%A8%8B/07.%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B.html",
      "relativePath": "前端资料/JavaScript教程/07.浏览器模型.md",
      "key": "v-c036c9b8",
      "path": "/pages/bab4930124ad2c10/",
      "headers": [
        {
          "level": 2,
          "title": "一、浏览器环境概述",
          "slug": "一、浏览器环境概述"
        },
        {
          "level": 3,
          "title": "1、代码嵌入网页的方法",
          "slug": "_1、代码嵌入网页的方法"
        },
        {
          "level": 3,
          "title": "2、script 元素",
          "slug": "_2、script-元素"
        },
        {
          "level": 3,
          "title": "3、浏览器的组成",
          "slug": "_3、浏览器的组成"
        },
        {
          "level": 2,
          "title": "二、window 对象",
          "slug": "二、window-对象"
        },
        {
          "level": 3,
          "title": "1、概述",
          "slug": "_1、概述"
        },
        {
          "level": 3,
          "title": "2、window 对象的属性",
          "slug": "_2、window-对象的属性"
        },
        {
          "level": 3,
          "title": "3、window 对象的方法",
          "slug": "_3、window-对象的方法"
        },
        {
          "level": 3,
          "title": "4、事件",
          "slug": "_4、事件"
        },
        {
          "level": 3,
          "title": "5、多窗口操作",
          "slug": "_5、多窗口操作"
        },
        {
          "level": 2,
          "title": "三、Navigator 对象，Screen 对象",
          "slug": "三、navigator-对象-screen-对象"
        },
        {
          "level": 3,
          "title": "1、Navigator 对象的属性",
          "slug": "_1、navigator-对象的属性"
        },
        {
          "level": 3,
          "title": "2、Navigator 对象的方法",
          "slug": "_2、navigator-对象的方法"
        },
        {
          "level": 3,
          "title": "3、Screen 对象 （屏幕信息对象）",
          "slug": "_3、screen-对象-屏幕信息对象"
        },
        {
          "level": 2,
          "title": "四、Cookie",
          "slug": "四、cookie"
        },
        {
          "level": 3,
          "title": "1、概述",
          "slug": "_1、概述-2"
        },
        {
          "level": 3,
          "title": "2、Cookie 与 HTTP 协议",
          "slug": "_2、cookie-与-http-协议"
        },
        {
          "level": 3,
          "title": "3、Cookie 的属性",
          "slug": "_3、cookie-的属性"
        },
        {
          "level": 3,
          "title": "4、document.cookie 用于读写当前网页的 Cookie",
          "slug": "_4、document-cookie-用于读写当前网页的-cookie"
        },
        {
          "level": 2,
          "title": "五、XMLHttpRequest 对象",
          "slug": "五、xmlhttprequest-对象"
        },
        {
          "level": 3,
          "title": "1、简介",
          "slug": "_1、简介"
        },
        {
          "level": 3,
          "title": "2、XMLHttpRequest 的实例属性",
          "slug": "_2、xmlhttprequest-的实例属性"
        },
        {
          "level": 3,
          "title": "3、XMLHttpRequest 的实例方法",
          "slug": "_3、xmlhttprequest-的实例方法"
        },
        {
          "level": 3,
          "title": "4、XMLHttpRequest 实例的事件",
          "slug": "_4、xmlhttprequest-实例的事件"
        },
        {
          "level": 3,
          "title": "5、Navigator.sendBeacon() 卸载网页时发送数据",
          "slug": "_5、navigator-sendbeacon-卸载网页时发送数据"
        },
        {
          "level": 2,
          "title": "六、同源限制",
          "slug": "六、同源限制"
        },
        {
          "level": 3,
          "title": "1、概述",
          "slug": "_1、概述-3"
        },
        {
          "level": 3,
          "title": "2、Cookie",
          "slug": "_2、cookie"
        },
        {
          "level": 3,
          "title": "3、iframe 和多窗口通信",
          "slug": "_3、iframe-和多窗口通信"
        },
        {
          "level": 3,
          "title": "4、AJAX",
          "slug": "_4、ajax"
        },
        {
          "level": 2,
          "title": "七、CORS 通信",
          "slug": "七、cors-通信"
        },
        {
          "level": 3,
          "title": "1、简介",
          "slug": "_1、简介-2"
        },
        {
          "level": 3,
          "title": "2、两种请求",
          "slug": "_2、两种请求"
        },
        {
          "level": 3,
          "title": "3、简单请求",
          "slug": "_3、简单请求"
        },
        {
          "level": 3,
          "title": "4、非简单请求",
          "slug": "_4、非简单请求"
        },
        {
          "level": 3,
          "title": "5、与 JSONP 的比较",
          "slug": "_5、与-jsonp-的比较"
        },
        {
          "level": 2,
          "title": "八、Storage 接口",
          "slug": "八、storage-接口"
        },
        {
          "level": 3,
          "title": "1、概述",
          "slug": "_1、概述-4"
        },
        {
          "level": 3,
          "title": "2、属性和方法",
          "slug": "_2、属性和方法"
        },
        {
          "level": 3,
          "title": "3、storage 事件",
          "slug": "_3、storage-事件"
        },
        {
          "level": 2,
          "title": "九、History 对象",
          "slug": "九、history-对象"
        },
        {
          "level": 3,
          "title": "1、概述",
          "slug": "_1、概述-5"
        },
        {
          "level": 3,
          "title": "2、属性",
          "slug": "_2、属性"
        },
        {
          "level": 3,
          "title": "3、方法",
          "slug": "_3、方法"
        },
        {
          "level": 3,
          "title": "4、popstate 事件",
          "slug": "_4、popstate-事件"
        },
        {
          "level": 2,
          "title": "十、Location 对象，URL 对象，URLSearchParams 对象",
          "slug": "十、location-对象-url-对象-urlsearchparams-对象"
        },
        {
          "level": 3,
          "title": "1、Location 对象",
          "slug": "_1、location-对象"
        },
        {
          "level": 3,
          "title": "2、URL 的编码和解码",
          "slug": "_2、url-的编码和解码"
        },
        {
          "level": 3,
          "title": "3、URL 接口",
          "slug": "_3、url-接口"
        },
        {
          "level": 3,
          "title": "4、URLSearchParams 对象",
          "slug": "_4、urlsearchparams-对象"
        },
        {
          "level": 2,
          "title": "十一、ArrayBuffer 对象，Blob 对象",
          "slug": "十一、arraybuffer-对象-blob-对象"
        },
        {
          "level": 3,
          "title": "1、ArrayBuffer 对象",
          "slug": "_1、arraybuffer-对象"
        },
        {
          "level": 3,
          "title": "2、Blob 对象",
          "slug": "_2、blob-对象"
        },
        {
          "level": 2,
          "title": "十二、File 对象，FileList 对象，FileReader 对象",
          "slug": "十二、file-对象-filelist-对象-filereader-对象"
        },
        {
          "level": 3,
          "title": "1、File 对象",
          "slug": "_1、file-对象"
        },
        {
          "level": 3,
          "title": "2、FileList 对象",
          "slug": "_2、filelist-对象"
        },
        {
          "level": 3,
          "title": "3、FileReader 对象",
          "slug": "_3、filereader-对象"
        },
        {
          "level": 2,
          "title": "十三、表单，FormData 对象",
          "slug": "十三、表单-formdata-对象"
        },
        {
          "level": 3,
          "title": "1、表单概述",
          "slug": "_1、表单概述"
        },
        {
          "level": 3,
          "title": "2、FormData 对象",
          "slug": "_2、formdata-对象"
        },
        {
          "level": 3,
          "title": "3、表单的内置验证",
          "slug": "_3、表单的内置验证"
        },
        {
          "level": 3,
          "title": "4、enctype 属性",
          "slug": "_4、enctype-属性"
        },
        {
          "level": 3,
          "title": "5、文件上传",
          "slug": "_5、文件上传"
        },
        {
          "level": 2,
          "title": "十四、IndexedDB API",
          "slug": "十四、indexeddb-api"
        },
        {
          "level": 3,
          "title": "1、概述",
          "slug": "_1、概述-6"
        },
        {
          "level": 3,
          "title": "2、基本概念",
          "slug": "_2、基本概念"
        },
        {
          "level": 3,
          "title": "3、操作流程",
          "slug": "_3、操作流程"
        },
        {
          "level": 3,
          "title": "4、indexedDB 对象",
          "slug": "_4、indexeddb-对象"
        },
        {
          "level": 3,
          "title": "5、IDBRequest 对象",
          "slug": "_5、idbrequest-对象"
        },
        {
          "level": 3,
          "title": "6、IDBDatabase 对象",
          "slug": "_6、idbdatabase-对象"
        },
        {
          "level": 3,
          "title": "7、IDBObjectStore 对象",
          "slug": "_7、idbobjectstore-对象"
        },
        {
          "level": 3,
          "title": "8、IDBTransaction 对象",
          "slug": "_8、idbtransaction-对象"
        },
        {
          "level": 3,
          "title": "9、IDBIndex 对象",
          "slug": "_9、idbindex-对象"
        },
        {
          "level": 3,
          "title": "10、IDBCursor 对象",
          "slug": "_10、idbcursor-对象"
        },
        {
          "level": 3,
          "title": "11、IDBKeyRange 对象",
          "slug": "_11、idbkeyrange-对象"
        },
        {
          "level": 2,
          "title": "十五、Web Worker",
          "slug": "十五、web-worker"
        },
        {
          "level": 3,
          "title": "1、概述",
          "slug": "_1、概述-7"
        },
        {
          "level": 3,
          "title": "2、基本用法",
          "slug": "_2、基本用法"
        },
        {
          "level": 3,
          "title": "3、数据通信",
          "slug": "_3、数据通信"
        },
        {
          "level": 3,
          "title": "4、同页面的 Web Worker",
          "slug": "_4、同页面的-web-worker"
        },
        {
          "level": 3,
          "title": "5、实例：Worker 线程完成轮询",
          "slug": "_5、实例-worker-线程完成轮询"
        },
        {
          "level": 3,
          "title": "6、实例： Worker 新建 Worker",
          "slug": "_6、实例-worker-新建-worker"
        },
        {
          "level": 3,
          "title": "7、API",
          "slug": "_7、api"
        },
        {
          "level": 2,
          "title": "文档",
          "slug": "文档"
        }
      ]
    },
    {
      "title": "编写第一个 TypeScript 程序",
      "frontmatter": {
        "title": "编写第一个 TypeScript 程序",
        "date": "2020-01-05T10:15:07.000Z",
        "permalink": "/pages/c85249f40e7a3517",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "初识 TypeScript"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/01.%E5%88%9D%E8%AF%86%20TypeScript/03.%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA%20TypeScript%20%E7%A8%8B%E5%BA%8F.html",
      "relativePath": "前端资料/TypeScript 从零实现/01.初识 TypeScript/03.编写第一个 TypeScript 程序.md",
      "key": "v-7f530119",
      "path": "/pages/c85249f40e7a3517/",
      "headers": [
        {
          "level": 2,
          "title": "编译代码",
          "slug": "编译代码"
        },
        {
          "level": 2,
          "title": "类型注解",
          "slug": "类型注解"
        },
        {
          "level": 2,
          "title": "接口",
          "slug": "接口"
        },
        {
          "level": 2,
          "title": "类",
          "slug": "类"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ]
    },
    {
      "title": "基础类型",
      "frontmatter": {
        "title": "基础类型",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/28672e2743bbc3a7",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/01.%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B.html",
      "relativePath": "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/01.基础类型.md",
      "key": "v-21fc309f",
      "path": "/pages/28672e2743bbc3a7/",
      "headers": [
        {
          "level": 2,
          "title": "布尔值",
          "slug": "布尔值"
        },
        {
          "level": 2,
          "title": "数字",
          "slug": "数字"
        },
        {
          "level": 2,
          "title": "字符串",
          "slug": "字符串"
        },
        {
          "level": 2,
          "title": "数组",
          "slug": "数组"
        },
        {
          "level": 2,
          "title": "元组 Tuple",
          "slug": "元组-tuple"
        },
        {
          "level": 2,
          "title": "枚举",
          "slug": "枚举"
        },
        {
          "level": 2,
          "title": "any",
          "slug": "any"
        },
        {
          "level": 2,
          "title": "void",
          "slug": "void"
        },
        {
          "level": 2,
          "title": "null 和 undefined",
          "slug": "null-和-undefined"
        },
        {
          "level": 2,
          "title": "never",
          "slug": "never"
        },
        {
          "level": 2,
          "title": "object",
          "slug": "object"
        },
        {
          "level": 2,
          "title": "类型断言",
          "slug": "类型断言"
        }
      ]
    },
    {
      "title": "变量声明",
      "frontmatter": {
        "title": "变量声明",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/54add7f5cf78088e",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/02.%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E.html",
      "relativePath": "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/02.变量声明.md",
      "key": "v-32b16028",
      "path": "/pages/54add7f5cf78088e/",
      "headers": [
        {
          "level": 2,
          "title": "var 声明",
          "slug": "var-声明"
        },
        {
          "level": 3,
          "title": "作用域规则",
          "slug": "作用域规则"
        },
        {
          "level": 3,
          "title": "捕获变量怪异之处",
          "slug": "捕获变量怪异之处"
        },
        {
          "level": 2,
          "title": "let 声明",
          "slug": "let-声明"
        },
        {
          "level": 3,
          "title": "块作用域",
          "slug": "块作用域"
        },
        {
          "level": 3,
          "title": "重定义及屏蔽",
          "slug": "重定义及屏蔽"
        },
        {
          "level": 3,
          "title": "块级作用域变量的获取",
          "slug": "块级作用域变量的获取"
        },
        {
          "level": 2,
          "title": "const 声明",
          "slug": "const-声明"
        },
        {
          "level": 2,
          "title": "let vs. const",
          "slug": "let-vs-const"
        },
        {
          "level": 2,
          "title": "解构",
          "slug": "解构"
        },
        {
          "level": 3,
          "title": "解构数组",
          "slug": "解构数组"
        },
        {
          "level": 3,
          "title": "对象解构",
          "slug": "对象解构"
        },
        {
          "level": 3,
          "title": "属性重命名",
          "slug": "属性重命名"
        },
        {
          "level": 3,
          "title": "默认值",
          "slug": "默认值"
        },
        {
          "level": 3,
          "title": "函数声明",
          "slug": "函数声明"
        },
        {
          "level": 2,
          "title": "展开",
          "slug": "展开"
        }
      ]
    },
    {
      "title": "接口",
      "frontmatter": {
        "title": "接口",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/54ea89b497ec3bb3",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/03.%E6%8E%A5%E5%8F%A3.html",
      "relativePath": "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/03.接口.md",
      "key": "v-dfdba9a4",
      "path": "/pages/54ea89b497ec3bb3/",
      "headers": [
        {
          "level": 2,
          "title": "接口初探",
          "slug": "接口初探"
        },
        {
          "level": 2,
          "title": "可选属性",
          "slug": "可选属性"
        },
        {
          "level": 2,
          "title": "只读属性",
          "slug": "只读属性"
        },
        {
          "level": 3,
          "title": "readonly vs const",
          "slug": "readonly-vs-const"
        },
        {
          "level": 2,
          "title": "额外的属性检查",
          "slug": "额外的属性检查"
        },
        {
          "level": 2,
          "title": "函数类型",
          "slug": "函数类型"
        },
        {
          "level": 2,
          "title": "可索引的类型",
          "slug": "可索引的类型"
        },
        {
          "level": 2,
          "title": "类类型",
          "slug": "类类型"
        },
        {
          "level": 3,
          "title": "实现接口",
          "slug": "实现接口"
        },
        {
          "level": 3,
          "title": "类静态部分与实例部分的区别",
          "slug": "类静态部分与实例部分的区别"
        },
        {
          "level": 2,
          "title": "继承接口",
          "slug": "继承接口"
        },
        {
          "level": 2,
          "title": "混合类型",
          "slug": "混合类型"
        },
        {
          "level": 2,
          "title": "接口继承类",
          "slug": "接口继承类"
        }
      ]
    },
    {
      "title": "类",
      "frontmatter": {
        "title": "类",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/fad060bd9a8bfac6",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/04.%E7%B1%BB.html",
      "relativePath": "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/04.类.md",
      "key": "v-3ea728c2",
      "path": "/pages/fad060bd9a8bfac6/",
      "headers": [
        {
          "level": 2,
          "title": "基本示例",
          "slug": "基本示例"
        },
        {
          "level": 2,
          "title": "继承",
          "slug": "继承"
        },
        {
          "level": 2,
          "title": "公共，私有与受保护的修饰符",
          "slug": "公共-私有与受保护的修饰符"
        },
        {
          "level": 3,
          "title": "默认为 public",
          "slug": "默认为-public"
        },
        {
          "level": 3,
          "title": "理解 private",
          "slug": "理解-private"
        },
        {
          "level": 3,
          "title": "理解 protected",
          "slug": "理解-protected"
        },
        {
          "level": 2,
          "title": "readonly 修饰符",
          "slug": "readonly-修饰符"
        },
        {
          "level": 3,
          "title": "参数属性",
          "slug": "参数属性"
        },
        {
          "level": 2,
          "title": "存取器",
          "slug": "存取器"
        },
        {
          "level": 2,
          "title": "静态属性",
          "slug": "静态属性"
        },
        {
          "level": 2,
          "title": "抽象类",
          "slug": "抽象类"
        },
        {
          "level": 2,
          "title": "高级技巧",
          "slug": "高级技巧"
        },
        {
          "level": 3,
          "title": "构造函数",
          "slug": "构造函数"
        },
        {
          "level": 3,
          "title": "把类当做接口使用",
          "slug": "把类当做接口使用"
        }
      ]
    },
    {
      "title": "函数",
      "frontmatter": {
        "title": "函数",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/870a51ba2a9edfad",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/05.%E5%87%BD%E6%95%B0.html",
      "relativePath": "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/05.函数.md",
      "key": "v-31658ca2",
      "path": "/pages/870a51ba2a9edfad/",
      "headers": [
        {
          "level": 2,
          "title": "基本示例",
          "slug": "基本示例"
        },
        {
          "level": 2,
          "title": "函数类型",
          "slug": "函数类型"
        },
        {
          "level": 3,
          "title": "为函数定义类型",
          "slug": "为函数定义类型"
        },
        {
          "level": 3,
          "title": "书写完整函数类型",
          "slug": "书写完整函数类型"
        },
        {
          "level": 3,
          "title": "推断类型",
          "slug": "推断类型"
        },
        {
          "level": 2,
          "title": "可选参数和默认参数",
          "slug": "可选参数和默认参数"
        },
        {
          "level": 3,
          "title": "剩余参数",
          "slug": "剩余参数"
        },
        {
          "level": 2,
          "title": "this",
          "slug": "this"
        },
        {
          "level": 3,
          "title": "this 和箭头函数",
          "slug": "this-和箭头函数"
        },
        {
          "level": 3,
          "title": "this 参数",
          "slug": "this-参数"
        },
        {
          "level": 3,
          "title": "this 参数在回调函数里",
          "slug": "this-参数在回调函数里"
        },
        {
          "level": 2,
          "title": "重载",
          "slug": "重载"
        }
      ]
    },
    {
      "title": "泛型",
      "frontmatter": {
        "title": "泛型",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/8045759ec4ad3c01",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/06.%E6%B3%9B%E5%9E%8B.html",
      "relativePath": "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/06.泛型.md",
      "key": "v-2f524d97",
      "path": "/pages/8045759ec4ad3c01/",
      "headers": [
        {
          "level": 2,
          "title": "基础示例",
          "slug": "基础示例"
        },
        {
          "level": 2,
          "title": "使用泛型变量",
          "slug": "使用泛型变量"
        },
        {
          "level": 2,
          "title": "泛型类型",
          "slug": "泛型类型"
        },
        {
          "level": 2,
          "title": "泛型类",
          "slug": "泛型类"
        },
        {
          "level": 2,
          "title": "泛型约束",
          "slug": "泛型约束"
        },
        {
          "level": 3,
          "title": "在泛型约束中使用类型参数",
          "slug": "在泛型约束中使用类型参数"
        }
      ]
    },
    {
      "title": "类型推断",
      "frontmatter": {
        "title": "类型推断",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/7279420c899c505d",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/07.%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD.html",
      "relativePath": "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/07.类型推断.md",
      "key": "v-2c0e9afa",
      "path": "/pages/7279420c899c505d/",
      "headers": [
        {
          "level": 2,
          "title": "基础",
          "slug": "基础"
        },
        {
          "level": 2,
          "title": "最佳通用类型",
          "slug": "最佳通用类型"
        },
        {
          "level": 2,
          "title": "上下文类型",
          "slug": "上下文类型"
        }
      ]
    },
    {
      "title": "高级类型",
      "frontmatter": {
        "title": "高级类型",
        "date": "2020-01-05T10:17:47.000Z",
        "permalink": "/pages/3fb6c2f52ab398e3",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "TypeScript 常用语法"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/02.TypeScript%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/08.%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B.html",
      "relativePath": "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/08.高级类型.md",
      "key": "v-8315a56e",
      "path": "/pages/3fb6c2f52ab398e3/",
      "headers": [
        {
          "level": 2,
          "title": "交叉类型",
          "slug": "交叉类型"
        },
        {
          "level": 2,
          "title": "联合类型",
          "slug": "联合类型"
        },
        {
          "level": 2,
          "title": "类型保护",
          "slug": "类型保护"
        },
        {
          "level": 3,
          "title": "用户自定义的类型保护",
          "slug": "用户自定义的类型保护"
        },
        {
          "level": 3,
          "title": "typeof 类型保护",
          "slug": "typeof-类型保护"
        },
        {
          "level": 3,
          "title": "instanceof 类型保护",
          "slug": "instanceof-类型保护"
        },
        {
          "level": 2,
          "title": "可以为 null 的类型",
          "slug": "可以为-null-的类型"
        },
        {
          "level": 3,
          "title": "可选参数和可选属性",
          "slug": "可选参数和可选属性"
        },
        {
          "level": 3,
          "title": "类型保护和类型断言",
          "slug": "类型保护和类型断言"
        },
        {
          "level": 2,
          "title": "字符串字面量类型",
          "slug": "字符串字面量类型"
        },
        {
          "level": 2,
          "title": "总结",
          "slug": "总结"
        }
      ]
    },
    {
      "title": "需求分析",
      "frontmatter": {
        "title": "需求分析",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/195af93fcc871b8b",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 项目初始化"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/03.ts-axios%20%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/01.%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.html",
      "relativePath": "前端资料/TypeScript 从零实现/03.ts-axios 项目初始化/01.需求分析.md",
      "key": "v-567e12b2",
      "path": "/pages/195af93fcc871b8b/",
      "headers": [
        {
          "level": 2,
          "title": "Features",
          "slug": "features"
        }
      ]
    },
    {
      "title": "编写基础请求代码",
      "frontmatter": {
        "title": "编写基础请求代码",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/acfe1e0b401fa984",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 项目初始化"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/03.ts-axios%20%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/03.%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%A0%81.html",
      "relativePath": "前端资料/TypeScript 从零实现/03.ts-axios 项目初始化/03.编写基础请求代码.md",
      "key": "v-c0618870",
      "path": "/pages/acfe1e0b401fa984/",
      "headers": [
        {
          "level": 2,
          "title": "创建入口文件",
          "slug": "创建入口文件"
        },
        {
          "level": 3,
          "title": "编译配置文件 tsconfig.json",
          "slug": "编译配置文件-tsconfig-json"
        },
        {
          "level": 3,
          "title": "定义 AxiosRequestConfig 接口类型",
          "slug": "定义-axiosrequestconfig-接口类型"
        },
        {
          "level": 2,
          "title": "利用 XMLHttpRequest 发送请求",
          "slug": "利用-xmlhttprequest-发送请求"
        },
        {
          "level": 3,
          "title": "引入 xhr 模块",
          "slug": "引入-xhr-模块"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        },
        {
          "level": 3,
          "title": "依赖安装",
          "slug": "依赖安装"
        },
        {
          "level": 3,
          "title": "编写 webpack 配置文件",
          "slug": "编写-webpack-配置文件"
        },
        {
          "level": 3,
          "title": "编写 server 文件",
          "slug": "编写-server-文件"
        },
        {
          "level": 3,
          "title": "编写 demo 代码",
          "slug": "编写-demo-代码"
        },
        {
          "level": 3,
          "title": "运行 demo",
          "slug": "运行-demo"
        }
      ]
    },
    {
      "title": "初始化项目",
      "frontmatter": {
        "title": "初始化项目",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/6e11ac76475a2b3e",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 项目初始化"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/03.ts-axios%20%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/02.%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE.html",
      "relativePath": "前端资料/TypeScript 从零实现/03.ts-axios 项目初始化/02.初始化项目.md",
      "key": "v-7ad0eefd",
      "path": "/pages/6e11ac76475a2b3e/",
      "headers": [
        {
          "level": 2,
          "title": "创建代码仓库",
          "slug": "创建代码仓库"
        },
        {
          "level": 2,
          "title": "TypeScript library starter",
          "slug": "typescript-library-starter"
        },
        {
          "level": 3,
          "title": "使用方式",
          "slug": "使用方式"
        },
        {
          "level": 3,
          "title": "目录文件介绍",
          "slug": "目录文件介绍"
        },
        {
          "level": 3,
          "title": "优秀工具集成",
          "slug": "优秀工具集成"
        },
        {
          "level": 3,
          "title": "Npm Scripts",
          "slug": "npm-scripts"
        },
        {
          "level": 2,
          "title": "关联远程分支",
          "slug": "关联远程分支"
        },
        {
          "level": 3,
          "title": "拉取代码",
          "slug": "拉取代码"
        },
        {
          "level": 3,
          "title": "提交代码",
          "slug": "提交代码"
        }
      ]
    },
    {
      "title": "处理请求 url 参数",
      "frontmatter": {
        "title": "处理请求 url 参数",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/1313dae575f6dddf",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 基础功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/04.ts-axios%20%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%20url%20%E5%8F%82%E6%95%B0.html",
      "relativePath": "前端资料/TypeScript 从零实现/04.ts-axios 基础功能实现/01.处理请求 url 参数.md",
      "key": "v-7b79b61d",
      "path": "/pages/1313dae575f6dddf/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 3,
          "title": "参数值为数组",
          "slug": "参数值为数组"
        },
        {
          "level": 3,
          "title": "参数值为对象",
          "slug": "参数值为对象"
        },
        {
          "level": 3,
          "title": "参数值为 Date 类型",
          "slug": "参数值为-date-类型"
        },
        {
          "level": 3,
          "title": "特殊字符支持",
          "slug": "特殊字符支持"
        },
        {
          "level": 3,
          "title": "空值忽略",
          "slug": "空值忽略"
        },
        {
          "level": 3,
          "title": "丢弃 url 中的哈希标记",
          "slug": "丢弃-url-中的哈希标记"
        },
        {
          "level": 3,
          "title": "保留 url 中已存在的参数",
          "slug": "保留-url-中已存在的参数"
        },
        {
          "level": 2,
          "title": "buildURL 函数实现",
          "slug": "buildurl-函数实现"
        },
        {
          "level": 2,
          "title": "实现 url 参数处理逻辑",
          "slug": "实现-url-参数处理逻辑"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "处理请求 body 数据",
      "frontmatter": {
        "title": "处理请求 body 数据",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/887cd0918e2543d8",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 基础功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/04.ts-axios%20%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/02.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%20body%20%E6%95%B0%E6%8D%AE.html",
      "relativePath": "前端资料/TypeScript 从零实现/04.ts-axios 基础功能实现/02.处理请求 body 数据.md",
      "key": "v-3730d206",
      "path": "/pages/887cd0918e2543d8/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "transformRequest 函数实现",
          "slug": "transformrequest-函数实现"
        },
        {
          "level": 2,
          "title": "实现请求 body 处理逻辑",
          "slug": "实现请求-body-处理逻辑"
        },
        {
          "level": 2,
          "title": "编写 demo",
          "slug": "编写-demo"
        }
      ]
    },
    {
      "title": "获取响应数据",
      "frontmatter": {
        "title": "获取响应数据",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/a57debe141e1e4f4",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 基础功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/04.ts-axios%20%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/04.%E8%8E%B7%E5%8F%96%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE.html",
      "relativePath": "前端资料/TypeScript 从零实现/04.ts-axios 基础功能实现/04.获取响应数据.md",
      "key": "v-1fdd656c",
      "path": "/pages/a57debe141e1e4f4/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "定义接口类型",
          "slug": "定义接口类型"
        },
        {
          "level": 2,
          "title": "实现获取响应数据逻辑",
          "slug": "实现获取响应数据逻辑"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "处理请求 header",
      "frontmatter": {
        "title": "处理请求 header",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/35c0ec1bb0b0faaf",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 基础功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/04.ts-axios%20%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/03.%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%20header.html",
      "relativePath": "前端资料/TypeScript 从零实现/04.ts-axios 基础功能实现/03.处理请求 header.md",
      "key": "v-673cbd19",
      "path": "/pages/35c0ec1bb0b0faaf/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "processHeaders 函数实现",
          "slug": "processheaders-函数实现"
        },
        {
          "level": 2,
          "title": "实现请求 header 处理逻辑",
          "slug": "实现请求-header-处理逻辑"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "处理响应 header",
      "frontmatter": {
        "title": "处理响应 header",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/927161662ca32c24",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 基础功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/04.ts-axios%20%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/05.%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%20header.html",
      "relativePath": "前端资料/TypeScript 从零实现/04.ts-axios 基础功能实现/05.处理响应 header.md",
      "key": "v-134c7e42",
      "path": "/pages/927161662ca32c24/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "parseHeaders 函数实现及应用",
          "slug": "parseheaders-函数实现及应用"
        }
      ]
    },
    {
      "title": "处理响应 data",
      "frontmatter": {
        "title": "处理响应 data",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/922cb4268499dc3f",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 基础功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/04.ts-axios%20%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/06.%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%20data.html",
      "relativePath": "前端资料/TypeScript 从零实现/04.ts-axios 基础功能实现/06.处理响应 data.md",
      "key": "v-267a01f4",
      "path": "/pages/922cb4268499dc3f/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "transformResponse 函数实现及应用",
          "slug": "transformresponse-函数实现及应用"
        }
      ]
    },
    {
      "title": "错误处理",
      "frontmatter": {
        "title": "错误处理",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/6a8bef7b98dfdcf9",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 异常情况处理"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/05.ts-axios%20%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/01.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html",
      "relativePath": "前端资料/TypeScript 从零实现/05.ts-axios 异常情况处理/01.错误处理.md",
      "key": "v-4fc516ca",
      "path": "/pages/6a8bef7b98dfdcf9/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "处理网络异常错误",
          "slug": "处理网络异常错误"
        },
        {
          "level": 2,
          "title": "处理超时错误",
          "slug": "处理超时错误"
        },
        {
          "level": 2,
          "title": "处理非 200 状态码",
          "slug": "处理非-200-状态码"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "错误信息增强",
      "frontmatter": {
        "title": "错误信息增强",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/22d581d8c2860b8a",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 异常情况处理"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/05.ts-axios%20%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86/02.%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E5%A2%9E%E5%BC%BA.html",
      "relativePath": "前端资料/TypeScript 从零实现/05.ts-axios 异常情况处理/02.错误信息增强.md",
      "key": "v-fa6720a6",
      "path": "/pages/22d581d8c2860b8a/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "创建 AxiosError 类",
          "slug": "创建-axioserror-类"
        },
        {
          "level": 2,
          "title": "createError 方法应用",
          "slug": "createerror-方法应用"
        },
        {
          "level": 2,
          "title": "导出类型定义",
          "slug": "导出类型定义"
        }
      ]
    },
    {
      "title": "扩展接口",
      "frontmatter": {
        "title": "扩展接口",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/034e320f4af88bd4",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 接口扩展"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/06.ts-axios%20%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/01.%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3.html",
      "relativePath": "前端资料/TypeScript 从零实现/06.ts-axios 接口扩展/01.扩展接口.md",
      "key": "v-5900b9a2",
      "path": "/pages/034e320f4af88bd4/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "接口类型定义",
          "slug": "接口类型定义"
        },
        {
          "level": 2,
          "title": "创建 Axios 类",
          "slug": "创建-axios-类"
        },
        {
          "level": 2,
          "title": "混合对象实现",
          "slug": "混合对象实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "axios 函数重载",
      "frontmatter": {
        "title": "axios 函数重载",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/8af227eae851ec97",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 接口扩展"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/06.ts-axios%20%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/02.axios%20%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD.html",
      "relativePath": "前端资料/TypeScript 从零实现/06.ts-axios 接口扩展/02.axios 函数重载.md",
      "key": "v-fe6cec98",
      "path": "/pages/8af227eae851ec97/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "重载实现",
          "slug": "重载实现"
        },
        {
          "level": 2,
          "title": "编写 demo",
          "slug": "编写-demo"
        }
      ]
    },
    {
      "title": "响应数据支持泛型",
      "frontmatter": {
        "title": "响应数据支持泛型",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/c4489d0bab02cc0c",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 接口扩展"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/06.ts-axios%20%E6%8E%A5%E5%8F%A3%E6%89%A9%E5%B1%95/03.%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E6%94%AF%E6%8C%81%E6%B3%9B%E5%9E%8B.html",
      "relativePath": "前端资料/TypeScript 从零实现/06.ts-axios 接口扩展/03.响应数据支持泛型.md",
      "key": "v-c38d67f8",
      "path": "/pages/c4489d0bab02cc0c/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "接口添加泛型参数",
          "slug": "接口添加泛型参数"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "拦截器设计与实现",
      "frontmatter": {
        "title": "拦截器设计与实现",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/70651900f022f586",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 拦截器实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/07.ts-axios%20%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0/01.%E6%8B%A6%E6%88%AA%E5%99%A8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html",
      "relativePath": "前端资料/TypeScript 从零实现/07.ts-axios 拦截器实现/01.拦截器设计与实现.md",
      "key": "v-a010f3ac",
      "path": "/pages/70651900f022f586/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "整体设计",
          "slug": "整体设计"
        },
        {
          "level": 2,
          "title": "拦截器管理类实现",
          "slug": "拦截器管理类实现"
        },
        {
          "level": 3,
          "title": "接口定义",
          "slug": "接口定义"
        },
        {
          "level": 3,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "链式调用实现",
          "slug": "链式调用实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "合并配置的设计与实现",
      "frontmatter": {
        "title": "合并配置的设计与实现",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/937e4de6b81edeca",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 配置化实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/08.ts-axios%20%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/01.%E5%90%88%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html",
      "relativePath": "前端资料/TypeScript 从零实现/08.ts-axios 配置化实现/01.合并配置的设计与实现.md",
      "key": "v-785b6f7c",
      "path": "/pages/937e4de6b81edeca/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "默认配置",
          "slug": "默认配置"
        },
        {
          "level": 3,
          "title": "默认配置定义",
          "slug": "默认配置定义"
        },
        {
          "level": 3,
          "title": "添加到 axios 对象中",
          "slug": "添加到-axios-对象中"
        },
        {
          "level": 2,
          "title": "配置合并及策略",
          "slug": "配置合并及策略"
        },
        {
          "level": 3,
          "title": "合并方法",
          "slug": "合并方法"
        },
        {
          "level": 3,
          "title": "默认合并策略",
          "slug": "默认合并策略"
        },
        {
          "level": 3,
          "title": "只接受自定义配置合并策略",
          "slug": "只接受自定义配置合并策略"
        },
        {
          "level": 3,
          "title": "复杂对象合并策略",
          "slug": "复杂对象合并策略"
        },
        {
          "level": 2,
          "title": "flatten headers",
          "slug": "flatten-headers"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "请求和响应配置化",
      "frontmatter": {
        "title": "请求和响应配置化",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/f5b627bfebba87fc",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 配置化实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/08.ts-axios%20%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/02.%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E9%85%8D%E7%BD%AE%E5%8C%96.html",
      "relativePath": "前端资料/TypeScript 从零实现/08.ts-axios 配置化实现/02.请求和响应配置化.md",
      "key": "v-47e05fa4",
      "path": "/pages/f5b627bfebba87fc/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "修改默认配置",
          "slug": "修改默认配置"
        },
        {
          "level": 2,
          "title": "transform 逻辑重构",
          "slug": "transform-逻辑重构"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "withCredentials",
      "frontmatter": {
        "title": "withCredentials",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/5dce43eba796a2ab",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.withCredentials.html",
      "relativePath": "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/01.withCredentials.md",
      "key": "v-165b2d1e",
      "path": "/pages/5dce43eba796a2ab/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "扩展 create 静态接口",
      "frontmatter": {
        "title": "扩展 create 静态接口",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/7b49658c26f613bf",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 配置化实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/08.ts-axios%20%E9%85%8D%E7%BD%AE%E5%8C%96%E5%AE%9E%E7%8E%B0/03.%E6%89%A9%E5%B1%95%20create%20%E9%9D%99%E6%80%81%E6%8E%A5%E5%8F%A3.html",
      "relativePath": "前端资料/TypeScript 从零实现/08.ts-axios 配置化实现/03.扩展 create 静态接口.md",
      "key": "v-712086b2",
      "path": "/pages/7b49658c26f613bf/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "静态方法扩展",
          "slug": "静态方法扩展"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "取消功能的设计与实现",
      "frontmatter": {
        "title": "取消功能的设计与实现",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/fdc6da5372397430",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 取消功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/09.ts-axios%20%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/01.%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html",
      "relativePath": "前端资料/TypeScript 从零实现/09.ts-axios 取消功能实现/01.取消功能的设计与实现.md",
      "key": "v-313c10f7",
      "path": "/pages/fdc6da5372397430/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "异步分离的设计方案",
          "slug": "异步分离的设计方案"
        },
        {
          "level": 2,
          "title": "CancelToken 类实现",
          "slug": "canceltoken-类实现"
        },
        {
          "level": 3,
          "title": "接口定义",
          "slug": "接口定义"
        },
        {
          "level": 3,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "CancelToken 扩展静态接口",
          "slug": "canceltoken-扩展静态接口"
        },
        {
          "level": 3,
          "title": "接口定义",
          "slug": "接口定义-2"
        },
        {
          "level": 3,
          "title": "代码实现",
          "slug": "代码实现-2"
        },
        {
          "level": 2,
          "title": "Cancel 类实现及 axios 的扩展",
          "slug": "cancel-类实现及-axios-的扩展"
        },
        {
          "level": 3,
          "title": "接口定义",
          "slug": "接口定义-3"
        },
        {
          "level": 3,
          "title": "代码实现",
          "slug": "代码实现-3"
        },
        {
          "level": 2,
          "title": "额外逻辑实现",
          "slug": "额外逻辑实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "XSRF 防御",
      "frontmatter": {
        "title": "XSRF 防御",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/390cb70e2b619449",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/02.XSRF%20%E9%98%B2%E5%BE%A1.html",
      "relativePath": "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/02.XSRF 防御.md",
      "key": "v-70c3b8cf",
      "path": "/pages/390cb70e2b619449/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "上传和下载的进度监控",
      "frontmatter": {
        "title": "上传和下载的进度监控",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/1376fd897809036e",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/03.%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E7%9A%84%E8%BF%9B%E5%BA%A6%E7%9B%91%E6%8E%A7.html",
      "relativePath": "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/03.上传和下载的进度监控.md",
      "key": "v-41f65fee",
      "path": "/pages/1376fd897809036e/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "HTTP 授权",
      "frontmatter": {
        "title": "HTTP 授权",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/89cd6496c23159ae",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/04.HTTP%20%E6%8E%88%E6%9D%83.html",
      "relativePath": "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/04.HTTP 授权.md",
      "key": "v-1a6d1e0c",
      "path": "/pages/89cd6496c23159ae/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "自定义合法状态码",
      "frontmatter": {
        "title": "自定义合法状态码",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/40b41ce8e8159567",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/05.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%88%E6%B3%95%E7%8A%B6%E6%80%81%E7%A0%81.html",
      "relativePath": "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/05.自定义合法状态码.md",
      "key": "v-cbea5ce8",
      "path": "/pages/40b41ce8e8159567/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "自定义参数序列化",
      "frontmatter": {
        "title": "自定义参数序列化",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/7753b8141663e54a",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/06.%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%BA%8F%E5%88%97%E5%8C%96.html",
      "relativePath": "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/06.自定义参数序列化.md",
      "key": "v-27cd0f5b",
      "path": "/pages/7753b8141663e54a/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "baseURL",
      "frontmatter": {
        "title": "baseURL",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/0b9f2ee2b4dbb728",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/07.baseURL.html",
      "relativePath": "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/07.baseURL.md",
      "key": "v-2a942a55",
      "path": "/pages/0b9f2ee2b4dbb728/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "静态方法扩展",
      "frontmatter": {
        "title": "静态方法扩展",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/c26b053540a7dafa",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 更多功能实现"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/10.ts-axios%20%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/08.%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95.html",
      "relativePath": "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/08.静态方法扩展.md",
      "key": "v-31c01be8",
      "path": "/pages/c26b053540a7dafa/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "代码实现",
          "slug": "代码实现"
        },
        {
          "level": 2,
          "title": "demo 编写",
          "slug": "demo-编写"
        }
      ]
    },
    {
      "title": "前言",
      "frontmatter": {
        "title": "前言",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/df36888424843793",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/01.%E5%89%8D%E8%A8%80.html",
      "relativePath": "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/01.前言.md",
      "key": "v-5c88aa9f",
      "path": "/pages/df36888424843793/"
    },
    {
      "title": "Jest 安装和配置",
      "frontmatter": {
        "title": "Jest 安装和配置",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/bf5c625a35757b37",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/02.Jest%20%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.html",
      "relativePath": "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/02.Jest 安装和配置.md",
      "key": "v-502e1cd2",
      "path": "/pages/bf5c625a35757b37/",
      "headers": [
        {
          "level": 2,
          "title": "Jest 安装",
          "slug": "jest-安装"
        },
        {
          "level": 2,
          "title": "Jest 配置",
          "slug": "jest-配置"
        }
      ]
    },
    {
      "title": "辅助模块单元测试",
      "frontmatter": {
        "title": "辅助模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/13f147a9b355c4c1",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/03.%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/03.辅助模块单元测试.md",
      "key": "v-2d36749c",
      "path": "/pages/13f147a9b355c4c1/",
      "headers": [
        {
          "level": 2,
          "title": "准备工作",
          "slug": "准备工作"
        },
        {
          "level": 2,
          "title": "util 模块测试",
          "slug": "util-模块测试"
        },
        {
          "level": 2,
          "title": "cookie 模块测试",
          "slug": "cookie-模块测试"
        },
        {
          "level": 2,
          "title": "data 模块测试",
          "slug": "data-模块测试"
        },
        {
          "level": 2,
          "title": "error 模块测试",
          "slug": "error-模块测试"
        },
        {
          "level": 2,
          "title": "headers 模块测试",
          "slug": "headers-模块测试"
        },
        {
          "level": 2,
          "title": "url 模块测试",
          "slug": "url-模块测试"
        }
      ]
    },
    {
      "title": "请求模块单元测试",
      "frontmatter": {
        "title": "请求模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/e1d15dec8634e6b5",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/04.%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/04.请求模块单元测试.md",
      "key": "v-7bd03548",
      "path": "/pages/e1d15dec8634e6b5/",
      "headers": [
        {
          "level": 2,
          "title": "jasmine-ajax",
          "slug": "jasmine-ajax"
        },
        {
          "level": 2,
          "title": "测试代码编写",
          "slug": "测试代码编写"
        }
      ]
    },
    {
      "title": "headers 模块单元测试",
      "frontmatter": {
        "title": "headers 模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/ddd86ec39b5dfe33",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/05.headers%20%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/05.headers 模块单元测试.md",
      "key": "v-1ee117c7",
      "path": "/pages/ddd86ec39b5dfe33/",
      "headers": [
        {
          "level": 2,
          "title": "测试代码编写",
          "slug": "测试代码编写"
        }
      ]
    },
    {
      "title": "拦截器模块单元测试",
      "frontmatter": {
        "title": "拦截器模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/97de6fd6293a2c6e",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/07.%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/07.拦截器模块单元测试.md",
      "key": "v-6d088ec7",
      "path": "/pages/97de6fd6293a2c6e/",
      "headers": [
        {
          "level": 2,
          "title": "测试代码编写",
          "slug": "测试代码编写"
        }
      ]
    },
    {
      "title": "mergeConfig 模块单元测试",
      "frontmatter": {
        "title": "mergeConfig 模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/cdf59840306f9e81",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/08.mergeConfig%20%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/08.mergeConfig 模块单元测试.md",
      "key": "v-5ad3bb32",
      "path": "/pages/cdf59840306f9e81/",
      "headers": [
        {
          "level": 2,
          "title": "测试代码编写",
          "slug": "测试代码编写"
        }
      ]
    },
    {
      "title": "请求取消模块单元测试",
      "frontmatter": {
        "title": "请求取消模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/6fa16aee29527032",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/09.%E8%AF%B7%E6%B1%82%E5%8F%96%E6%B6%88%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/09.请求取消模块单元测试.md",
      "key": "v-a446a4a0",
      "path": "/pages/6fa16aee29527032/",
      "headers": [
        {
          "level": 2,
          "title": "Cancel 类单元测试",
          "slug": "cancel-类单元测试"
        },
        {
          "level": 2,
          "title": "CancelToken 类单元测试",
          "slug": "canceltoken-类单元测试"
        },
        {
          "level": 2,
          "title": "Cancel 业务逻辑单元测试",
          "slug": "cancel-业务逻辑单元测试"
        }
      ]
    },
    {
      "title": "Axios 实例模块单元测试",
      "frontmatter": {
        "title": "Axios 实例模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/2eac7a0a0d644c15",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/06.Axios%20%E5%AE%9E%E4%BE%8B%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/06.Axios 实例模块单元测试.md",
      "key": "v-5bcb9916",
      "path": "/pages/2eac7a0a0d644c15/",
      "headers": [
        {
          "level": 2,
          "title": "测试代码编写",
          "slug": "测试代码编写"
        }
      ]
    },
    {
      "title": "剩余模块单元测试",
      "frontmatter": {
        "title": "剩余模块单元测试",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/9572134781ba6a25",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 单元测试"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/11.ts-axios%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/10.%E5%89%A9%E4%BD%99%E6%A8%A1%E5%9D%97%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",
      "relativePath": "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/10.剩余模块单元测试.md",
      "key": "v-4b193694",
      "path": "/pages/9572134781ba6a25/",
      "headers": [
        {
          "level": 2,
          "title": "defaults 模块单元测试",
          "slug": "defaults-模块单元测试"
        },
        {
          "level": 2,
          "title": "transform 模块单元测试",
          "slug": "transform-模块单元测试"
        },
        {
          "level": 2,
          "title": "xsrf 模块单元测试",
          "slug": "xsrf-模块单元测试"
        },
        {
          "level": 2,
          "title": "上传下载模块单元测试",
          "slug": "上传下载模块单元测试"
        },
        {
          "level": 2,
          "title": "HTTP 授权模块单元测试",
          "slug": "http-授权模块单元测试"
        },
        {
          "level": 2,
          "title": "静态方法模块单元测试",
          "slug": "静态方法模块单元测试"
        },
        {
          "level": 2,
          "title": "补充未覆盖的代码测试",
          "slug": "补充未覆盖的代码测试"
        }
      ]
    },
    {
      "title": "ts-axios 编译与发布",
      "frontmatter": {
        "title": "ts-axios 编译与发布",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/3e5d5a45ad50f198",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 部署与发布"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/12.ts-axios%20%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/01.ts-axios%20%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%91%E5%B8%83.html",
      "relativePath": "前端资料/TypeScript 从零实现/12.ts-axios 部署与发布/01.ts-axios 编译与发布.md",
      "key": "v-690890d5",
      "path": "/pages/3e5d5a45ad50f198/",
      "headers": [
        {
          "level": 2,
          "title": "需求分析",
          "slug": "需求分析"
        },
        {
          "level": 2,
          "title": "编译和打包",
          "slug": "编译和打包"
        },
        {
          "level": 3,
          "title": "修改 rollup.config.ts",
          "slug": "修改-rollup-config-ts"
        },
        {
          "level": 3,
          "title": "修改 package.json",
          "slug": "修改-package-json"
        },
        {
          "level": 2,
          "title": "自动化部署",
          "slug": "自动化部署"
        },
        {
          "level": 3,
          "title": "修改 package.json",
          "slug": "修改-package-json-2"
        },
        {
          "level": 3,
          "title": "编写部署脚本",
          "slug": "编写部署脚本"
        },
        {
          "level": 2,
          "title": "运行部署脚本",
          "slug": "运行部署脚本"
        }
      ]
    },
    {
      "title": "引用 ts-axios 库",
      "frontmatter": {
        "title": "引用 ts-axios 库",
        "date": "2020-01-05T10:56:02.000Z",
        "permalink": "/pages/c6bdbd5bd60adf5a",
        "author": "HuangYi",
        "categories": [
          "《TypeScript 从零实现 axios》",
          "ts-axios 部署与发布"
        ],
        "tags": [
          null
        ]
      },
      "regularPath": "/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/TypeScript%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0/12.ts-axios%20%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%8F%91%E5%B8%83/02.%E5%BC%95%E7%94%A8%20ts-axios%20%E5%BA%93.html",
      "relativePath": "前端资料/TypeScript 从零实现/12.ts-axios 部署与发布/02.引用 ts-axios 库.md",
      "key": "v-de7e84ec",
      "path": "/pages/c6bdbd5bd60adf5a/",
      "headers": [
        {
          "level": 2,
          "title": "在 TS 项目中引用",
          "slug": "在-ts-项目中引用"
        },
        {
          "level": 2,
          "title": "在 JS 项目中引用",
          "slug": "在-js-项目中引用"
        }
      ]
    },
    {
      "title": "2.x版本集成",
      "frontmatter": {},
      "regularPath": "/%E9%9B%86%E6%88%90mybatis-plus/2.x%E7%89%88%E6%9C%AC%E9%9B%86%E6%88%90%20.html",
      "relativePath": "集成mybatis-plus/2.x版本集成 .md",
      "key": "v-5b40eff8",
      "path": "/%E9%9B%86%E6%88%90mybatis-plus/2.x%E7%89%88%E6%9C%AC%E9%9B%86%E6%88%90%20.html",
      "headers": [
        {
          "level": 2,
          "title": "导入jar包",
          "slug": "导入jar包"
        },
        {
          "level": 2,
          "title": "添加配置类",
          "slug": "添加配置类"
        },
        {
          "level": 2,
          "title": "继承通用mapper类",
          "slug": "继承通用mapper类"
        },
        {
          "level": 2,
          "title": "继承通用Server实现类",
          "slug": "继承通用server实现类"
        },
        {
          "level": 2,
          "title": "继承通用Server抽象类",
          "slug": "继承通用server抽象类"
        }
      ]
    },
    {
      "title": "3.x版本集成",
      "frontmatter": {},
      "regularPath": "/%E9%9B%86%E6%88%90mybatis-plus/3.x%E7%89%88%E6%9C%AC%E9%9B%86%E6%88%90.html",
      "relativePath": "集成mybatis-plus/3.x版本集成.md",
      "key": "v-124e1af7",
      "path": "/%E9%9B%86%E6%88%90mybatis-plus/3.x%E7%89%88%E6%9C%AC%E9%9B%86%E6%88%90.html",
      "headers": [
        {
          "level": 2,
          "title": "导入jar包",
          "slug": "导入jar包"
        },
        {
          "level": 2,
          "title": "删除mybatisjar包",
          "slug": "删除mybatisjar包"
        },
        {
          "level": 2,
          "title": "修改application.yml",
          "slug": "修改application-yml"
        },
        {
          "level": 2,
          "title": "添加配置类",
          "slug": "添加配置类"
        },
        {
          "level": 2,
          "title": "继承通用mapper类",
          "slug": "继承通用mapper类"
        },
        {
          "level": 2,
          "title": "继承通用Server实现类",
          "slug": "继承通用server实现类"
        },
        {
          "level": 2,
          "title": "继承通用Server抽象类",
          "slug": "继承通用server抽象类"
        }
      ]
    }
  ],
  "themeConfig": {
    "nav": [
      {
        "text": "回到首页",
        "link": "http://localhost:8080"
      }
    ],
    "sidebar": [
      {
        "title": "指南",
        "children": [
          "1.指南/指南"
        ]
      },
      {
        "title": "Git",
        "children": [
          {
            "title": "手册",
            "children": [
              "Git/10.手册/00.常用Git命令清单",
              "Git/10.手册/03.Git变基合并",
              "Git/10.手册/06.Git命令思维导图"
            ]
          },
          {
            "title": "文档笔记",
            "children": [
              "Git/20.文档笔记/10.Git基础与命令",
              "Git/20.文档笔记/100.Git工具-重写历史",
              "Git/20.文档笔记/110.Git工具-重置揭密",
              "Git/20.文档笔记/20.Git分支-分支原理",
              "Git/20.文档笔记/30.Git分支的新建与合并-分支操作",
              "Git/20.文档笔记/40.Git分支管理-查看分支",
              "Git/20.文档笔记/50.Git分支开发工作流",
              "Git/20.文档笔记/60.Git分支-远程分支",
              "Git/20.文档笔记/70.Git分支-变基",
              "Git/20.文档笔记/80.Git工具-查看修订版本",
              "Git/20.文档笔记/90.Git工具-交互式暂存"
            ]
          }
        ]
      },
      {
        "title": "Vue",
        "children": [
          {
            "title": "基础",
            "children": [
              "Vue/01.基础/00.MVVM模式",
              "Vue/01.基础/10.生命周期",
              "Vue/01.基础/20.计算属性 vs 方法 vs 侦听属性",
              "Vue/01.基础/30.v-if vs v-show",
              "Vue/01.基础/35.列表渲染之数组、对象更新检测"
            ]
          },
          {
            "title": "组件",
            "children": [
              "Vue/02.组件/36.使用组件的细节点",
              "Vue/02.组件/40.父组件给子组件传值",
              "Vue/02.组件/50.子组件派发事件和值给父组件",
              "Vue/02.组件/52.Prop 验证 与 非 Prop 的 Attribute",
              "Vue/02.组件/55.自定义事件",
              "Vue/02.组件/60.兄弟组件传值",
              "Vue/02.组件/65.非父子组件传值",
              "Vue/02.组件/70.父组件调用子组件方法并传入值",
              "Vue/02.组件/75.插槽slot",
              "Vue/02.组件/80.动态组件与 v-once 指令",
              "Vue/02.组件/90.vue父子组件的生命周期顺序"
            ]
          },
          {
            "title": "过渡 动画",
            "children": [
              "Vue/03.过渡&动画/110.transition过渡&动画",
              "Vue/03.过渡&动画/112.使用animate库",
              "Vue/03.过渡&动画/120.transition-group列表过渡"
            ]
          },
          {
            "title": "可复用性 组合",
            "children": [
              "Vue/04.可复用性&组合/01.Mixin混入"
            ]
          },
          {
            "title": "工具",
            "children": [
              "Vue/05.工具/10.Vue CLi v3 创建项目使用记录"
            ]
          },
          {
            "title": "规模化",
            "children": [
              "Vue/06.规模化/100.vuex操作相关",
              "Vue/06.规模化/140.路由懒加载"
            ]
          },
          {
            "title": "Vuex",
            "children": [
              "Vue/10.Vuex/01.Vuex"
            ]
          },
          {
            "title": "其他",
            "children": [
              "Vue/99.其他/80.Vue中的防抖函数封装和使用",
              "Vue/99.其他/90.操作本地缓存"
            ]
          }
        ]
      },
      {
        "title": "前端资料",
        "children": [
          {
            "title": "ES 6 教程",
            "children": [
              "前端资料/ES6 教程/01.ECMAScript 6 简介",
              "前端资料/ES6 教程/02.let 和 const 命令",
              "前端资料/ES6 教程/03.变量的解构赋值",
              "前端资料/ES6 教程/04.字符串的扩展",
              "前端资料/ES6 教程/05.字符串的新增方法",
              "前端资料/ES6 教程/06.正则的扩展",
              "前端资料/ES6 教程/07.数值的扩展",
              "前端资料/ES6 教程/08.函数的扩展",
              "前端资料/ES6 教程/09.数组的扩展",
              "前端资料/ES6 教程/10.对象的扩展",
              "前端资料/ES6 教程/11.对象的新增方法",
              "前端资料/ES6 教程/12.Symbol",
              "前端资料/ES6 教程/13.Set 和 Map 数据结构",
              "前端资料/ES6 教程/14.Proxy",
              "前端资料/ES6 教程/15.Reflect",
              "前端资料/ES6 教程/16.Promise 对象",
              "前端资料/ES6 教程/17.Iterator 和 for-of 循环",
              "前端资料/ES6 教程/18.Generator 函数的语法",
              "前端资料/ES6 教程/19.Generator 函数的异步应用",
              "前端资料/ES6 教程/20.async 函数",
              "前端资料/ES6 教程/21.Class 的基本语法",
              "前端资料/ES6 教程/22.Class 的继承",
              "前端资料/ES6 教程/23.Module 的语法",
              "前端资料/ES6 教程/24.Module 的加载实现",
              "前端资料/ES6 教程/25.编程风格",
              "前端资料/ES6 教程/26.读懂 ECMAScript 规格",
              "前端资料/ES6 教程/27.异步遍历器",
              "前端资料/ES6 教程/28.ArrayBuffer",
              "前端资料/ES6 教程/29.最新提案",
              "前端资料/ES6 教程/30.装饰器",
              "前端资料/ES6 教程/31.函数式编程",
              "前端资料/ES6 教程/32.Mixin",
              "前端资料/ES6 教程/33.SIMD",
              "前端资料/ES6 教程/34.参考链接"
            ]
          },
          {
            "title": "Java Script教程",
            "children": [
              "前端资料/JavaScript教程/01.基础",
              "前端资料/JavaScript教程/02.内置对象",
              "前端资料/JavaScript教程/03.面向对象",
              "前端资料/JavaScript教程/04.异步操作",
              "前端资料/JavaScript教程/05.DOM",
              "前端资料/JavaScript教程/06.事件",
              "前端资料/JavaScript教程/07.浏览器模型"
            ]
          },
          {
            "title": "Type Script 从零实现",
            "children": [
              "前端资料/TypeScript 从零实现/01.初识 TypeScript/01.简介",
              "前端资料/TypeScript 从零实现/01.初识 TypeScript/02.安装 TypeScript",
              "前端资料/TypeScript 从零实现/01.初识 TypeScript/03.编写第一个 TypeScript 程序",
              "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/01.基础类型",
              "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/02.变量声明",
              "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/03.接口",
              "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/04.类",
              "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/05.函数",
              "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/06.泛型",
              "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/07.类型推断",
              "前端资料/TypeScript 从零实现/02.TypeScript 常用语法/08.高级类型",
              "前端资料/TypeScript 从零实现/03.ts-axios 项目初始化/01.需求分析",
              "前端资料/TypeScript 从零实现/03.ts-axios 项目初始化/02.初始化项目",
              "前端资料/TypeScript 从零实现/03.ts-axios 项目初始化/03.编写基础请求代码",
              "前端资料/TypeScript 从零实现/04.ts-axios 基础功能实现/01.处理请求 url 参数",
              "前端资料/TypeScript 从零实现/04.ts-axios 基础功能实现/02.处理请求 body 数据",
              "前端资料/TypeScript 从零实现/04.ts-axios 基础功能实现/03.处理请求 header",
              "前端资料/TypeScript 从零实现/04.ts-axios 基础功能实现/04.获取响应数据",
              "前端资料/TypeScript 从零实现/04.ts-axios 基础功能实现/05.处理响应 header",
              "前端资料/TypeScript 从零实现/04.ts-axios 基础功能实现/06.处理响应 data",
              "前端资料/TypeScript 从零实现/05.ts-axios 异常情况处理/01.错误处理",
              "前端资料/TypeScript 从零实现/05.ts-axios 异常情况处理/02.错误信息增强",
              "前端资料/TypeScript 从零实现/06.ts-axios 接口扩展/01.扩展接口",
              "前端资料/TypeScript 从零实现/06.ts-axios 接口扩展/02.axios 函数重载",
              "前端资料/TypeScript 从零实现/06.ts-axios 接口扩展/03.响应数据支持泛型",
              "前端资料/TypeScript 从零实现/07.ts-axios 拦截器实现/01.拦截器设计与实现",
              "前端资料/TypeScript 从零实现/08.ts-axios 配置化实现/01.合并配置的设计与实现",
              "前端资料/TypeScript 从零实现/08.ts-axios 配置化实现/02.请求和响应配置化",
              "前端资料/TypeScript 从零实现/08.ts-axios 配置化实现/03.扩展 create 静态接口",
              "前端资料/TypeScript 从零实现/09.ts-axios 取消功能实现/01.取消功能的设计与实现",
              "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/01.withCredentials",
              "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/02.XSRF 防御",
              "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/03.上传和下载的进度监控",
              "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/04.HTTP 授权",
              "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/05.自定义合法状态码",
              "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/06.自定义参数序列化",
              "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/07.baseURL",
              "前端资料/TypeScript 从零实现/10.ts-axios 更多功能实现/08.静态方法扩展",
              "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/01.前言",
              "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/02.Jest 安装和配置",
              "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/03.辅助模块单元测试",
              "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/04.请求模块单元测试",
              "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/05.headers 模块单元测试",
              "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/06.Axios 实例模块单元测试",
              "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/07.拦截器模块单元测试",
              "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/08.mergeConfig 模块单元测试",
              "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/09.请求取消模块单元测试",
              "前端资料/TypeScript 从零实现/11.ts-axios 单元测试/10.剩余模块单元测试",
              "前端资料/TypeScript 从零实现/12.ts-axios 部署与发布/01.ts-axios 编译与发布",
              "前端资料/TypeScript 从零实现/12.ts-axios 部署与发布/02.引用 ts-axios 库"
            ]
          }
        ]
      },
      {
        "title": "集成mybatis Plus",
        "children": [
          "集成mybatis-plus/2.x版本集成 ",
          "集成mybatis-plus/3.x版本集成"
        ]
      }
    ],
    "sidebarDepth": 3
  }
}